from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, BufferedInputFile
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from ..services.excel_service import ExcelService
from ..services.catalog import CatalogService
from ..services.user import UserService
from .keyboards.catalog_management_kb import CatalogManagementKeyboard
from ..utils.message_editor import update_message
from ..utils.callback_helpers import safe_callback_answer
import logging
from datetime import datetime
import os

logger = logging.getLogger(__name__)

catalog_management_router = Router(name="catalog_management")

class CatalogManagementStates(StatesGroup):
    waiting_for_excel = State()

@catalog_management_router.callback_query(F.data == "menu:catalog_management")
async def show_catalog_management(callback: CallbackQuery, user_service: UserService):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–æ–º - —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥: aiogram3-di"""
    try:
        logger.info(f"üéØ CATALOG MANAGEMENT HANDLER TRIGGERED! User {callback.from_user.id} callback: {callback.data}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await user_service.get_user(callback.from_user.id)
        if not user or user.role not in ['hr', 'admin']:
            logger.warning(f"üö´ Access denied for user {callback.from_user.id}, role: {user.role if user else 'None'}")
            await safe_callback_answer(callback, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        text = (
            "üìä <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–æ–º</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
            "‚Ä¢ üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –∏–∑ Excel\n"
            "‚Ä¢ üì§ –í—ã–≥—Ä—É–∑–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫–∞—Ç–∞–ª–æ–≥\n\n"
            "üí° <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</b>\n"
            "‚Ä¢ Excel —Ñ–∞–π–ª—ã (.xlsx, .xls)\n"
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤\n"
            "‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è Google Drive —Å—Å—ã–ª–æ–∫ –≤ image_url"
        )
        
        keyboard = CatalogManagementKeyboard.get_management_keyboard()
        await update_message(callback, text=text, reply_markup=keyboard)
        await safe_callback_answer(callback)
        
    except Exception as e:
        logger.error(f"Error showing catalog management: {e}")
        await safe_callback_answer(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@catalog_management_router.callback_query(F.data == "catalog:upload_excel")
async def request_excel_file(callback: CallbackQuery, state: FSMContext, user_service: UserService):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å Excel —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ - —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥: aiogram3-di"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await user_service.get_user(callback.from_user.id)
        if not user or user.role not in ['hr', 'admin']:
            await safe_callback_answer(callback, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
            
        await state.set_state(CatalogManagementStates.waiting_for_excel)
        
        text = (
            "üì• <b>–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ Excel</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏.\n\n"
            "üìã <b>–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏:</b>\n"
            "‚Ä¢ <code>name</code> - –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞\n"
            "‚Ä¢ <code>price</code> - —Ü–µ–Ω–∞ –≤ T-Points\n\n"
            "üìã <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏:</b>\n"
            "‚Ä¢ <code>description</code> - –æ–ø–∏—Å–∞–Ω–∏–µ\n"
            "‚Ä¢ <code>image_url</code> - —Å—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n"
            "‚Ä¢ <code>color</code> - —Ü–≤–µ—Ç —Ç–æ–≤–∞—Ä–∞\n"
            "‚Ä¢ <code>sizes</code> - —Ä–∞–∑–º–µ—Ä—ã (—Ñ–æ—Ä–º–∞—Ç: S:10,M:20,L:15)\n"
            "‚Ä¢ <code>quantity</code> - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ —Ä–∞–∑–º–µ—Ä–æ–≤)\n"
            "‚Ä¢ <code>is_available</code> - –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å (true/false)\n\n"
            "üîó <b>Google Drive —Å—Å—ã–ª–∫–∏ –≤ image_url –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é—Ç—Å—è!</b>"
        )
        
        keyboard = CatalogManagementKeyboard.get_cancel_keyboard()
        await update_message(callback, text=text, reply_markup=keyboard)
        await safe_callback_answer(callback)
        
    except Exception as e:
        logger.error(f"Error requesting Excel file: {e}")
        await safe_callback_answer(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@catalog_management_router.message(CatalogManagementStates.waiting_for_excel, F.document)
async def handle_excel_upload(
    message: Message, 
    state: FSMContext, 
    excel_service: ExcelService,
    catalog_service: CatalogService,
    user_service: UserService
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ Excel —Ñ–∞–π–ª–∞ - —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥: aiogram3-di"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await user_service.get_user(message.from_user.id)
        if not user or user.role not in ['hr', 'admin']:
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            await state.clear()
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        if not message.document.file_name.endswith(('.xlsx', '.xls')):
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª Excel (.xlsx –∏–ª–∏ .xls)")
            return
            
        await message.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª...")
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É temp –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs("temp", exist_ok=True)
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file = await message.bot.get_file(message.document.file_id)
        file_path = f"temp/{message.document.file_name}"
        await message.bot.download_file(file.file_path, file_path)
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã
        products = await excel_service.import_products_from_excel(file_path)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –°–†–ê–ó–£ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        try:
            os.remove(file_path)
            logger.info(f"Temporary file {file_path} deleted")
        except Exception as e:
            logger.warning(f"Failed to delete temporary file {file_path}: {e}")
        
        if not products:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä—ã –≤ —Ñ–∞–π–ª–µ")
            await state.clear()
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        updated_count = await catalog_service.bulk_update_products(products)
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
        text = (
            "‚úÖ <b>–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
            f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: <b>{len(products)}</b>\n"
            f"üíæ –û–±–Ω–æ–≤–ª–µ–Ω–æ –≤ –±–∞–∑–µ: <b>{updated_count}</b>\n\n"
            f"üìù –î–µ—Ç–∞–ª–∏:\n"
            f"‚Ä¢ –ù–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã\n"
            f"‚Ä¢ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã\n"
            f"‚Ä¢ Google Drive —Å—Å—ã–ª–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã\n"
            f"‚Ä¢ –†–∞–∑–º–µ—Ä—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã\n"
            f"‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω"
        )
        
        keyboard = CatalogManagementKeyboard.get_management_keyboard()
        await message.answer(text=text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error handling Excel upload: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞:\n<code>{str(e)}</code>")
        await state.clear()
        
        # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        try:
            if 'file_path' in locals():
                os.remove(file_path)
        except:
            pass

@catalog_management_router.callback_query(F.data == "catalog:export")
async def export_catalog(callback: CallbackQuery, excel_service: ExcelService, user_service: UserService):
    """–í—ã–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ –≤ Excel - —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥: aiogram3-di"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await user_service.get_user(callback.from_user.id)
        if not user or user.role not in ['hr', 'admin']:
            await safe_callback_answer(callback, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞
        await update_message(
            callback,
            text="‚è≥ –§–æ—Ä–º–∏—Ä—É—é Excel —Ñ–∞–π–ª...",
            reply_markup=None
        )
        
        # –ü–æ–ª—É—á–∞–µ–º Excel —Ñ–∞–π–ª –∫–∞–∫ BytesIO
        excel_buffer = await excel_service.export_products_to_excel()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        current_time = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"catalog_export_{current_time}.xlsx"
        
        # –°–æ–∑–¥–∞–µ–º BufferedInputFile –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        excel_file = BufferedInputFile(
            file=excel_buffer.getvalue(),
            filename=filename
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        await callback.message.answer_document(
            document=excel_file,
            caption=(
                f"üìä <b>–í—ã–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n"
                f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
                f"üìã –§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n"
                f"üîÑ –ì–æ—Ç–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏"
            )
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –≤—ã–≥—Ä—É–∑–∫–∏
        keyboard = CatalogManagementKeyboard.get_management_keyboard()
        await callback.message.answer(
            text="‚úÖ –ö–∞—Ç–∞–ª–æ–≥ —É—Å–ø–µ—à–Ω–æ –≤—ã–≥—Ä—É–∂–µ–Ω! –ß—Ç–æ –¥–∞–ª—å—à–µ?",
            reply_markup=keyboard
        )
        
        logger.info(f"Catalog exported successfully: {filename}")
        await safe_callback_answer(callback)
        
    except Exception as e:
        logger.error(f"Error exporting catalog: {e}")
        await safe_callback_answer(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –∫–∞—Ç–∞–ª–æ–≥–∞", show_alert=True) 

@catalog_management_router.callback_query(F.data == "catalog:cancel")
async def cancel_operation(callback: CallbackQuery, state: FSMContext, user_service: UserService):
    """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ - —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥: aiogram3-di"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await user_service.get_user(callback.from_user.id)
        if not user or user.role not in ['hr', 'admin']:
            await safe_callback_answer(callback, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
            
        await state.clear()
        
        text = (
            "‚ùå <b>–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n"
            "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–æ–º."
        )
        
        keyboard = CatalogManagementKeyboard.get_management_keyboard()
        await update_message(callback, text=text, reply_markup=keyboard)
        await safe_callback_answer(callback)
        
    except Exception as e:
        logger.error(f"Error canceling operation: {e}")
        await safe_callback_answer(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞") 