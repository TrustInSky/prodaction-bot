"""
–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏.
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏, –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
"""
from typing import Tuple, Optional
from ...models.models import Product

def get_available_quantity(product: Product, size: Optional[str] = None) -> int:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞.
    
    Args:
        product: –¢–æ–≤–∞—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        size: –†–∞–∑–º–µ—Ä (–¥–ª—è –æ–¥–µ–∂–¥—ã), –µ—Å–ª–∏ None - –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        
    Returns:
        –î–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
    """
    if not product:
        return 0
    
    if size and product.is_clothing():
        return product.sizes_dict.get(size, 0)
    else:
        return product.quantity_as_number

def validate_product_availability(product: Product, quantity: int, size: Optional[str] = None) -> Tuple[bool, str]:
    """
    –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –≤ –Ω—É–∂–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ.
    
    Args:
        product: –¢–æ–≤–∞—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        quantity: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        size: –†–∞–∑–º–µ—Ä (–¥–ª—è –æ–¥–µ–∂–¥—ã)
        
    Returns:
        Tuple[bool, str]: (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ)
    """
    if not product:
        return False, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"
    
    if not product.is_available:
        return False, "‚ùå –¢–æ–≤–∞—Ä –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞"
    
    if quantity <= 0:
        return False, "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0"
    
    available = get_available_quantity(product, size)
    
    if available <= 0:
        if size:
            return False, f"‚ùå –†–∞–∑–º–µ—Ä {size} –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω"
        else:
            return False, "‚ùå –¢–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è"
    
    if quantity > available:
        if size:
            return False, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ {size}. –î–æ—Å—Ç—É–ø–Ω–æ: {available}"
        else:
            return False, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞. –î–æ—Å—Ç—É–ø–Ω–æ: {available}"
    
    return True, "‚úÖ –¢–æ–≤–∞—Ä –¥–æ—Å—Ç—É–ø–µ–Ω"

def get_product_info(product: Product, size: Optional[str] = None) -> dict:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ.
    
    Args:
        product: –¢–æ–≤–∞—Ä
        size: –†–∞–∑–º–µ—Ä (–¥–ª—è –æ–¥–µ–∂–¥—ã)
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–≤–∞—Ä–µ
    """
    if not product:
        return {}
    
    info = {
        'id': product.id,
        'name': product.name,
        'price': product.price,
        'color': product.color,
        'description': product.description,
        'is_available': product.is_available,
        'is_clothing': product.is_clothing(),
        'size': size,
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ
    available_stock = get_available_quantity(product, size)
    info['available_stock'] = available_stock
    info['has_stock'] = available_stock > 0
    
    if size and product.is_clothing():
        info['stock_info'] = f"—Ä–∞–∑–º–µ—Ä {size}, –æ—Å—Ç–∞—Ç–æ–∫: {available_stock}"
        info['all_sizes'] = product.sizes_dict
    else:
        info['stock_info'] = f"–æ—Å—Ç–∞—Ç–æ–∫: {available_stock}"
        if product.is_clothing():
            info['all_sizes'] = product.sizes_dict
    
    return info

def format_availability_text(product: Product, size: Optional[str] = None) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞.
    
    Args:
        product: –¢–æ–≤–∞—Ä
        size: –†–∞–∑–º–µ—Ä (–¥–ª—è –æ–¥–µ–∂–¥—ã)
        
    Returns:
        –¢–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    """
    if not product:
        return "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"
    
    if not product.is_available:
        return "‚ùå <b>–¢–æ–≤–∞—Ä –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞</b>"
    
    available = get_available_quantity(product, size)
    
    if available <= 0:
        if size:
            return f"‚ùå <b>–†–∞–∑–º–µ—Ä {size} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b>"
        else:
            return "‚ùå <b>–¢–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è</b>"
    
    if size and product.is_clothing():
        return f"‚úÖ <b>–†–∞–∑–º–µ—Ä {size} –¥–æ—Å—Ç—É–ø–µ–Ω ({available} —à—Ç.)</b>"
    else:
        return f"‚úÖ <b>–¢–æ–≤–∞—Ä –¥–æ—Å—Ç—É–ø–µ–Ω ({available} —à—Ç.)</b>"

def format_sizes_info(product: Product, current_size: Optional[str] = None) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–º–µ—Ä–∞—Ö —Ç–æ–≤–∞—Ä–∞.
    
    Args:
        product: –¢–æ–≤–∞—Ä
        current_size: –¢–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        
    Returns:
        –¢–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–∞–∑–º–µ—Ä–∞—Ö
    """
    if not product or not product.is_clothing():
        return ""
    
    sizes_dict = product.sizes_dict
    if not sizes_dict:
        return "üìè –†–∞–∑–º–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
    
    text = "üìè –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã:\n"
    for size, qty in sizes_dict.items():
        status = "‚úÖ" if qty > 0 else "‚ùå"
        marker = " üëà" if size == current_size else ""
        text += f"{status} {size}: {qty} —à—Ç.{marker}\n"
    
    return text.rstrip()

def get_size_availability_summary(product: Product) -> dict:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ä–∞–∑–º–µ—Ä–æ–≤.
    
    Args:
        product: –¢–æ–≤–∞—Ä
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–∞–∑–º–µ—Ä–∞—Ö
    """
    if not product or not product.is_clothing():
        return {}
    
    sizes_dict = product.sizes_dict
    if not sizes_dict:
        return {}
    
    available_sizes = [(size, qty) for size, qty in sizes_dict.items() if qty > 0]
    unavailable_sizes = [(size, qty) for size, qty in sizes_dict.items() if qty <= 0]
    
    return {
        'total_sizes': len(sizes_dict),
        'available_sizes': available_sizes,
        'unavailable_sizes': unavailable_sizes,
        'has_available': len(available_sizes) > 0,
        'all_sizes_available': len(unavailable_sizes) == 0
    } 