"""
–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ—Ä–∑–∏–Ω–æ–π.
–í—ã–Ω–æ—Å–∏–º –¥—É–±–ª–∏—Ä—É—é—â—É—é—Å—è –ª–æ–≥–∏–∫—É –∏–∑ cart.py –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –∫–æ–¥–∞.
"""
from typing import Tuple, Optional, List
from decimal import Decimal
import logging
from ...models.models import CartItem, Product
from .product_helpers import get_available_quantity

logger = logging.getLogger(__name__)

def parse_cart_item_id(callback_data: str) -> Optional[int]:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–∞—Ä—Å–∏—Ç ID —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–æ—Ä–∑–∏–Ω—ã –∏–∑ callback_data"""
    try:
        return int(callback_data.split("_")[2])
    except (ValueError, IndexError) as e:
        logger.error(f"Invalid callback data: {callback_data}, error: {e}")
        return None

def check_cart_item_access(cart_item: CartItem, user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–±–æ—Ç–∞—Ç—å —Å —ç–ª–µ–º–µ–Ω—Ç–æ–º –∫–æ—Ä–∑–∏–Ω—ã"""
    return (
        cart_item and 
        cart_item.product and 
        cart_item.cart.user_id == user_id
    )



def format_cart_item_info(cart_item: CartItem) -> dict:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–ª–µ–º–µ–Ω—Ç–µ –∫–æ—Ä–∑–∏–Ω—ã"""
    if not cart_item or not cart_item.product:
        return {}
    
    product = cart_item.product
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    info = {
        'name': product.name,
        'quantity': cart_item.quantity,
        'price': product.price,
        'total': cart_item.quantity * product.price,
        'size': cart_item.size,
        'color': product.color,
    }
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    available_stock = get_available_quantity(product, cart_item.size)
    info['available_stock'] = available_stock
    info['is_available'] = available_stock >= cart_item.quantity and product.is_available
    
    if cart_item.size and product.is_clothing():
        info['stock_info'] = f"(—Ä–∞–∑–º–µ—Ä {cart_item.size}, –æ—Å—Ç–∞—Ç–æ–∫: {available_stock})"
    else:
        info['stock_info'] = f"(–æ—Å—Ç–∞—Ç–æ–∫: {available_stock})"
    
    return info

def format_cart_item_text(cart_item: CartItem) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–æ—Ä–∑–∏–Ω—ã"""
    info = format_cart_item_info(cart_item)
    if not info:
        return "‚ùå –¢–æ–≤–∞—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
    text = f"üõí <b>{info['name']}</b>\n\n"
    
    if info['size']:
        text += f"üìè –†–∞–∑–º–µ—Ä: {info['size']}\n"
    
    if info['color']:
        text += f"üé® –¶–≤–µ—Ç: {info['color']}\n"
    
    text += f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {info['quantity']} —à—Ç.\n"
    text += f"üí∞ –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É: {info['price']:,} T-Points\n"
    text += f"üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {info['total']:,} T-Points\n\n"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    text += f"üì¶ –û—Å—Ç–∞—Ç–æ–∫: {info['available_stock']} —à—Ç.\n"
    
    if not info['is_available']:
        text += f"‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ: –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ {info['available_stock']} —à—Ç.</b>\n"
    elif not cart_item.product.is_available:
        text += f"‚ùå <b>–¢–æ–≤–∞—Ä –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞</b>\n"
    else:
        text += f"‚úÖ <b>–¢–æ–≤–∞—Ä –¥–æ—Å—Ç—É–ø–µ–Ω</b>\n"
    
    return text

def calculate_cart_totals(cart_items: List[CartItem]) -> dict:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏—Ç–æ–≥–∏ –∫–æ—Ä–∑–∏–Ω—ã"""
    total_price = 0
    has_unavailable_items = False
    item_details = []
    
    for item in cart_items:
        if not item.product:
            continue
        
        info = format_cart_item_info(item)
        if not info:
            continue
        
        item_details.append(info)
        
        if info['is_available']:
            total_price += info['total']
        else:
            has_unavailable_items = True
    
    return {
        'total_price': total_price,
        'has_unavailable_items': has_unavailable_items,
        'item_details': item_details,
        'items_count': len(item_details)
    }

def format_cart_summary_text(cart_items: List[CartItem], user_balance: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∫–æ—Ä–∑–∏–Ω—ã —Å –∏—Ç–æ–≥–∞–º–∏"""
    if not cart_items:
        return f"üõí <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</b>\n\nüíé –í–∞—à –±–∞–ª–∞–Ω—Å: {user_balance:,} T-Points"
    
    totals = calculate_cart_totals(cart_items)
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    text = f"üõí <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:</b>\n\n"
    
    # –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
    for info in totals['item_details']:
        if info['is_available']:
            text += f"‚úÖ {info['name']}"
            if info['size']:
                text += f" (—Ä–∞–∑–º–µ—Ä {info['size']})"
            text += f"\n   {info['stock_info']}\n"
            text += f"   {info['quantity']} —à—Ç. √ó {info['price']} = {info['total']} T-Points\n"
        else:
            text += f"‚ùå {info['name']}"
            if info['size']:
                text += f" (—Ä–∞–∑–º–µ—Ä {info['size']})"
            text += f"\n   ‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ! –ó–∞–ø—Ä–æ—à–µ–Ω–æ: {info['quantity']}, –¥–æ—Å—Ç—É–ø–Ω–æ: {info['available_stock']}\n"
        text += "\n"
    
    # –ò—Ç–æ–≥–∏
    text += f"üí∞ <b>–ò—Ç–æ–≥–æ: {totals['total_price']:,} T-Points</b>\n"
    text += f"üíé –í–∞—à –±–∞–ª–∞–Ω—Å: {user_balance:,} T-Points\n"
    
    # –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    if totals['total_price'] > user_balance:
        text += f"‚ö†Ô∏è <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: {totals['total_price'] - user_balance:,} T-Points</b>\n"
    elif totals['has_unavailable_items']:
        text += f"‚ö†Ô∏è <b>–í –∫–æ—Ä–∑–∏–Ω–µ –µ—Å—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã</b>\n"
    else:
        text += f"‚úÖ <b>–ú–æ–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑</b>\n"
    
    return text

def validate_item_quantity_change(cart_item: CartItem, new_quantity: int) -> Tuple[bool, str]:
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    if new_quantity < 1:
        return False, "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 1"
    
    available_quantity = get_available_quantity(cart_item.product, cart_item.size)
    
    if new_quantity > available_quantity:
        return False, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ (–¥–æ—Å—Ç—É–ø–Ω–æ: {available_quantity})"
    
    return True, "‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å" 