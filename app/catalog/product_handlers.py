from aiogram import Router, F
from aiogram.types import CallbackQuery, InputMediaPhoto
from ..services.catalog import CatalogService
from ..services.cart import CartService
from .keyboards.catalog_kb import CatalogKeyboard
from ..utils.message_editor import update_message
from ..utils.callback_helpers import safe_callback_answer
from .utils.product_formatters import format_product_card, format_success_add
from .utils.product_helpers import (
    get_available_quantity,
    validate_product_availability,
    format_sizes_info
)
import logging
from typing import Union, Optional

logger = logging.getLogger(__name__)

router = Router(name="product_handlers")

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
catalog_indices = {}

@router.callback_query(F.data.startswith("catalog:page:"))
async def show_catalog_page(callback: CallbackQuery, catalog_service: CatalogService):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤ (–ø–∞–≥–∏–Ω–∞—Ü–∏—è) - —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥: aiogram3-di –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–Ω–∂–µ–∫—Ç–∏—Ç CatalogService"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback_data
        page = int(callback.data.split(":")[2])
        logger.info(f"User {callback.from_user.id} opening catalog page {page}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã
        products = await catalog_service.get_available_products()
        
        text = "üõç –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤:\n\n"
        if not products:
            text += "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤."
            keyboard = CatalogKeyboard.get_catalog_keyboard([], 1)
            await update_message(callback, text=text, reply_markup=keyboard)
            return
            
        keyboard = CatalogKeyboard.get_catalog_keyboard(products, page)
        await update_message(callback, text=text, reply_markup=keyboard)
        await safe_callback_answer(callback)
            
    except Exception as e:
        logger.error(f"Error showing catalog page for user {callback.from_user.id}: {e}")
        await safe_callback_answer(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –∫–∞—Ç–∞–ª–æ–≥–∞")

@router.callback_query(F.data.startswith("product:add_to_cart:"))
async def start_add_to_cart(callback: CallbackQuery, catalog_service: CatalogService):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É"""
    try:
        product_id = int(callback.data.split(":")[2])
        logger.info(f"User {callback.from_user.id} starting add to cart for product {product_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        product = await catalog_service.get_product(product_id)
        if not product:
            await safe_callback_answer(callback, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        if not product.is_available:
            await safe_callback_answer(callback, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        products = await catalog_service.get_available_products()
        current_index = next((i for i, p in enumerate(products) if p.id == product_id), -1)
        
        prev_product = products[current_index - 1] if current_index > 0 else None
        next_product = products[current_index + 1] if current_index < len(products) - 1 else None
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        text = format_product_card(product)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard = CatalogKeyboard.get_product_keyboard(
            product=product,
            prev_product=prev_product,
            next_product=next_product
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ message_editor
        if product.image_url:
            media = InputMediaPhoto(
                media=product.image_url,
                caption=text,
                parse_mode="HTML"
            )
            await update_message(callback, text=None, media=media, reply_markup=keyboard)
        else:
            await update_message(callback, text=text, reply_markup=keyboard)
            
        await safe_callback_answer(callback)
            
    except Exception as e:
        logger.error(f"Error starting add to cart for user {callback.from_user.id}: {e}")
        await safe_callback_answer(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É")

@router.callback_query(F.data.startswith("product:confirm:"))
async def confirm_add_to_cart(
    callback: CallbackQuery, 
    catalog_service: CatalogService, 
    cart_service: CartService
):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É - —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥: –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –∏–Ω–∂–µ–∫—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤"""
    try:
        product_id = int(callback.data.split(":")[2])
        user_id = callback.from_user.id
        
        logger.info(f"User {user_id} confirming add to cart for product {product_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä —á–µ—Ä–µ–∑ –∫–∞—Ç–∞–ª–æ–≥-—Å–µ—Ä–≤–∏—Å
        product = await catalog_service.get_product(product_id)
        if not product:
            await safe_callback_answer(callback, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞
        if not product.is_available or product.total_stock <= 0:
            await safe_callback_answer(callback, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
            
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É —á–µ—Ä–µ–∑ –∫–∞—Ä—Ç-—Å–µ—Ä–≤–∏—Å
        cart_item = await cart_service.add_item(
            user_id=user_id,
            product_id=product_id,
            quantity=1  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 —à—Ç
        )
        
        if cart_item:
            # –£—Å–ø–µ—à–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
            text = format_success_add(product, 1)
            keyboard = CatalogKeyboard.get_success_add_to_cart_keyboard(product_id)
            await update_message(callback, text=text, reply_markup=keyboard)
            await safe_callback_answer(callback, "‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")
        else:
            await safe_callback_answer(callback, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É")
            
    except Exception as e:
        logger.error(f"Error confirming add to cart for user {callback.from_user.id}: {e}")
        await safe_callback_answer(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏")

@router.callback_query(F.data.startswith("product:size:"))
async def show_size_selection(callback: CallbackQuery, catalog_service: CatalogService):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —Ä–∞–∑–º–µ—Ä–∞ –¥–ª—è –æ–¥–µ–∂–¥—ã"""
    try:
        product_id = int(callback.data.split(":")[2])
        
        logger.info(f"User {callback.from_user.id} selecting size for product {product_id}")
        
        product = await catalog_service.get_product(product_id)
        if not product:
            await safe_callback_answer(callback, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        if not product.is_clothing():
            await safe_callback_answer(callback, "‚ùå –£ —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç —Ä–∞–∑–º–µ—Ä–æ–≤")
            return
            
        text = f"üìè –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –¥–ª—è {product.name}:\n\n"
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤
        text += format_sizes_info(product)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        products = await catalog_service.get_available_products()
        current_index = next((i for i, p in enumerate(products) if p.id == product_id), -1)
        
        prev_product = products[current_index - 1] if current_index > 0 else None
        next_product = products[current_index + 1] if current_index < len(products) - 1 else None
        
        keyboard = CatalogKeyboard.get_size_selection_keyboard(product, prev_product, next_product)
        await update_message(callback, text=text, reply_markup=keyboard)
        await safe_callback_answer(callback)
        
    except Exception as e:
        logger.error(f"Error showing size selection for user {callback.from_user.id}: {e}")
        await safe_callback_answer(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–∞–∑–º–µ—Ä–∞")

@router.callback_query(F.data.startswith("product:quantity:"))
async def show_quantity_selection(callback: CallbackQuery, catalog_service: CatalogService):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞"""
    try:
        parts = callback.data.split(":")
        product_id = int(parts[2])
        size = parts[3] if len(parts) > 3 and parts[3] != "none" else None
        
        logger.info(f"User {callback.from_user.id} selecting quantity for product {product_id}, size: {size}")
        
        product = await catalog_service.get_product(product_id)
        if not product:
            await safe_callback_answer(callback, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        available = get_available_quantity(product, size)
        
        if size and product.is_clothing():
            text = f"üî¢ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è {product.name} (—Ä–∞–∑–º–µ—Ä {size}):\n"
        else:
            text = f"üî¢ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è {product.name}:\n"
            
        if available <= 0:
            await safe_callback_answer(callback, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
            
        text += f"\n–î–æ—Å—Ç—É–ø–Ω–æ: {available} —à—Ç."
        text += f"\n–¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É: {product.price} T-Points"
        
        keyboard = CatalogKeyboard.get_quantity_selection_keyboard(
            product_id=product_id,
            current_quantity=1,
            available_quantity=available,
            size=size
        )
        
        await update_message(callback, text=text, reply_markup=keyboard)
        await safe_callback_answer(callback)
        
    except Exception as e:
        logger.error(f"Error showing quantity selection for user {callback.from_user.id}: {e}")
        await safe_callback_answer(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞")

@router.callback_query(F.data.startswith("cart:add:"))
async def handle_add_to_cart(
    callback: CallbackQuery, 
    catalog_service: CatalogService, 
    cart_service: CartService
):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ - —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è aiogram3-di"""
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ: cart:add:product_id:quantity:size
        parts = callback.data.split(":")
        product_id = int(parts[2])
        quantity = int(parts[3])
        size = parts[4] if len(parts) > 4 and parts[4] != "none" else None
        
        user_id = callback.from_user.id
        
        logger.info(f"User {user_id} adding to cart: product {product_id}, qty {quantity}, size {size}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –µ–≥–æ
        product = await catalog_service.get_product(product_id)
        if not product or not product.is_available:
            await safe_callback_answer(callback, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
            
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        is_valid, message = validate_product_availability(product, quantity, size)
        if not is_valid:
            await safe_callback_answer(callback, message)
            return
            
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        cart_item = await cart_service.add_item(
            user_id=user_id,
            product_id=product_id,
            quantity=quantity,
            size=size
        )
        
        if cart_item:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            text = format_success_add(product, quantity, size)
            keyboard = CatalogKeyboard.get_success_add_to_cart_keyboard(product_id)
            await update_message(callback, text=text, reply_markup=keyboard)
            await safe_callback_answer(callback, "‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")
        else:
            await safe_callback_answer(callback, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É")
            
    except Exception as e:
        logger.error(f"Error handling add to cart for user {callback.from_user.id}: {e}")
        await safe_callback_answer(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É")

@router.callback_query(F.data.startswith("product:adjust_quantity:"))
async def adjust_quantity(callback: CallbackQuery, catalog_service: CatalogService):
    """–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞"""
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ: product:adjust_quantity:product_id:size:new_quantity
        parts = callback.data.split(":")
        product_id = int(parts[2])
        size = parts[3] if parts[3] != "none" else None
        new_quantity = int(parts[4])
        
        logger.info(f"User {callback.from_user.id} adjusting quantity for product {product_id}, size: {size}, new_quantity: {new_quantity}")
        
        product = await catalog_service.get_product(product_id)
        if not product:
            await safe_callback_answer(callback, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        available = get_available_quantity(product, size)
        
        if size and product.is_clothing():
            text = f"üî¢ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è {product.name} (—Ä–∞–∑–º–µ—Ä {size}):\n"
        else:
            text = f"üî¢ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è {product.name}:\n"
            
        if available <= 0:
            await safe_callback_answer(callback, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
            
        text += f"\n–î–æ—Å—Ç—É–ø–Ω–æ: {available} —à—Ç."
        text += f"\n–¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É: {product.price} T-Points"
        text += f"\n–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {product.price * new_quantity} T-Points"
        
        keyboard = CatalogKeyboard.get_quantity_selection_keyboard(
            product_id=product_id,
            current_quantity=new_quantity,
            available_quantity=available,
            size=size
        )
        
        await update_message(callback, text=text, reply_markup=keyboard)
        await safe_callback_answer(callback)
        
    except Exception as e:
        logger.error(f"Error adjusting quantity for user {callback.from_user.id}: {e}")
        await safe_callback_answer(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞")

@router.callback_query(F.data.regexp(r"^product:\d+$"))
async def show_product(callback: CallbackQuery, catalog_service: CatalogService):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ"""
    try:
        product_id = int(callback.data.split(":")[1])
        
        logger.info(f"User {callback.from_user.id} viewing product {product_id}")
        
        product = await catalog_service.get_product(product_id)
        if not product:
            await safe_callback_answer(callback, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        products = await catalog_service.get_available_products()
        current_index = next((i for i, p in enumerate(products) if p.id == product_id), -1)
        
        prev_product = products[current_index - 1] if current_index > 0 else None
        next_product = products[current_index + 1] if current_index < len(products) - 1 else None
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞
        text = format_product_card(product)
        
        keyboard = CatalogKeyboard.get_product_keyboard(
            product=product,
            prev_product=prev_product,
            next_product=next_product
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å —Ñ–æ—Ç–æ –µ—Å–ª–∏ –µ—Å—Ç—å
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º message_editor –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞—Ä—Ç–∏–Ω–æ–∫
        if product.image_url:
            media = InputMediaPhoto(
                media=product.image_url,
                caption=text,
                parse_mode="HTML"
            )
            await update_message(callback, text=None, media=media, reply_markup=keyboard)
        else:
            await update_message(callback, text=text, reply_markup=keyboard)
            
        await safe_callback_answer(callback)
        
    except Exception as e:
        logger.error(f"Error showing product for user {callback.from_user.id}: {e}")
        await safe_callback_answer(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Ç–æ–≤–∞—Ä–∞")