"""
–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã.
–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–Ω–µ—Å–µ–Ω–∞ –≤ utils/cart_helpers.py
"""
from aiogram import Router, F
from aiogram.types import CallbackQuery
import logging

from ..utils.message_editor import update_message
from .keyboards.cart_kb import CartKeyboard
from ..services.cart import CartService
from ..services.user import UserService
from ..utils.callback_helpers import safe_callback_answer
from .utils.cart_helpers import (
    parse_cart_item_id,
    check_cart_item_access,
    format_cart_item_text,
    format_cart_summary_text,
    validate_item_quantity_change
)

logger = logging.getLogger(__name__)
router = Router(name="cart_handlers")



# =============================================================================
# –ù–ê–í–ò–ì–ê–¶–ò–Ø –í –ö–û–†–ó–ò–ù–£
# =============================================================================

@router.callback_query(F.data == "menu:cart")
async def show_cart_menu(callback: CallbackQuery, cart_service: CartService, user_service: UserService):
    """–ü–µ—Ä–µ—Ö–æ–¥ –≤ –∫–æ—Ä–∑–∏–Ω—É –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    try:
        logger.info(f"User {callback.from_user.id} opened cart")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–∞–ª–∞–Ω—Å–∞
        user = await user_service.get_user(callback.from_user.id)
        if not user:
            await safe_callback_answer(callback, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É —Å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–æ–π items
        cart = await cart_service.get_active_cart(callback.from_user.id, refresh=True)
            
        if not cart:
            text = f"üõí <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</b>\n\nüíé –í–∞—à –±–∞–ª–∞–Ω—Å: {user.tpoints:,} T-Points"
            keyboard = CartKeyboard.get_empty_cart_keyboard()
        else:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º items –≤ –∫–æ—Ä–∑–∏–Ω–µ
            try:
                cart_items = list(cart.items) if hasattr(cart, 'items') and cart.items else []
            except Exception:
                cart_items = []
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            text = format_cart_summary_text(cart_items, user.tpoints)
            
            if cart_items:
                keyboard = CartKeyboard.get_cart_keyboard(cart_items)
            else:
                keyboard = CartKeyboard.get_empty_cart_keyboard()
        
        await update_message(callback, text=text, reply_markup=keyboard)
        await safe_callback_answer(callback)
        
    except Exception as e:
        logger.error(f"Error showing cart: {e}", exc_info=True)
        await safe_callback_answer(callback, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ –∫–æ—Ä–∑–∏–Ω—É")

# =============================================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –¢–û–í–ê–†–û–í –í –ö–û–†–ó–ò–ù–ï
# =============================================================================

@router.callback_query(F.data.startswith("cart_item_"))
async def show_cart_item(
    callback: CallbackQuery, 
    cart_service: CartService,
    user_service: UserService
):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    try:
        cart_item_id = parse_cart_item_id(callback.data)
        if not cart_item_id:
            await safe_callback_answer(callback, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            return
        
        cart_item = await cart_service.get_cart_item_by_id(cart_item_id)
        if not check_cart_item_access(cart_item, callback.from_user.id):
            await safe_callback_answer(callback, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–∞–ª–∞–Ω—Å–∞
        user = await user_service.get_user(callback.from_user.id)
        if not user:
            await callback.message.edit_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        text = format_cart_item_text(cart_item)
        text += f"\nüíé –í–∞—à –±–∞–ª–∞–Ω—Å: {user.tpoints:,} T-Points"
        
        keyboard = CartKeyboard.get_cart_item_keyboard(cart_item)
        await update_message(callback, text=text, reply_markup=keyboard)
        await safe_callback_answer(callback)
        
    except Exception as e:
        logger.error(f"Unexpected error showing cart item for user {callback.from_user.id}: {e}")
        await safe_callback_answer(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Ç–æ–≤–∞—Ä–∞")

@router.callback_query(F.data.startswith("cart_remove_"))
async def remove_item(
    callback: CallbackQuery, 
    cart_service: CartService,
    user_service: UserService
):
    """–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"""
    try:
        cart_item_id = parse_cart_item_id(callback.data)
        if not cart_item_id:
            await safe_callback_answer(callback, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            return
        
        cart_item = await cart_service.get_cart_item_by_id(cart_item_id)
        if not check_cart_item_access(cart_item, callback.from_user.id):
            await safe_callback_answer(callback, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ")
            return
        
        # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä
        success = await cart_service.remove_item(
            user_id=callback.from_user.id,
            product_id=cart_item.product_id,
            size=cart_item.size
        )
        
        if success:
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ—Ä–∑–∏–Ω—É - —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await safe_callback_answer(callback, "‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∏–∑ –ë–î
            user = await user_service.get_user(callback.from_user.id)
            cart = await cart_service.get_active_cart(callback.from_user.id, refresh=True)
            
            if not cart or not cart.items:
                text = f"üõí <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</b>\n\nüíé –í–∞—à –±–∞–ª–∞–Ω—Å: {user.tpoints:,} T-Points"
                keyboard = CartKeyboard.get_empty_cart_keyboard()
            else:
                cart_items = list(cart.items)
                text = format_cart_summary_text(cart_items, user.tpoints)
                keyboard = CartKeyboard.get_cart_keyboard(cart_items)
            
            # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            await update_message(callback, text=text, reply_markup=keyboard)
        else:
            await safe_callback_answer(callback, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä")
            
    except Exception as e:
        logger.error(f"Unexpected error removing cart item for user {callback.from_user.id}: {e}")
        await safe_callback_answer(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞")

@router.callback_query(F.data.startswith("cart_plus_"))
async def increase_quantity(
    callback: CallbackQuery, 
    cart_service: CartService,
    user_service: UserService
):
    """–£–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    try:
        cart_item_id = parse_cart_item_id(callback.data)
        if not cart_item_id:
            await safe_callback_answer(callback, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            return
        
        cart_item = await cart_service.get_cart_item_by_id(cart_item_id)
        if not check_cart_item_access(cart_item, callback.from_user.id):
            await safe_callback_answer(callback, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ")
            return
        
        new_quantity = cart_item.quantity + 1
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        is_valid, message = validate_item_quantity_change(cart_item, new_quantity)
        if not is_valid:
            await safe_callback_answer(callback, message)
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        success = await cart_service.update_cart_item_quantity(
            user_id=callback.from_user.id,
            product_id=cart_item.product_id,
            size=cart_item.size,
            quantity=new_quantity
        )
        
        if success:
            await _update_cart_item_display(callback, cart_item_id, cart_service, user_service)
            await safe_callback_answer(callback, "‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–ª–∏—á–µ–Ω–æ")
        else:
            await safe_callback_answer(callback, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
            
    except Exception as e:
        logger.error(f"Unexpected error increasing quantity for user {callback.from_user.id}: {e}")
        await safe_callback_answer(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞")

@router.callback_query(F.data.startswith("cart_minus_"))
async def decrease_quantity(
    callback: CallbackQuery, 
    cart_service: CartService,
    user_service: UserService
):
    """–£–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    try:
        cart_item_id = parse_cart_item_id(callback.data)
        if not cart_item_id:
            await safe_callback_answer(callback, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            return
        
        cart_item = await cart_service.get_cart_item_by_id(cart_item_id)
        if not check_cart_item_access(cart_item, callback.from_user.id):
            await safe_callback_answer(callback, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ")
            return
        
        new_quantity = cart_item.quantity - 1
        
        if new_quantity <= 0:
            # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è 0, —É–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä
            await remove_item(callback, cart_service, user_service)
            return
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        is_valid, message = validate_item_quantity_change(cart_item, new_quantity)
        if not is_valid:
            await safe_callback_answer(callback, message)
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        success = await cart_service.update_cart_item_quantity(
            user_id=callback.from_user.id,
            product_id=cart_item.product_id,
            size=cart_item.size,
            quantity=new_quantity
        )
        
        if success:
            await _update_cart_item_display(callback, cart_item_id, cart_service, user_service)
            await safe_callback_answer(callback, "‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–º–µ–Ω—å—à–µ–Ω–æ")
        else:
            await safe_callback_answer(callback, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
            
    except Exception as e:
        logger.error(f"Unexpected error decreasing quantity for user {callback.from_user.id}: {e}")
        await safe_callback_answer(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞")

@router.callback_query(F.data.startswith("cart_size_"))
async def show_size_selection(
    callback: CallbackQuery, 
    cart_service: CartService
):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —Ä–∞–∑–º–µ—Ä–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    try:
        cart_item_id = parse_cart_item_id(callback.data)
        if not cart_item_id:
            await safe_callback_answer(callback, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            return
        
        cart_item = await cart_service.get_cart_item_by_id(cart_item_id)
        if not check_cart_item_access(cart_item, callback.from_user.id):
            await safe_callback_answer(callback, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ")
            return
        
        if not cart_item.product or not cart_item.product.is_clothing():
            await safe_callback_answer(callback, "‚ùå –î–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å —Ä–∞–∑–º–µ—Ä")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        text = f"üìè <b>–í—ã–±–æ—Ä —Ä–∞–∑–º–µ—Ä–∞</b>\n\n"
        text += f"üõí –¢–æ–≤–∞—Ä: {cart_item.product.name}\n"
        text += f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {cart_item.quantity} —à—Ç.\n"
        if cart_item.size:
            text += f"üìè –¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä: {cart_item.size}\n\n"
        else:
            text += f"üìè –†–∞–∑–º–µ—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω\n\n"
        
        text += f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä:"
        
        keyboard = CartKeyboard.get_cart_size_keyboard(cart_item)
        await update_message(callback, text=text, reply_markup=keyboard)
        await safe_callback_answer(callback)
        
    except Exception as e:
        logger.error(f"Unexpected error showing size selection for user {callback.from_user.id}: {e}")
        await safe_callback_answer(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–∞–∑–º–µ—Ä–∞")

@router.callback_query(F.data.startswith("cart_setsize_"))
async def set_cart_item_size(
    callback: CallbackQuery, 
    cart_service: CartService,
    user_service: UserService
):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–∑–º–µ—Ä –¥–ª—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
        try:
            parts = callback.data.split("_")
            if len(parts) < 4:
                raise ValueError("Invalid callback data format")
            cart_item_id = int(parts[2])
            encoded_size = parts[3]
            new_size = CartKeyboard._decode_size(encoded_size)
        except (ValueError, IndexError) as e:
            logger.error(f"Invalid callback data: {callback.data}, error: {e}")
            await safe_callback_answer(callback, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            return
        
        cart_item = await cart_service.get_cart_item_by_id(cart_item_id)
        if not check_cart_item_access(cart_item, callback.from_user.id):
            await safe_callback_answer(callback, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞–∑–º–µ—Ä –Ω–µ —Ç–æ—Ç –∂–µ —Å–∞–º—ã–π
        if cart_item.size == new_size:
            await safe_callback_answer(callback, "‚úÖ –†–∞–∑–º–µ—Ä —É–∂–µ –≤—ã–±—Ä–∞–Ω")
            await _update_cart_item_display(callback, cart_item_id, cart_service, user_service)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –Ω–æ–≤–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        if new_size:
            available_qty = cart_item.product.sizes_dict.get(new_size, 0)
            if available_qty < cart_item.quantity:
                await safe_callback_answer(callback, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ {new_size} (–¥–æ—Å—Ç—É–ø–Ω–æ: {available_qty})")
                return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä
        success = await cart_service.update_cart_item_size(
            user_id=callback.from_user.id,
            product_id=cart_item.product_id,
            old_size=cart_item.size,
            new_size=new_size
        )
        
        if success:
            await _update_cart_item_display(callback, cart_item_id, cart_service, user_service)
            await safe_callback_answer(callback, f"‚úÖ –†–∞–∑–º–µ—Ä –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_size}")
        else:
            await safe_callback_answer(callback, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä")
            
    except Exception as e:
        logger.error(f"Unexpected error setting cart item size for user {callback.from_user.id}: {e}")
        await safe_callback_answer(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞")

@router.callback_query(F.data == "cart:clear")
async def clear_cart(
    callback: CallbackQuery, 
    cart_service: CartService,
    user_service: UserService
):
    """–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É"""
    try:
        logger.info(f"User {callback.from_user.id} clearing cart")
        
        success = await cart_service.clear_cart(callback.from_user.id)
        
        if success:
            await safe_callback_answer(callback, "‚úÖ –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞")
            await show_cart_menu(callback, cart_service, user_service)
        else:
            await safe_callback_answer(callback, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É")
            
    except Exception as e:
        logger.error(f"Error clearing cart for user {callback.from_user.id}: {e}")
        await safe_callback_answer(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–∑–∏–Ω—ã")

# =============================================================================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò  
# =============================================================================

async def _update_cart_item_display(
    callback: CallbackQuery, 
    cart_item_id: int,
    cart_service: CartService,
    user_service: UserService
):
    """–û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    cart_item = await cart_service.get_cart_item_by_id(cart_item_id)
    if not cart_item or not cart_item.product:
        await show_cart_menu(callback, cart_service, user_service)
        return
    
    user = await user_service.get_user(callback.from_user.id)
    if not user:
        await callback.message.edit_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    text = format_cart_item_text(cart_item)
    text += f"\nüíé –í–∞—à –±–∞–ª–∞–Ω—Å: {user.tpoints:,} T-Points"
    
    keyboard = CartKeyboard.get_cart_item_keyboard(cart_item)
    await update_message(callback, text=text, reply_markup=keyboard)