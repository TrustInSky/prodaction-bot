"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.
–û—Ç–¥–µ–ª–µ–Ω—ã –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã –¥–ª—è –ª—É—á—à–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–¥–∞.
"""
import logging
from decimal import Decimal
from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext

from ..utils.message_editor import update_message
from ..utils.callback_helpers import safe_callback_answer
from app.catalog.keyboards.cart_kb import CartKeyboard
from ..services.cart import CartService
from ..services.user import UserService
from ..services.order import OrderService
from ..services.transaction_service import TransactionService
from app.services.notifications.order_notifications import OrderNotificationService
from .states import CartStates

logger = logging.getLogger(__name__)
router = Router()

@router.callback_query(F.data == "cart:start_checkout")
async def handle_start_checkout(
    callback: CallbackQuery, 
    cart_service: CartService,
    user_service: UserService,
    state: FSMContext
):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    try:
        logger.info(f"User {callback.from_user.id} starting checkout")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cart = await cart_service.get_active_cart(callback.from_user.id)
        user = await user_service.get_user(callback.from_user.id)
        
        # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        if not user:
            await safe_callback_answer(callback, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        if not cart or not cart.items:
            await safe_callback_answer(callback, "‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
            return
        
        # –ü–æ–ª–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ—Ä–∑–∏–Ω—ã —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        is_valid, validation_errors = await cart_service.validate_cart_for_checkout(callback.from_user.id)
        
        if not is_valid:
            error_text = "‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑:\n\n" + "\n".join(validation_errors)
            await safe_callback_answer(callback, error_text, show_alert=True)
            return
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
        total_price = Decimal('0')
        for item in cart.items:
            if item.product:
                item_total = Decimal(str(item.quantity)) * Decimal(str(item.product.price))
                total_price += item_total
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        user_balance = Decimal(str(user.tpoints))
        if user_balance < total_price:
            await safe_callback_answer(
                callback,
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ T-points\n–¢—Ä–µ–±—É–µ—Ç—Å—è: {total_price}\n–î–æ—Å—Ç—É–ø–Ω–æ: {user_balance}",
                show_alert=True
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(CartStates.confirming_order)
        await state.update_data(
            cart_id=cart.id,
            total_price=float(total_price)
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        text = _format_checkout_confirmation_text(cart, user_balance, total_price)
        
        await update_message(
            callback,
            text,
            reply_markup=CartKeyboard.get_checkout_confirmation_keyboard(float(total_price))
        )
        await safe_callback_answer(callback)
        
    except Exception as e:
        logger.error(f"Unexpected error starting checkout for user {callback.from_user.id}: {e}")
        await safe_callback_answer(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")

@router.callback_query(CartStates.confirming_order, F.data == "cart:checkout")
async def handle_checkout(
    callback: CallbackQuery, 
    cart_service: CartService,
    user_service: UserService,
    order_service: OrderService,
    transaction_service: TransactionService,
    notification_service: OrderNotificationService,
    state: FSMContext
):
    """–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    try:
        logger.info(f"User {callback.from_user.id} confirming checkout")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state_data = await state.get_data()
        cart_id = state_data.get('cart_id')
        expected_total = Decimal(str(state_data.get('total_price', 0)))
        
        if not cart_id:
            await safe_callback_answer(callback, "‚ùå –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            await state.clear()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        cart = await cart_service.get_cart_by_id(cart_id)
        user = await user_service.get_user(callback.from_user.id)
        
        if not cart or not user:
            await safe_callback_answer(callback, "‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            await state.clear()
            return

        # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è (–º–æ–≥–ª–æ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è)
        is_valid, validation_errors = await cart_service.validate_cart_for_checkout(callback.from_user.id)
        if not is_valid:
            error_text = "‚ùå –ó–∞–∫–∞–∑ –±–æ–ª—å—à–µ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω:\n\n" + "\n".join(validation_errors)
            await safe_callback_answer(callback, error_text, show_alert=True)
            await state.clear()
            return

        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
        actual_total = _calculate_cart_total(cart)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –ª–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å
        if abs(actual_total - expected_total) > Decimal('0.01'):
            await safe_callback_answer(
                callback,
                f"‚ùå –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å\n–ë—ã–ª–æ: {expected_total}\n–°—Ç–∞–ª–æ: {actual_total}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ",
                show_alert=True
            )
            await state.clear()
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        if user.tpoints < float(actual_total):
            await safe_callback_answer(
                callback,
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ T-points\n–¢—Ä–µ–±—É–µ—Ç—Å—è: {actual_total}\n–î–æ—Å—Ç—É–ø–Ω–æ: {user.tpoints}",
                show_alert=True
            )
            await state.clear()
            return
        
        # –û—Ñ–æ—Ä–º–ª—è–µ–º –∑–∞–∫–∞–∑
        try:
            order = await order_service.create_order_from_cart(
                cart_id=cart_id,
                user_id=callback.from_user.id
            )
            
            if order:
                # –°–ø–∏—Å—ã–≤–∞–µ–º T-points
                from ..core.constants import TransactionType
                transaction = await transaction_service.create_transaction(
                    user_id=callback.from_user.id,
                    amount=-float(actual_total),
                    transaction_type=TransactionType.PURCHASE,
                    description=f"–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ #{order.id}",
                    order_id=order.id
                )
                
                # –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                
                # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É (–≤ OrderService –∫–æ—Ä–∑–∏–Ω–∞ –ù–ï –æ—á–∏—â–∞–µ—Ç—Å—è)
                await cart_service.clear_cart(callback.from_user.id)
                
                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è HR —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å –≤ OrderService
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
                success_text = _format_order_success_text(order, transaction)
                
                await update_message(
                    callback,
                    success_text,
                    reply_markup=CartKeyboard.get_order_success_keyboard()
                )
                
                await safe_callback_answer(callback, "‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!")
                logger.info(f"Order {order.id} created successfully for user {callback.from_user.id}")
                
            else:
                await safe_callback_answer(callback, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑")
                
        except Exception as e:
            logger.error(f"Error creating order for user {callback.from_user.id}: {e}")
            await safe_callback_answer(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"Unexpected error during checkout for user {callback.from_user.id}: {e}")
        await safe_callback_answer(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")
        await state.clear()

@router.callback_query(CartStates.confirming_order, F.data == "cart:cancel_checkout")
async def cancel_checkout(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    await state.clear()
    await safe_callback_answer(callback, "‚ùå –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∫–æ—Ä–∑–∏–Ω–µ
    from .cart import show_cart_menu
    from ..repositories.cart_repository import CartService
    from ..repositories.user_repository import UserService
    
    # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã —á–µ—Ä–µ–∑ DI
    # –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
    await callback.message.edit_text(
        "üõí –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∫–æ—Ä–∑–∏–Ω–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é.",
        reply_markup=CartKeyboard.get_back_to_cart_keyboard()
    )

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

def _calculate_cart_total(cart) -> Decimal:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ—Ä–∑–∏–Ω—ã"""
    total = Decimal('0')
    for item in cart.items:
        if item.product:
            item_total = Decimal(str(item.quantity)) * Decimal(str(item.product.price))
            total += item_total
    return total

def _format_checkout_confirmation_text(cart, user_balance: Decimal, total_price: Decimal) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    items_text = []
    for item in cart.items:
        if not item.product:
            continue
        item_text = f"‚Ä¢ {item.product.name}"
        if item.size:
            item_text += f" (—Ä–∞–∑–º–µ—Ä: {item.size})"
        item_total = item.quantity * item.product.price
        item_text += f" - {item.quantity} —à—Ç. √ó {item.product.price} = {item_total} T-points"
        items_text.append(item_text)
    
    remaining_balance = user_balance - total_price
    
    return (
        f"üõí –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞\n\n"
        f"–¢–æ–≤–∞—Ä—ã:\n" + "\n".join(items_text) + f"\n\n"
        f"üí∞ –ò—Ç–æ–≥–æ: {total_price} T-points\n"
        f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: {user_balance} T-points\n"
        f"üí≥ –û—Å—Ç–∞–Ω–µ—Ç—Å—è: {remaining_balance} T-points\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞:"
    )

def _format_order_success_text(order, transaction) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
    return (
        f"‚úÖ <b>–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!</b>\n\n"
        f"üìã –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #{order.id}\n"
        f"üí∞ –°—É–º–º–∞: {abs(transaction.points_amount)} T-points\n"
        f"üìÖ –î–∞—Ç–∞: {order.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
        f"üöÄ –ó–∞–∫–∞–∑ –ø–µ—Ä–µ–¥–∞–Ω –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É.\n"
        f"–û —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–∞ –º—ã —Å–æ–æ–±—â–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ."
    ) 