from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from typing import List, Dict, Optional, Union, Any
from ...models.models import Product, CartItem

# –≠–º–æ–¥–∑–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
EMOJI = {
    "cart": "üõí",
    "back": "‚Ü©Ô∏è",
    "next": "‚ñ∂Ô∏è",
    "confirm": "‚úÖ",
    "catalog": "üõç",
    "home": "üè†",
    "delete": "üóë",
    "minus": "‚ûñ",
    "plus": "‚ûï",
    "package": "üì¶",
    "size": "üìè",
    "money": "üí∞",
    "order": "ÔøΩÔøΩ",
    "clear": "üßπ",
    "settings": "‚öôÔ∏è",
    "success": "‚úÖ",
    "cancel": "‚ùå",
    "upload": "üì§",
    "download": "üì•",
    "link": "üîó",
    "orders": "üì¶",
    "questions": "‚ùì",
    "users": "üë•",
    "tpoints": "üíé"
}

class KeyboardBuilder:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
    
    @staticmethod
    def create_button(text: str, callback_data: str) -> InlineKeyboardButton:
        """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º –∏ callback_data"""
        return InlineKeyboardButton(text=text, callback_data=callback_data)
    
    @staticmethod
    def create_nav_row(
        *buttons: Union[str, Dict[str, str]],
        include_cart: bool = True,
        include_catalog: bool = True,
        include_main: bool = True
    ) -> List[InlineKeyboardButton]:
        """–°–æ–∑–¥–∞–µ—Ç —Ä—è–¥ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫"""
        nav_row = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        for button in buttons:
            if isinstance(button, str):
                nav_row.append(InlineKeyboardButton(
                    text=button,
                    callback_data="ignore"
                ))
            else:
                nav_row.append(InlineKeyboardButton(
                    text=button["text"],
                    callback_data=button["callback_data"]
                ))
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        if include_cart:
            nav_row.append(InlineKeyboardButton(
                text=f"{EMOJI['cart']} –ö–æ—Ä–∑–∏–Ω–∞",
                callback_data="menu:cart"
            ))
        
        if include_catalog:
            nav_row.append(InlineKeyboardButton(
                text=f"{EMOJI['catalog']} –ö–∞—Ç–∞–ª–æ–≥",
                callback_data="menu:catalog"
            ))
        
        if include_main:
            nav_row.append(InlineKeyboardButton(
                text=f"{EMOJI['home']} –ú–µ–Ω—é",
                callback_data="menu:main"
            ))
        
        return nav_row
    
    @staticmethod
    def create_quantity_row(
        entity_id: int,
        current_quantity: int,
        available_quantity: int,
        size: Optional[str] = None,
        prefix: str = "cart"
    ) -> List[InlineKeyboardButton]:
        """–°–æ–∑–¥–∞–µ—Ç —Ä—è–¥ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º"""
        quantity_row = []
        
        # –ö–Ω–æ–ø–∫–∞ —É–º–µ–Ω—å—à–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        if current_quantity > 1:
            quantity_row.append(InlineKeyboardButton(
                text=EMOJI["minus"],
                callback_data=f"{prefix}:quantity:{entity_id}:minus:{size or 'none'}"
            ))
        
        # –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        quantity_row.append(InlineKeyboardButton(
            text=f"{current_quantity} —à—Ç.",
            callback_data="ignore"
        ))
        
        # –ö–Ω–æ–ø–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        if current_quantity < available_quantity:
            quantity_row.append(InlineKeyboardButton(
                text=EMOJI["plus"],
                callback_data=f"{prefix}:quantity:{entity_id}:plus:{size or 'none'}"
            ))
        
        return quantity_row
    
    @staticmethod
    def create_size_rows(
        product: Product,
        current_size: Optional[str] = None,
        prefix: str = "product"
    ) -> List[List[InlineKeyboardButton]]:
        """–°–æ–∑–¥–∞–µ—Ç —Ä—è–¥—ã –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞"""
        size_rows = []
        current_row = []
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
        sizes = [(size, quantity) for size, quantity in product.sizes_dict.items() if quantity > 0 or size == current_size]
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã –ø–æ 3 –≤ —Ä—è–¥
        for size, quantity in sizes:
            text = size
            if size == current_size:
                text = f"{EMOJI['confirm']}{text}"
            if quantity > 0:
                text += f" ({quantity})"
                
            current_row.append(InlineKeyboardButton(
                text=text,
                callback_data=f"{prefix}:size:{product.id}:{size}"
            ))
            
            if len(current_row) == 3:
                size_rows.append(current_row)
                current_row = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Ä–∞–∑–º–µ—Ä—ã
        if current_row:
            size_rows.append(current_row)
        
        return size_rows
    
    @staticmethod
    def create_action_row(*actions: Dict[str, str]) -> List[InlineKeyboardButton]:
        """–°–æ–∑–¥–∞–µ—Ç —Ä—è–¥ –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π"""
        return [InlineKeyboardButton(
            text=action["text"],
            callback_data=action["callback_data"]
        ) for action in actions]
    
    @staticmethod
    def format_product_info(
        product: Product,
        size: Optional[str] = None,
        quantity: Optional[int] = None,
        include_stock: bool = True
    ) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ"""
        text = product.name
        
        if product.color:
            text += f" ({product.color})"
        
        if size:
            text += f" ‚Ä¢ {EMOJI['size']}{size}"
            
        text += f" ‚Ä¢ {EMOJI['money']}{product.price}"
        
        if quantity:
            text += f" √ó {quantity} = {product.price * quantity}"
            
        if include_stock:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ total_stock
            text += f" {EMOJI['package']}{product.total_stock}"
        
        return text 