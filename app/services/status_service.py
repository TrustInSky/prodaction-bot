"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –∑–∞–∫–∞–∑–æ–≤ –∏ —Ç–∏–ø–∞–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞–º–∏ —á–µ—Ä–µ–∑ –ë–î
"""

from typing import List, Optional, Dict, Tuple
from sqlalchemy.ext.asyncio import AsyncSession
import logging

from ..models.models import OrderStatus, NotificationType, StatusTransition
from ..repositories.status_repository import StatusRepository
from ..core.base import BaseService

logger = logging.getLogger(__name__)


class StatusService(BaseService):
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –∑–∞–∫–∞–∑–æ–≤"""
    
    def __init__(self, session: AsyncSession):
        super().__init__(session)
        self.status_repo = StatusRepository(session)
    
    async def get_status_by_code(self, code: str) -> Optional[OrderStatus]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ –∫–æ–¥—É"""
        return await self.status_repo.get_status_by_code(code)
    
    async def get_statuses_by_codes(self, codes: List[str]) -> List[OrderStatus]:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ —Å–ø–∏—Å–∫—É –∫–æ–¥–æ–≤"""
        return await self.status_repo.get_statuses_by_codes(codes)
    
    async def get_all_active_statuses(self) -> List[OrderStatus]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã"""
        return await self.status_repo.get_all_active_statuses()
    
    async def get_notification_type_by_code(self, code: str) -> Optional[NotificationType]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –∫–æ–¥—É"""
        return await self.status_repo.get_notification_type_by_code(code)
    
    async def get_notification_for_transition(self, from_status_code: str, to_status_code: str) -> Optional[NotificationType]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –º–µ–∂–¥—É —Å—Ç–∞—Ç—É—Å–∞–º–∏"""
        try:
            from_status = await self.status_repo.get_status_by_code(from_status_code)
            to_status = await self.status_repo.get_status_by_code(to_status_code)
            
            if not to_status:
                return None
            
            from_status_id = from_status.id if from_status else None
            transition = await self.status_repo.get_status_transition(from_status_id, to_status.id)
            
            return transition.notification_type if transition else None
            
        except Exception as e:
            logger.error(f"Error getting notification for transition {from_status_code} -> {to_status_code}: {e}")
            return None
    
    async def create_status(self, code: str, name: str, emoji: str = None, 
                           description: str = None, comment_user: str = None, 
                           comment_hr: str = None, order_index: int = 0) -> Optional[OrderStatus]:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å"""
        status_data = {
            'code': code,
            'name': name,
            'emoji': emoji,
            'description': description,
            'comment_user': comment_user,
            'comment_hr': comment_hr,
            'order_index': order_index
        }
        return await self.status_repo.create_status(status_data)
    
    async def create_notification_type(self, code: str, name: str, description: str = None) -> Optional[NotificationType]:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        notification_data = {
            'code': code,
            'name': name,
            'description': description
        }
        return await self.status_repo.create_notification_type(notification_data)
    
    async def create_status_transition(self, from_status_code: str, to_status_code: str, 
                                     notification_type_code: str) -> Optional[StatusTransition]:
        """–°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–µ—Ö–æ–¥ –º–µ–∂–¥—É —Å—Ç–∞—Ç—É—Å–∞–º–∏"""
        try:
            from_status = await self.status_repo.get_status_by_code(from_status_code) if from_status_code else None
            to_status = await self.status_repo.get_status_by_code(to_status_code)
            notification_type = await self.status_repo.get_notification_type_by_code(notification_type_code)
            
            if not to_status or not notification_type:
                logger.error(f"Status or notification type not found")
                return None
            
            transition_data = {
                'from_status_id': from_status.id if from_status else None,
                'to_status_id': to_status.id,
                'notification_type_id': notification_type.id
            }
            return await self.status_repo.create_status_transition(transition_data)
        except Exception as e:
            logger.error(f"Error creating status transition: {e}")
            return None
    
    async def get_status_display_mapping(self) -> Dict[str, str]:
        """–ü–æ–ª—É—á–∏—Ç—å –º–∞–ø–ø–∏–Ω–≥ –∫–æ–¥–æ–≤ —Å—Ç–∞—Ç—É—Å–æ–≤ –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è"""
        try:
            statuses = await self.status_repo.get_all_active_statuses()
            return {status.code: status.display_name for status in statuses}
        except Exception as e:
            logger.error(f"Error getting status display mapping: {e}")
            return {}
    
    async def get_status_comments_mapping(self) -> Dict[str, Tuple[str, str]]:
        """–ü–æ–ª—É—á–∏—Ç—å –º–∞–ø–ø–∏–Ω–≥ –∫–æ–¥–æ–≤ —Å—Ç–∞—Ç—É—Å–æ–≤ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (user, hr)"""
        try:
            statuses = await self.status_repo.get_all_active_statuses()
            return {
                status.code: (status.comment_user or "", status.comment_hr or "") 
                for status in statuses
            }
        except Exception as e:
            logger.error(f"Error getting status comments mapping: {e}")
            return {}
    
    async def initialize_default_statuses(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –∏ —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã
            statuses_data = [
                {
                    'code': 'new',
                    'name': '–ù–æ–≤—ã–π',
                    'emoji': 'üÜï',
                    'description': '–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏',
                    'comment_user': '–í–∞—à –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ HR-–º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.',
                    'comment_hr': '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                    'order_index': 1
                },
                {
                    'code': 'processing',
                    'name': '–í —Ä–∞–±–æ—Ç–µ',
                    'emoji': '‚ö°',
                    'description': '–ó–∞–∫–∞–∑ –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É HR-–º–µ–Ω–µ–¥–∂–µ—Ä–æ–º',
                    'comment_user': '–í–∞—à –∑–∞–∫–∞–∑ –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É. –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ.',
                    'comment_hr': '–ó–∞–∫–∞–∑ –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É',
                    'order_index': 2
                },
                {
                    'code': 'ready_for_pickup',
                    'name': '–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ',
                    'emoji': 'üì¶',
                    'description': '–ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ',
                    'comment_user': '–í–∞—à –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ HR-–º–µ–Ω–µ–¥–∂–µ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.',
                    'comment_hr': '–ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é',
                    'order_index': 3
                },
                {
                    'code': 'delivered',
                    'name': '–í—ã–ø–æ–ª–Ω–µ–Ω',
                    'emoji': '‚úÖ',
                    'description': '–ó–∞–∫–∞–∑ –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é',
                    'comment_user': '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑!',
                    'comment_hr': '–ó–∞–∫–∞–∑ –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é',
                    'order_index': 4
                },
                {
                    'code': 'cancelled',
                    'name': '–û—Ç–º–µ–Ω–µ–Ω',
                    'emoji': '‚ùå',
                    'description': '–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω',
                    'comment_user': '–í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω. T-points –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.',
                    'comment_hr': '–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω. T-points –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã, —Ç–æ–≤–∞—Ä—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ —Å–∫–ª–∞–¥',
                    'order_index': 5
                }
            ]
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            notifications_data = [
                {
                    'code': 'order_created',
                    'name': '–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω',
                    'description': '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞'
                },
                {
                    'code': 'order_taken',
                    'name': '–ó–∞–∫–∞–∑ –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É',
                    'description': '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–∑—è—Ç–∏–∏ –∑–∞–∫–∞–∑–∞ –≤ —Ä–∞–±–æ—Ç—É'
                },
                {
                    'code': 'order_ready',
                    'name': '–ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ',
                    'description': '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞ –∫ –≤—ã–¥–∞—á–µ'
                },
                {
                    'code': 'order_completed',
                    'name': '–ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω',
                    'description': '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞'
                },
                {
                    'code': 'order_cancelled',
                    'name': '–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω',
                    'description': '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞'
                },
                {
                    'code': 'order_cancelled_by_user',
                    'name': '–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º',
                    'description': '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'
                }
            ]
            
            await self.status_repo.bulk_create_statuses(statuses_data)
            await self.status_repo.bulk_create_notification_types(notifications_data)
            
            # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É —Å—Ç–∞—Ç—É—Å–∞–º–∏
            await self._create_status_transitions()
            
            return True
        except Exception as e:
            logger.error(f"Error initializing default statuses: {e}")
            return False
    
    async def _create_status_transitions(self) -> bool:
        """–°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É —Å—Ç–∞—Ç—É—Å–∞–º–∏ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ç—É—Å—ã –∏ —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            new_status = await self.status_repo.get_status_by_code('new')
            processing_status = await self.status_repo.get_status_by_code('processing')
            ready_status = await self.status_repo.get_status_by_code('ready_for_pickup')
            delivered_status = await self.status_repo.get_status_by_code('delivered')
            cancelled_status = await self.status_repo.get_status_by_code('cancelled')
            
            order_created_nt = await self.status_repo.get_notification_type_by_code('order_created')
            order_taken_nt = await self.status_repo.get_notification_type_by_code('order_taken')
            order_ready_nt = await self.status_repo.get_notification_type_by_code('order_ready')
            order_completed_nt = await self.status_repo.get_notification_type_by_code('order_completed')
            order_cancelled_nt = await self.status_repo.get_notification_type_by_code('order_cancelled')
            order_cancelled_by_user_nt = await self.status_repo.get_notification_type_by_code('order_cancelled_by_user')
            
            # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥—ã
            transitions_data = []
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ (–ª—é–±–æ–π —Å—Ç–∞—Ç—É—Å -> new)
            if new_status and order_created_nt:
                transitions_data.append({
                    'from_status_id': None,  # –õ—é–±–æ–π —Å—Ç–∞—Ç—É—Å (—Å–æ–∑–¥–∞–Ω–∏–µ —Å –Ω—É–ª—è)
                    'to_status_id': new_status.id,
                    'notification_type_id': order_created_nt.id
                })
            
            # –í–∑—è—Ç–∏–µ –≤ —Ä–∞–±–æ—Ç—É (new -> processing)
            if new_status and processing_status and order_taken_nt:
                transitions_data.append({
                    'from_status_id': new_status.id,
                    'to_status_id': processing_status.id,
                    'notification_type_id': order_taken_nt.id
                })
            
            # –ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ (processing -> ready_for_pickup)
            if processing_status and ready_status and order_ready_nt:
                transitions_data.append({
                    'from_status_id': processing_status.id,
                    'to_status_id': ready_status.id,
                    'notification_type_id': order_ready_nt.id
                })
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω (ready_for_pickup -> delivered)
            if ready_status and delivered_status and order_completed_nt:
                transitions_data.append({
                    'from_status_id': ready_status.id,
                    'to_status_id': delivered_status.id,
                    'notification_type_id': order_completed_nt.id
                })
            
            # –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ (–ª—é–±–æ–π —Å—Ç–∞—Ç—É—Å -> cancelled)
            if cancelled_status and order_cancelled_nt:
                transitions_data.append({
                    'from_status_id': None,  # –ò–∑ –ª—é–±–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
                    'to_status_id': cancelled_status.id,
                    'notification_type_id': order_cancelled_nt.id
                })
            
            # –û—Ç–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–æ—Ç–¥–µ–ª—å–Ω—ã–π —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)
            if cancelled_status and order_cancelled_by_user_nt:
                transitions_data.append({
                    'from_status_id': new_status.id,  # –¢–æ–ª—å–∫–æ –∏–∑ —Å—Ç–∞—Ç—É—Å–∞ "–Ω–æ–≤—ã–π"
                    'to_status_id': cancelled_status.id,
                    'notification_type_id': order_cancelled_by_user_nt.id
                })
            
            if transitions_data:
                await self.status_repo.bulk_create_transitions(transitions_data)
            
            return True
        except Exception as e:
            logger.error(f"Error creating status transitions: {e}")
            return False 