from typing import List
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from .base_notification_service import BaseNotificationService
from ...models.models import Question, User
import logging

logger = logging.getLogger(__name__)

class QuestionNotificationService(BaseNotificationService):
    """–°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –≤–æ–ø—Ä–æ—Å–∞—Ö"""
    
    async def notify_hr_about_new_question(self, question: Question, user: User) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ HR –æ –Ω–æ–≤–æ–º –≤–æ–ø—Ä–æ—Å–µ
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º HR –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            hr_users = await self._get_hr_users()
            
            if not hr_users:
                logger.warning("No HR users found for question notification")
                return False
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∞–Ω–æ–Ω–∏–º–Ω—ã–π —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–±–µ–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
            text = (
                f"‚ùì <b>–ù–æ–≤—ã–π –∞–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å #{question.id}</b>\n\n"
                f"üìÖ –î–∞—Ç–∞: {question.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
                f"üí¨ <b>–í–æ–ø—Ä–æ—Å:</b>\n"
                f"<i>{question.message}</i>"
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–ø—Ä–æ—Å",
                        callback_data=f"question_view:{question.id}"
                    ),
                    InlineKeyboardButton(
                        text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
                        callback_data=f"question_skip:{question.id}"
                    )
                ]
            ])
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º HR
            results = await self._send_message_to_users(hr_users, text, keyboard)
            
            success_count = sum(1 for success in results.values() if success)
            logger.info(f"Question {question.id} notification sent to {success_count}/{len(hr_users)} HR users")
            
            return success_count > 0
            
        except Exception as e:
            logger.error(f"Error sending question notification for question {question.id}: {e}")
            return False
    
    async def notify_user_about_answer(self, question: Question, answer, hr_user: User) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—Ç–≤–µ—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å
        """
        try:
            if not question.user_id:
                logger.warning(f"Question {question.id} has no user_id for answer notification")
                return False
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            hr_mention = self._format_user_mention(
                hr_user.telegram_id,
                hr_user.username,
                hr_user.fullname
            )
            
            text = (
                f"‚úÖ <b>–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å #{question.id}</b>\n\n"
                f"üë§ –û—Ç–≤–µ—Ç–∏–ª: {hr_mention}\n"
                f"üìÖ –î–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞: {answer.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
                f"üí¨ <b>–í–∞—à –≤–æ–ø—Ä–æ—Å:</b>\n"
                f"<i>{question.message[:200]}{'...' if len(question.message) > 200 else ''}</i>\n\n"
                f"üìù <b>–û—Ç–≤–µ—Ç HR:</b>\n"
                f"<i>{answer.message}</i>"
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üìã –ú–æ–∏ –≤–æ–ø—Ä–æ—Å—ã",
                        callback_data="questions:my_questions"
                    ),
                    InlineKeyboardButton(
                        text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                        callback_data="menu:main"
                    )
                ]
            ])
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            results = await self._send_message_to_users([question.user_id], text, keyboard)
            
            success = results.get(question.user_id, False)
            if success:
                logger.info(f"Answer notification sent to user {question.user_id} for question {question.id}")
            else:
                logger.error(f"Failed to send answer notification to user {question.user_id}")
            
            return success
            
        except Exception as e:
            logger.error(f"Error sending answer notification for question {question.id}: {e}")
            return False
    
    async def send_notification(self, notification_type: str = "question", **kwargs) -> bool:
        """
        –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –≤–æ–ø—Ä–æ—Å–∞—Ö
        """
        try:
            if notification_type == "new_question":
                question = kwargs.get("question")
                user = kwargs.get("user")
                if question and user:
                    return await self.notify_hr_about_new_question(question, user)
                    
            elif notification_type == "answer":
                question = kwargs.get("question")
                answer = kwargs.get("answer")
                hr_user = kwargs.get("hr_user")
                if question and answer and hr_user:
                    return await self.notify_user_about_answer(question, answer, hr_user)
            
            logger.warning(f"Unknown notification type: {notification_type}")
            return False
            
        except Exception as e:
            logger.error(f"Error in send_notification: {e}")
            return False 