from typing import Optional, List
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from .base_notification_service import BaseNotificationService
from ...models.models import Order, User
import logging

logger = logging.getLogger(__name__)

class OrderNotificationService(BaseNotificationService):
    """–°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–∫–∞–∑–∞—Ö"""
    
    async def send_order_created_notification(self, order: Order, user: User, hr_users: List[int] = None) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –≤—Å–µ–º HR
        –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ—á–µ—Ä–µ–¥—å
        """
        try:
            from ...middlewares.database import add_pending_notification
            
            notification_data = {
                'order_id': order.id,
                'user_id': user.telegram_id,
                'order_total': float(order.total_cost)
            }
            
            add_pending_notification('order_created', notification_data)
            logger.info(f"Order {order.id} notification added to pending queue")
            
            return True
            
        except Exception as e:
            logger.error(f"Error preparing order created notification for order {order.id}: {e}")
            return False
    
    async def send_pending_order_created_notification(self, order_repo, user_repo, order_id: int, user_id: int) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ middleware)
        –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
        """
        try:
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
            order = await order_repo.get_order_by_id(order_id)
            if not order:
                logger.error(f"Order {order_id} not found for notification")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∑–∞–∫–∞–∑–∞ –æ—Ç–¥–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
            order_items = await order_repo.get_order_items(order_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await user_repo.get_user_by_telegram_id(user_id)
            if not user:
                logger.error(f"User {user_id} not found for notification")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ HR –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            hr_users = await user_repo.get_all_hr_and_admin_users()
            hr_user_ids = [hr_user.telegram_id for hr_user in hr_users]
            
            if not hr_user_ids:
                logger.warning("No HR users found for order notification")
                return False
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            return await self._send_order_created_notification_actual(order, user, hr_user_ids, order_items)
            
        except Exception as e:
            logger.error(f"Error sending pending order notification for order {order_id}: {e}")
            return False
    
    async def _send_order_created_notification_actual(self, order, user, hr_user_ids: List[int], order_items=None) -> bool:
        """
        –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
        """
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–ª–Ω—ã–º –∏–º–µ–Ω–µ–º –∏ username
            if user.username:
                user_mention = f'<a href="tg://user?id={user.telegram_id}">{user.fullname}</a> (@{user.username})'
            else:
                user_mention = f'<a href="tg://user?id={user.telegram_id}">{user.fullname}</a>'
            
            text = (
                f"üÜï <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order.id}</b>\n\n"
                f"üë§ –ó–∞–∫–∞–∑—á–∏–∫: {user_mention}\n"
                f"üè¢ –û—Ç–¥–µ–ª: {user.department or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"üí∞ –°—É–º–º–∞: {abs(order.total_cost)} T-Points\n"
                f"üìÖ –î–∞—Ç–∞: {order.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
                f"üìã –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
            if order_items:
                for item in order_items:
                    size_text = f" ({item.size})" if item.size else ""
                    text += f"‚Ä¢ {item.product.name}{size_text} x{item.quantity}\n"
            else:
                text += "‚Ä¢ –°–æ—Å—Ç–∞–≤ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ\n"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úÖ –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É",
                        callback_data=f"order_accept_{order.id}"
                    ),
                    InlineKeyboardButton(
                        text="‚è∞ –ü—Ä–æ–≤–µ—Ä—é –ø–æ–∑–∂–µ",
                        callback_data=f"order_later_{order.id}"
                    )
                ]
            ])
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º HR
            success_count = 0
            for user_id in hr_user_ids:
                try:
                    await self.bot.send_message(
                        chat_id=user_id,
                        text=text,
                        reply_markup=keyboard,
                        parse_mode='HTML'
                    )
                    success_count += 1
                    logger.info(f"Notification sent successfully to HR user {user_id}")
                except Exception as e:
                    logger.error(f"Failed to send notification to HR user {user_id}: {e}")
            
            logger.info(f"Order {order.id} notification sent to {success_count}/{len(hr_user_ids)} HR users")
            return success_count > 0
            
        except Exception as e:
            logger.error(f"Error sending order notification: {e}")
            return False
    
    async def send_order_status_notification(self, order: Order, new_status: str, hr_user: User) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–∫–∞–∑–∞ –∏–∑ order.user (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω)
            customer = order.user
            
            if not customer:
                logger.error(f"Customer not found for order {order.id}")
                return False
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
            status_messages = {
                'processing': (
                    f"‚è≥ <b>–ó–∞–∫–∞–∑ #{order.id} –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É</b>\n\n"
                    f"–í–∞—à –∑–∞–∫–∞–∑ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç: {self._format_user_mention(hr_user.telegram_id, hr_user.username, hr_user.fullname)}\n\n"
                    f"üí∞ –°—É–º–º–∞: {abs(order.total_cost)} T-Points\n"
                    f"üìÖ –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {order.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
                    f"–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ."
                ),
                'ready_for_pickup': self._format_order_ready_message(order, order.user, hr_user),
                'delivered': (
                    f"üì¶ <b>–ó–∞–∫–∞–∑ #{order.id} –≤—ã–¥–∞–Ω</b>\n\n"
                    f"üí∞ –°—É–º–º–∞: {abs(order.total_cost)} T-Points\n"
                    f"üìÖ –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {order.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
                    f"‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω.\n"
                    f"üë§ –í—ã–¥–∞–ª: {self._format_user_mention(hr_user.telegram_id, hr_user.username, hr_user.fullname)}\n\n"
                    f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞!"
                ),
                'cancelled': (
                    f"‚ùå <b>–ó–∞–∫–∞–∑ #{order.id} –æ—Ç–º–µ–Ω–µ–Ω</b>\n\n"
                    f"üí∞ –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ: {abs(order.total_cost)} T-Points\n"
                    f"üìÖ –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {order.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
                    f"–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–º–µ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ.\n"
                    f"T-Points –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å."
                )
            }
            
            text = status_messages.get(new_status, f"üìã –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #{order.id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {new_status}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ú–æ–∏ –∑–∞–∫–∞–∑—ã"
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã",
                        callback_data="menu:my_orders"
                    ),
                    InlineKeyboardButton(
                        text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                        callback_data="menu:main"
                    )
                ]
            ])
            
            results = await self._send_message_to_users([customer.telegram_id], text, keyboard)
            
            success = results.get(customer.telegram_id, False)
            if success:
                logger.info(f"Status notification sent to user {customer.telegram_id} for order {order.id}")
            else:
                logger.error(f"Failed to send status notification to user {customer.telegram_id} for order {order.id}")
            
            return success
            
        except Exception as e:
            logger.error(f"Error sending order status notification for order {order.id}: {e}")
            return False
    
    async def send_order_cancelled_by_user_notification(self, order: Order, user: User, reason: str = None) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ HR –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        """
        try:
            # HR users –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω—ã –∏–∑–≤–Ω–µ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å greenlet
            logger.warning("send_order_cancelled_by_user_notification requires hr_users to be passed explicitly")
            return False
            
            user_mention = self._format_user_mention(
                user.telegram_id, 
                user.username, 
                user.fullname
            )
            
            cancel_reason = reason or "–°–ª—É—á–∞–π–Ω—ã–π –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–∫–∞–∑"
            
            text = (
                f"‚ùå <b>–ó–∞–∫–∞–∑ #{order.id} –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º</b>\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_mention}\n"
                f"üè¢ –û—Ç–¥–µ–ª: {user.department or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"üí∞ –°—É–º–º–∞: {abs(order.total_cost)} T-Points\n"
                f"üìÖ –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {order.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
                f"üìù –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–º–µ–Ω—ã: <i>{cancel_reason}</i>\n\n"
                f"üí≥ T-Points –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."
            )
            
            results = await self._send_message_to_users(hr_users, text)
            
            success_count = sum(1 for success in results.values() if success)
            logger.info(f"Order cancellation notification sent to {success_count}/{len(hr_users)} HR users")
            
            return success_count > 0
            
        except Exception as e:
            logger.error(f"Error sending order cancelled notification for order {order.id}: {e}")
            return False

    async def send_hr_order_cancellation_notification(self, order: Order, user: User, hr_user_id: int, reason: str = None) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ HR –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ"
        """
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–ª–Ω—ã–º –∏–º–µ–Ω–µ–º –∏ username
            if user.username:
                user_mention = f'<a href="tg://user?id={user.telegram_id}">{user.fullname}</a> (@{user.username})'
            else:
                user_mention = f'<a href="tg://user?id={user.telegram_id}">{user.fullname}</a>'
            
            cancel_reason = reason or "–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω —Å–∏—Å—Ç–µ–º–æ–π"
            
            text = (
                f"‚ùå <b>–ó–∞–∫–∞–∑ #{order.id} –æ—Ç–º–µ–Ω–µ–Ω</b>\n\n"
                f"üë§ –ó–∞–∫–∞–∑—á–∏–∫: {user_mention}\n"
                f"üè¢ –û—Ç–¥–µ–ª: {user.department or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"üí∞ –°—É–º–º–∞: {abs(order.total_cost)} T-Points\n"
                f"üìÖ –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {order.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                f"üìÖ –î–∞—Ç–∞ –æ—Ç–º–µ–Ω—ã: {order.updated_at.strftime('%d.%m.%Y %H:%M')}\n\n"
                f"üìù –ü—Ä–∏—á–∏–Ω–∞: <i>{cancel_reason}</i>\n\n"
                f"üí≥ T-Points –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –∑–∞–∫–∞–∑—á–∏–∫—É.\n"
                f"üì¶ –¢–æ–≤–∞—Ä—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ —Å–∫–ª–∞–¥."
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ"
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ",
                        callback_data=f"hr_acknowledge_cancel:{order.id}"
                    )
                ]
            ])
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ HR
            try:
                await self.bot.send_message(
                    chat_id=hr_user_id,
                    text=text,
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )
                logger.info(f"HR cancellation notification sent to user {hr_user_id} for order {order.id}")
                return True
                
            except Exception as e:
                logger.error(f"Failed to send HR cancellation notification to user {hr_user_id}: {e}")
                return False
            
        except Exception as e:
            logger.error(f"Error sending HR order cancellation notification for order {order.id}: {e}")
            return False
    
    async def notify_order_status_change(self, order: Order, old_status: str, hr_user: User = None) -> bool:
        """
        –ù–û–í–´–ô –ú–ï–¢–û–î: –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ notifications.py –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–∫–∞–∑–∞ –≤ —Ä–∞–±–æ—Ç—É
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–∫–∞–∑–∞
            if not order:
                logger.error("Order not found for status notification")
                return False
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
            new_status = order.status
            
            # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∑–∞–∫–∞–∑–∞
            user_id = order.user_id
            if hasattr(order, 'user') and order.user:
                user_id = order.user.telegram_id
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥
            success = await self.send_status_change_notification(
                order_id=order.id,
                user_id=user_id,
                old_status=old_status,
                new_status=new_status,
                hr_user_id=hr_user.telegram_id if hr_user else None
            )
            
            if success:
                logger.info(f"Order status change notification sent for order {order.id}: {old_status} ‚Üí {new_status}")
            else:
                logger.error(f"Failed to send order status change notification for order {order.id}")
            
            return success
            
        except Exception as e:
            logger.error(f"Error in notify_order_status_change for order {order.id}: {e}")
            return False
    
    async def send_notification(self, notification_type: str, **kwargs) -> bool:
        """
        –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–∫–∞–∑–∞—Ö
        """
        if notification_type == "order_created":
            return await self.send_order_created_notification(
                kwargs.get('order'), 
                kwargs.get('user')
            )
        elif notification_type == "order_status_changed":
            return await self.send_order_status_notification(
                kwargs.get('order'),
                kwargs.get('new_status'),
                kwargs.get('hr_user')
            )
        elif notification_type == "order_cancelled_by_user":
            return await self.send_order_cancelled_by_user_notification(
                kwargs.get('order'),
                kwargs.get('user'),
                kwargs.get('reason')
            )
        else:
            logger.warning(f"Unknown order notification type: {notification_type}")
            return False
    
    async def send_status_change_notification(self, order_id: int, user_id: int, old_status: str, new_status: str, hr_user_id: int = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
        try:
            from ...repositories.order_repository import OrderRepository
            from ...repositories.user_repository import UserRepository
            
            order_repo = OrderRepository(self.session)
            user_repo = UserRepository(self.session)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            order = await order_repo.get_order_by_id(order_id)
            if not order:
                logger.error(f"Order {order_id} not found for status change notification")
                return False
            
            user = await user_repo.get_user_by_telegram_id(user_id)
            if not user:
                logger.error(f"User {user_id} not found for status change notification")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ HR, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            hr_user = None
            if hr_user_id:
                hr_user = await user_repo.get_user_by_telegram_id(hr_user_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
            status_messages = {
                'order_taken': self._format_order_taken_message,
                'order_ready': self._format_order_ready_message,
                'order_completed': self._format_order_completed_message,
                'order_cancelled': self._format_order_cancelled_message,
            }
            
            notification_type = self._determine_notification_type(old_status, new_status)
            message_formatter = status_messages.get(notification_type)
            
            if not message_formatter:
                logger.warning(f"No message formatter for status change {old_status} -> {new_status}")
                return False
            
            message_text = message_formatter(order, user, hr_user)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã",
                        callback_data="menu:my_orders"
                    ),
                    InlineKeyboardButton(
                        text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                        callback_data="menu:main"
                    )
                ]
            ])
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                await self.bot.send_message(
                    chat_id=user_id,
                    text=message_text,
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )
                logger.info(f"Status change notification sent to user {user_id} for order {order_id}")
                return True
                
            except Exception as e:
                logger.error(f"Failed to send status change notification to user {user_id}: {e}")
                return False
                
        except Exception as e:
            logger.error(f"Error sending status change notification: {e}")
            return False
    
    def _determine_notification_type(self, old_status: str, new_status: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—é —Å—Ç–∞—Ç—É—Å–∞"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—é —Å—Ç–∞—Ç—É—Å–∞
        if new_status == 'processing':
            return 'order_taken'
        elif new_status == 'ready_for_pickup':
            return 'order_ready'
        elif new_status == 'delivered':
            return 'order_completed'
        elif new_status == 'cancelled':
            return 'order_cancelled'
        else:
            return 'unknown'
    
    def _format_order_taken_message(self, order, user, hr_user) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤–∑—è—Ç–∏–∏ –∑–∞–∫–∞–∑–∞ –≤ —Ä–∞–±–æ—Ç—É"""
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è HR —Å username
        if hr_user:
            if hr_user.username:
                hr_mention = f"{hr_user.fullname} (@{hr_user.username})"
            else:
                hr_mention = hr_user.fullname
        else:
            hr_mention = "HR-–º–µ–Ω–µ–¥–∂–µ—Ä"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞
        order_items_text = ""
        if hasattr(order, 'items') and order.items:
            order_items_text += "üìã –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n"
            for item in order.items:
                size_text = f" ({item.size})" if item.size else ""
                order_items_text += f"‚Ä¢ {item.product.name}{size_text} x{item.quantity}\n"
            order_items_text += "\n"
        
        return (
            f"‚ö° <b>–í–∞—à –∑–∞–∫–∞–∑ #{order.id} –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É!</b>\n\n"
            f"üë§ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {hr_mention}\n"
            f"üí∞ –°—É–º–º–∞: {abs(order.total_cost)} T-Points\n\n"
            f"{order_items_text}"
            f"üìã –ú—ã –Ω–∞—á–∞–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞. "
            f"–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ."
        )
    
    def _format_order_ready_message(self, order, user, hr_user) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞ –∫ –≤—ã–¥–∞—á–µ"""
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –∏ —é–∑–µ—Ä–Ω–µ–π–º HR –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è
        if hr_user:
            if hr_user.username:
                hr_contact = f"{hr_user.fullname} (@{hr_user.username})"
            else:
                hr_contact = hr_user.fullname
        else:
            hr_contact = "HR-–º–µ–Ω–µ–¥–∂–µ—Ä—É"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞
        order_items_text = ""
        if hasattr(order, 'items') and order.items:
            order_items_text += "üìã –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n"
            for item in order.items:
                size_text = f" ({item.size})" if item.size else ""
                order_items_text += f"‚Ä¢ {item.product.name}{size_text} x{item.quantity}\n"
            order_items_text += "\n"
        
        return (
            f"üì¶ <b>–í–∞—à –∑–∞–∫–∞–∑ #{order.id} –≥–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ!</b>\n\n"
            f"üí∞ –°—É–º–º–∞: {abs(order.total_cost)} T-Points\n"
            f"üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {order.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            f"{order_items_text}"
            f"üè¢ –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–±—Ä–∞—Ç—å –∑–∞–∫–∞–∑ –≤ –æ—Ñ–∏—Å–µ.\n"
            f"–ü–æ –≤–æ–ø—Ä–æ—Å—É –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ {hr_contact}."
        )
    
    def _format_order_completed_message(self, order, user, hr_user) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞"""
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞
        order_items_text = ""
        if hasattr(order, 'items') and order.items:
            order_items_text += "üìã –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n"
            for item in order.items:
                size_text = f" ({item.size})" if item.size else ""
                order_items_text += f"‚Ä¢ {item.product.name}{size_text} x{item.quantity}\n"
            order_items_text += "\n"
        
        return (
            f"‚úÖ <b>–í–∞—à –∑–∞–∫–∞–∑ #{order.id} –≤—ã–ø–æ–ª–Ω–µ–Ω!</b>\n\n"
            f"üí∞ –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {abs(order.total_cost)} T-Points\n"
            f"üìÖ –î–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è: {order.updated_at.strftime('%d.%m.%Y %H:%M') if order.updated_at else '—Å–µ–≥–æ–¥–Ω—è'}\n\n"
            f"{order_items_text}"
            f"üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∑–∞–∫–∞–∑–æ–≤!"
        )
    
    def _format_order_cancelled_message(self, order, user, hr_user) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞"""
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞
        order_items_text = ""
        if hasattr(order, 'items') and order.items:
            order_items_text += "üìã –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n"
            for item in order.items:
                size_text = f" ({item.size})" if item.size else ""
                order_items_text += f"‚Ä¢ {item.product.name}{size_text} x{item.quantity}\n"
            order_items_text += "\n"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –∫—Ç–æ –æ—Ç–º–µ–Ω–∏–ª
        cancellation_info = ""
        if hr_user:
            if hr_user.username:
                hr_mention = f"{hr_user.fullname} (@{hr_user.username})"
            else:
                hr_mention = hr_user.fullname
            cancellation_info = f"üë§ –û—Ç–º–µ–Ω–∏–ª: {hr_mention}\n"
        
        return (
            f"‚ùå <b>–í–∞—à –∑–∞–∫–∞–∑ #{order.id} –æ—Ç–º–µ–Ω—ë–Ω</b>\n\n"
            f"üí∞ –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ: {abs(order.total_cost)} T-Points\n"
            f"üìÖ –î–∞—Ç–∞ –æ—Ç–º–µ–Ω—ã: {order.updated_at.strftime('%d.%m.%Y %H:%M') if order.updated_at else '—Å–µ–≥–æ–¥–Ω—è'}\n"
            f"{cancellation_info}\n"
            f"{order_items_text}"
            f"üîÑ T-Points –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å\n\n"
            f"‚ùì –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ HR-–º–µ–Ω–µ–¥–∂–µ—Ä—É."
        ) 