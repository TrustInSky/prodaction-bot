from typing import Optional, List
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from .base_notification_service import BaseNotificationService
from ...models.models import User
from datetime import datetime
import logging

logger = logging.getLogger(__name__)

class UserNotificationService(BaseNotificationService):
    """–°–µ—Ä–≤–∏—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–±–∞–ª–∞–Ω—Å, —Å—Ç–∞—Ç—É—Å—ã –∏ —Ç.–¥.)"""
    
    async def send_balance_update_notification(self, user: User, old_balance: int, new_balance: int, reason: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ T-Points
        """
        try:
            difference = new_balance - old_balance
            emoji = "üíö" if difference > 0 else "üíî"
            action = "–Ω–∞—á–∏—Å–ª–µ–Ω–æ" if difference > 0 else "—Å–ø–∏—Å–∞–Ω–æ"
            
            text = (
                f"{emoji} <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ T-Points</b>\n\n"
                f"üí∞ –ë—ã–ª–æ: {old_balance} T-Points\n"
                f"üí∞ –°—Ç–∞–ª–æ: {new_balance} T-Points\n"
                f"üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {difference:+d} T-Points\n\n"
                f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
                f"üí≥ {action.capitalize()}: {abs(difference)} T-Points"
            )
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å",
                        callback_data="menu:balance"
                    ),
                    InlineKeyboardButton(
                        text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                        callback_data="menu:main"
                    )
                ]
            ])
            
            results = await self._send_message_to_users([user.telegram_id], text, keyboard)
            
            success = results.get(user.telegram_id, False)
            if success:
                logger.info(f"Balance notification sent to user {user.telegram_id}")
            
            return success
            
        except Exception as e:
            logger.error(f"Error sending balance notification to user {user.telegram_id}: {e}")
            return False
    
    async def send_welcome_notification(self, user: User) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        """
        try:
            text = (
                f"üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.full_name or user.username or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!</b>\n\n"
                f"üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ HR Support Bot.\n\n"
                f"üí∞ –í–∞—à —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user.tpoints} T-Points\n\n"
                f"üìã –ß—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å:\n"
                f"‚Ä¢ üõçÔ∏è –ó–∞–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞\n"
                f"‚Ä¢ üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–∏ –∑–∞–∫–∞–∑—ã\n"
                f"‚Ä¢ üí≥ –ü—Ä–æ–≤–µ—Ä—è—Ç—å –±–∞–ª–∞–Ω—Å T-Points\n"
                f"‚Ä¢ ‚ùì –ó–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã HR\n\n"
                f"–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ /start –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é!"
            )
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                        callback_data="menu:main"
                    ),
                    InlineKeyboardButton(
                        text="üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥",
                        callback_data="menu:catalog"
                    )
                ]
            ])
            
            results = await self._send_message_to_users([user.telegram_id], text, keyboard)
            
            success = results.get(user.telegram_id, False)
            if success:
                logger.info(f"Welcome notification sent to user {user.telegram_id}")
            
            return success
            
        except Exception as e:
            logger.error(f"Error sending welcome notification to user {user.telegram_id}: {e}")
            return False
    
    async def send_profile_update_notification(self, user: User, updated_fields: List[str]) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è
        """
        try:
            field_names = {
                'full_name': '–∏–º—è',
                'department': '–æ—Ç–¥–µ–ª',
                'role': '—Ä–æ–ª—å',
                'username': 'username'
            }
            
            updated_fields_text = ", ".join(field_names.get(field, field) for field in updated_fields)
            
            text = (
                f"‚úÖ <b>–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω</b>\n\n"
                f"üìù –û–±–Ω–æ–≤–ª–µ–Ω—ã –ø–æ–ª—è: {updated_fields_text}\n\n"
                f"üë§ –ò–º—è: {user.full_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                f"üè¢ –û—Ç–¥–µ–ª: {user.department or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"üé≠ –†–æ–ª—å: {user.role or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}\n"
                f"üí∞ –ë–∞–ª–∞–Ω—Å: {user.tpoints} T-Points"
            )
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å",
                        callback_data="menu:profile"
                    ),
                    InlineKeyboardButton(
                        text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                        callback_data="menu:main"
                    )
                ]
            ])
            
            results = await self._send_message_to_users([user.telegram_id], text, keyboard)
            
            success = results.get(user.telegram_id, False)
            if success:
                logger.info(f"Profile update notification sent to user {user.telegram_id}")
            
            return success
            
        except Exception as e:
            logger.error(f"Error sending profile update notification to user {user.telegram_id}: {e}")
            return False
    
    async def send_reminder_notification(self, user: User, reminder_type: str, details: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        """
        try:
            reminder_titles = {
                'order_pickup': 'üì¶ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞',
                'profile_incomplete': 'üìù –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è',
                'survey': 'üìä –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–ø—Ä–æ—Å–µ'
            }
            
            title = reminder_titles.get(reminder_type, 'üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ')
            
            text = (
                f"üîî <b>{title}</b>\n\n"
                f"{details}\n\n"
                f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
            )
            
            # –ö–Ω–æ–ø–∫–∏ –∑–∞–≤–∏—Å—è—Ç –æ—Ç —Ç–∏–ø–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            if reminder_type == 'order_pickup':
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã",
                            callback_data="menu:my_orders"
                        )
                    ]
                ])
            elif reminder_type == 'profile_incomplete':
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üë§ –ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å",
                            callback_data="menu:profile"
                        )
                    ]
                ])
            else:
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                            callback_data="menu:main"
                        )
                    ]
                ])
            
            results = await self._send_message_to_users([user.telegram_id], text, keyboard)
            
            success = results.get(user.telegram_id, False)
            if success:
                logger.info(f"Reminder notification sent to user {user.telegram_id}")
            
            return success
            
        except Exception as e:
            logger.error(f"Error sending reminder notification to user {user.telegram_id}: {e}")
            return False
    
    async def send_notification(self, notification_type: str, **kwargs) -> bool:
        """
        –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        """
        if notification_type == "balance_update":
            return await self.send_balance_update_notification(
                kwargs.get('user'),
                kwargs.get('old_balance'),
                kwargs.get('new_balance'),
                kwargs.get('reason')
            )
        elif notification_type == "welcome":
            return await self.send_welcome_notification(kwargs.get('user'))
        elif notification_type == "profile_update":
            return await self.send_profile_update_notification(
                kwargs.get('user'),
                kwargs.get('updated_fields', [])
            )
        elif notification_type == "reminder":
            return await self.send_reminder_notification(
                kwargs.get('user'),
                kwargs.get('reminder_type'),
                kwargs.get('details')
            )
        else:
            logger.warning(f"Unknown user notification type: {notification_type}")
            return False 