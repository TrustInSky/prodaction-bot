"""
–°–µ—Ä–≤–∏—Å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
–í—Å—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
"""
from typing import Optional, Dict, Any, List
from sqlalchemy.ext.asyncio import AsyncSession
from datetime import datetime, date
import re
import logging

from ..models.models import User
from ..core.base import BaseService
from ..services.user import UserService
from ..constants.departments import get_departments_list, format_fullname

logger = logging.getLogger(__name__)

class OnboardingService(BaseService):
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""

    def __init__(self, session: AsyncSession):
        super().__init__(session)
        self.user_service = UserService(session)

    async def validate_fullname(self, fullname: str) -> Dict[str, Any]:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –§–ò–û (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û–ï –ü–û–õ–ï)
        
        Returns:
            Dict —Å –∫–ª—é—á–∞–º–∏: valid (bool), message (str), first_name (str), formatted_fullname (str)
        """
        try:
            # –§–ò–û - –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û–ï –ø–æ–ª–µ
            if not fullname or fullname.strip() == "":
                return {
                    'valid': False,
                    'message': "‚ùå –§–ò–û –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è",
                    'first_name': None,
                    'formatted_fullname': None,
                    'skipped': False
                }
            
            if len(fullname.strip()) < 3:
                return {
                    'valid': False,
                    'message': "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞)",
                    'first_name': None,
                    'formatted_fullname': None,
                    'skipped': False
                }
            
            if len(fullname.strip()) > 200:
                return {
                    'valid': False,
                    'message': "‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è (–º–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤)",
                    'first_name': None,
                    'formatted_fullname': None,
                    'skipped': False
                }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –±—É–∫–≤—ã
            if not re.search(r'[–∞-—è—ë–ê-–Ø–Åa-zA-Z]', fullname):
                return {
                    'valid': False,
                    'message': "‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±—É–∫–≤—ã",
                    'first_name': None,
                    'formatted_fullname': None,
                    'skipped': False
                }
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –§–ò–û (–ø–µ—Ä–≤–∞—è –±—É–∫–≤–∞ –∑–∞–≥–ª–∞–≤–Ω–∞—è –≤ –∫–∞–∂–¥–æ–º —Å–ª–æ–≤–µ)
            formatted_fullname = format_fullname(fullname)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è (–ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –ø–æ—Å–ª–µ —Ñ–∞–º–∏–ª–∏–∏)
            first_name = self._extract_first_name(formatted_fullname)
            
            return {
                'valid': True,
                'message': f"‚úÖ –§–ò–û –ø—Ä–∏–Ω—è—Ç–æ: {formatted_fullname}",
                'first_name': first_name,
                'formatted_fullname': formatted_fullname,
                'skipped': False
            }
        except Exception as e:
            logger.error(f"Error validating fullname: {e}")
            return {
                'valid': False,
                'message': "‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–º–µ–Ω–∏",
                'first_name': None,
                'formatted_fullname': None,
                'skipped': False
            }

    async def validate_birth_date(self, date_string: str) -> Dict[str, Any]:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è (–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)
        
        Returns:
            Dict —Å –∫–ª—é—á–∞–º–∏: valid (bool), message (str), birth_date (date), age (int), skipped (bool)
        """
        try:
            # –†–∞–∑—Ä–µ—à–∞–µ–º –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–µ
            if not date_string or date_string.strip() == "" or date_string.strip().lower() in ["–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "skip", "-"]:
                return {
                    'valid': True,
                    'message': "‚è≠Ô∏è –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞ (HR –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ)",
                    'birth_date': None,
                    'age': None,
                    'skipped': True
                }
            
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì
            birth_date = datetime.strptime(date_string.strip(), '%d.%m.%Y').date()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
            today = datetime.now().date()
            age = (today - birth_date).days // 365
            
            if age < 16:
                return {
                    'valid': False,
                    'message': "‚ùå –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 16 –ª–µ—Ç –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'",
                    'birth_date': None,
                    'age': age,
                    'skipped': False
                }
            
            if age > 80:
                return {
                    'valid': False,
                    'message': "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–≤–æ–∑—Ä–∞—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 80 –ª–µ—Ç)",
                    'birth_date': None,
                    'age': age,
                    'skipped': False
                }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –±—É–¥—É—â–µ–º
            if birth_date > today:
                return {
                    'valid': False,
                    'message': "‚ùå –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º",
                    'birth_date': None,
                    'age': 0,
                    'skipped': False
                }
            
            return {
                'valid': True,
                'message': f"‚úÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –ø—Ä–∏–Ω—è—Ç–∞ (–≤–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç)",
                'birth_date': birth_date,
                'age': age,
                'skipped': False
            }
        except ValueError:
            return {
                'valid': False,
                'message': "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\nüí° –ü—Ä–∏–º–µ—Ä: 15.03.1990\n‚è≠Ô∏è –ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'",
                'birth_date': None,
                'age': 0,
                'skipped': False
            }
        except Exception as e:
            logger.error(f"Error validating birth date: {e}")
            return {
                'valid': False,
                'message': "‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è",
                'birth_date': None,
                'age': 0,
                'skipped': False
            }

    async def validate_hire_date(self, date_string: str) -> Dict[str, Any]:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        
        Returns:
            Dict —Å –∫–ª—é—á–∞–º–∏: valid (bool), message (str), hire_date (date)
        """
        try:
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì
            hire_date = datetime.strptime(date_string.strip(), '%d.%m.%Y').date()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –±—É–¥—É—â–µ–º
            today = datetime.now().date()
            if hire_date > today:
                return {
                    'valid': False,
                    'message': "‚ùå –î–∞—Ç–∞ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º",
                    'hire_date': None
                }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å (–Ω–µ –±–æ–ª–µ–µ 50 –ª–µ—Ç –Ω–∞–∑–∞–¥)
            max_past_date = today.replace(year=today.year - 50)
            if hire_date < max_past_date:
                return {
                    'valid': False,
                    'message': "‚ùå –î–∞—Ç–∞ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –≤ –ø—Ä–æ—à–ª–æ–º",
                    'hire_date': None
                }
            
            return {
                'valid': True,
                'message': "‚úÖ –î–∞—Ç–∞ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø—Ä–∏–Ω—è—Ç–∞",
                'hire_date': hire_date
            }
        except ValueError:
            return {
                'valid': False,
                'message': "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\nüí° –ü—Ä–∏–º–µ—Ä: 01.09.2023",
                'hire_date': None
            }
        except Exception as e:
            logger.error(f"Error validating hire date: {e}")
            return {
                'valid': False,
                'message': "‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞—Ç—ã —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞",
                'hire_date': None
            }

    async def process_department_selection(self, callback_data: str) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ—Ç–¥–µ–ª–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ (–¢–û–õ–¨–ö–û –∫–Ω–æ–ø–∫–∏, –Ω–∏–∫–∞–∫–æ–≥–æ –≤–≤–æ–¥–∞!)
        
        Args:
            callback_data: –¥–∞–Ω–Ω—ã–µ –∏–∑ callback (–Ω–∞–ø—Ä–∏–º–µ—Ä: "dept:–ö—É–ø–µ—Ä" –∏–ª–∏ "dept:skip")
        
        Returns:
            Dict —Å –∫–ª—é—á–∞–º–∏: valid (bool), message (str), department (str), skipped (bool)
        """
        try:
            if not callback_data or not callback_data.startswith("dept:"):
                return {
                    'valid': False,
                    'message': "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—ã–±–æ—Ä–∞ –æ—Ç–¥–µ–ª–∞",
                    'department': None,
                    'skipped': False
                }
            
            department_value = callback_data[5:]  # –£–±–∏—Ä–∞–µ–º "dept:" –ø—Ä–µ—Ñ–∏–∫—Å
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞
            if department_value == "skip":
                return {
                    'valid': True,
                    'message': "‚è≠Ô∏è –û—Ç–¥–µ–ª –ø—Ä–æ–ø—É—â–µ–Ω (HR –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ —É—Ç–æ—á–Ω–∏—Ç)",
                    'department': "",
                    'skipped': True
                }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–¥–µ–ª –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ
            active_departments = get_departments_list()
            if department_value in active_departments:
                return {
                    'valid': True,
                    'message': f"‚úÖ –í—ã–±—Ä–∞–Ω –æ—Ç–¥–µ–ª: {department_value}",
                    'department': department_value,
                    'skipped': False
                }
            else:
                return {
                    'valid': False,
                    'message': f"‚ùå –û—Ç–¥–µ–ª '{department_value}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ",
                    'department': None,
                    'skipped': False
                }
                
        except Exception as e:
            logger.error(f"Error processing department selection: {e}")
            return {
                'valid': False,
                'message': "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –æ—Ç–¥–µ–ª–∞",
                'department': None,
                'skipped': False
            }

    async def complete_onboarding(self, telegram_id: int, username: str, onboarding_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            telegram_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
            username: Username –≤ Telegram
            onboarding_data: –î–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º: success (bool), user (User), message (str)
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await self.user_service.get_or_create_user(
                telegram_id=telegram_id,
                username=username or "",
                fullname=onboarding_data['fullname']
            )
            
            if not user:
                return {
                    'success': False,
                    'user': None,
                    'message': "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                }
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            success = await self.user_service.repository.update_user_data(user.telegram_id, {
                'birth_date': onboarding_data['birth_date'],
                'hire_date': onboarding_data['hire_date'],
                'department': onboarding_data['department']
            })
            
            if not success:
                return {
                    'success': False,
                    'user': user,
                    'message': "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                }
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º HR –æ –Ω–æ–≤–æ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ
            try:
                await self.user_service.notify_hr_about_new_employee(None, user)  # bot –ø–µ—Ä–µ–¥–∞–¥–∏–º –ø–æ–∑–∂–µ
            except Exception as e:
                logger.error(f"Error notifying HR about new employee: {e}")
                # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
            
            return {
                'success': True,
                'user': user,
                'message': "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
            }
        except Exception as e:
            logger.error(f"Error completing onboarding: {e}")
            return {
                'success': False,
                'user': None,
                'message': "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
            }

    def get_available_departments(self) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Ç–¥–µ–ª–æ–≤"""
        return get_departments_list()

    def _extract_first_name(self, fullname: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º—è –∏–∑ –ø–æ–ª–Ω–æ–≥–æ –§–ò–û"""
        try:
            parts = fullname.strip().split()
            if len(parts) >= 2:
                return parts[1]  # –í—Ç–æ—Ä–æ–µ —Å–ª–æ–≤–æ (–∏–º—è)
            elif len(parts) == 1:
                return parts[0]  # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–ª–æ–≤–æ
            else:
                return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        except (AttributeError, IndexError):
            return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

    async def get_onboarding_welcome_text(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞"""
        return (
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ HR Support Bot!\n\n"
            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º –∫ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ!\n\n"
            f"üìù –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–§–ò–û):\n\n"
            f"üí° –ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á"
        )

    async def format_completion_message(self, user_data: Dict[str, Any], first_name: str, user_balance: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞"""
        return (
            f"üéâ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
            f"üë§ –§–ò–û: {user_data['fullname']}\n"
            f"üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {user_data['birth_date'].strftime('%d.%m.%Y')}\n"
            f"üíº –î–∞—Ç–∞ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {user_data['hire_date'].strftime('%d.%m.%Y')}\n"
            f"üè¢ –û—Ç–¥–µ–ª: {user_data['department']}\n\n"
            f"üíé –í–∞—à —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user_balance:,} T-Points\n\n"
            f"üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É, {first_name}!\n\n"
            f"üè† –ú–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –±–æ—Ç–∞:"
        ) 