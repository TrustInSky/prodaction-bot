"""
–ï–¥–∏–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏ —Å–∏—Å—Ç–µ–º—ã:
- –î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è
- –Æ–±–∏–ª–µ–∏ —Ä–∞–±–æ—Ç—ã  
- –û—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
"""
import logging
from datetime import datetime, date, timedelta
from typing import List, Dict, Any, Optional
from sqlalchemy.ext.asyncio import AsyncSession

from ..models.models import (
    AutoEventSettings, AdminNotificationPreferences, 
    User, Product, TPointsTransaction
)
from ..services.transaction_service import TransactionService
from ..repositories.auto_events_repository import AutoEventsRepository

logger = logging.getLogger(__name__)


class AutoEventsService:
    """–ï–¥–∏–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π"""
    
    def __init__(self, session: AsyncSession, bot=None):
        self.session = session
        self.bot = bot
        self.transaction_service = TransactionService(session)
        self.repository = AutoEventsRepository(session)
    
    # =============================================================================
    # –£–ü–†–ê–í–õ–ï–ù–ò–ï –ù–ê–°–¢–†–û–ô–ö–ê–ú–ò –°–û–ë–´–¢–ò–ô
    # =============================================================================
    
    async def get_event_settings(self, event_type: str) -> Optional[AutoEventSettings]:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–±—ã—Ç–∏—è –ø–æ —Ç–∏–ø—É"""
        return await self.repository.get_event_settings(event_type)
    
    async def get_all_event_settings(self) -> List[AutoEventSettings]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–±—ã—Ç–∏–π"""
        return await self.repository.get_all_event_settings()
    
    async def update_event_settings(self, event_type: str, **kwargs) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–±—ã—Ç–∏—è"""
        try:
            settings = await self.get_event_settings(event_type)
            if not settings:
                # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
                settings = await self.repository.create_event_settings(event_type, **kwargs)
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                settings = await self.repository.update_event_settings(settings, **kwargs)
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–Ω–∞ –ø—Ä—è–º–∞—è —Ä–∞–±–æ—Ç–∞ —Å session - —ç—Ç–æ –¥–µ–ª–∞–µ—Ç middleware
            logger.info(f"Updated {event_type} settings: {kwargs}")
            return True
            
        except Exception as e:
            logger.error(f"Error updating {event_type} settings: {e}")
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–Ω rollback - —ç—Ç–æ –¥–µ–ª–∞–µ—Ç middleware –ø—Ä–∏ –æ—à–∏–±–∫–µ
            return False
    
    # =============================================================================
    # –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ú–ò –ù–ê–°–¢–†–û–ô–ö–ê–ú–ò –ê–î–ú–ò–ù–û–í
    # =============================================================================
    
    async def get_admin_preferences(self, user_id: int) -> AdminNotificationPreferences:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∞ (—Å–æ–∑–¥–∞—Ç—å –µ—Å–ª–∏ –Ω–µ—Ç)"""
        preferences = await self.repository.get_admin_preferences(user_id)
        
        if not preferences:
            # –°–æ–∑–¥–∞—ë–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
            preferences = await self.repository.create_admin_preferences(user_id)
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–Ω commit - —ç—Ç–æ –¥–µ–ª–∞–µ—Ç middleware
        
        return preferences
    
    async def update_admin_preferences(self, user_id: int, **kwargs) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∞"""
        try:
            preferences = await self.get_admin_preferences(user_id)
            preferences = await self.repository.update_admin_preferences(preferences, **kwargs)
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–Ω commit - —ç—Ç–æ –¥–µ–ª–∞–µ—Ç middleware
            logger.info(f"Updated admin {user_id} preferences: {kwargs}")
            return True
            
        except Exception as e:
            logger.error(f"Error updating admin {user_id} preferences: {e}")
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–Ω rollback - —ç—Ç–æ –¥–µ–ª–∞–µ—Ç middleware
            return False
    
    async def get_all_hr_users(self) -> List[User]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö HR –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        return await self.repository.get_all_hr_users()
    
    # =============================================================================
    # –ü–†–û–í–ï–†–ö–ê –ò –û–ë–†–ê–ë–û–¢–ö–ê –î–ù–ï–ô –†–û–ñ–î–ï–ù–ò–Ø
    # =============================================================================
    
    async def check_birthdays(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        results = {
            'birthday_notifications_sent': 0,
            'tpoints_awarded': 0,
            'errors': []
        }
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è
            birthday_settings = await self.get_event_settings('birthday')
            if not birthday_settings or not birthday_settings.is_enabled:
                logger.info("Birthday notifications are disabled")
                return results
            
            # –ü–∞—Ä—Å–∏–º –¥–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            notification_days = self._parse_notification_days(birthday_settings.notification_days)
            today = date.today()
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–Ω—è–º–∏ —Ä–æ–∂–¥–µ–Ω–∏—è
            users = await self.repository.get_users_with_birthdays()
            
            for user in users:
                if not user.birth_date:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –¥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è
                days_until_birthday = self._days_until_birthday(user.birth_date, today)
                
                if days_until_birthday in notification_days:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    if await self._send_birthday_notification(user, days_until_birthday, birthday_settings):
                        results['birthday_notifications_sent'] += 1
                    
                    # –ù–∞—á–∏—Å–ª—è–µ–º T-Points –≤ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è
                    if days_until_birthday == 0 and birthday_settings.tpoints_amount > 0:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—á–∏—Å–ª—è–ª–∏ –ª–∏ —É–∂–µ –≤ —ç—Ç–æ–º –≥–æ–¥—É
                        if not await self.repository.check_birthday_transaction_exists(user.telegram_id, today.year):
                            if await self._award_birthday_points(user, birthday_settings.tpoints_amount):
                                results['tpoints_awarded'] += birthday_settings.tpoints_amount
            
            logger.info(f"Birthday check completed: {results}")
            return results
            
        except Exception as e:
            error_msg = f"Error in birthday check: {e}"
            logger.error(error_msg)
            results['errors'].append(error_msg)
            return results
    
    async def _send_birthday_notification(self, user: User, days_until: int, settings: AutoEventSettings) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–Ω–µ —Ä–æ–∂–¥–µ–Ω–∏—è"""
        try:
            if not self.bot:
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º HR –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
            hr_users = await self._get_hr_users_for_notifications('birthday')
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è HR
            username = f"@{user.username}" if user.username else user.fullname
            
            if days_until == 0:
                message = f"üéÇ <b>–°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è!</b>\n\nüë§ {username}\nüéâ –ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –æ–±—â—É—é –≥—Ä—É–ø–ø—É!"
                button_text = "–°–ø–∞—Å–∏–±–æ"
                callback_data = f"birthday_hr_thanks_{user.telegram_id}"
            else:
                message = f"üéÇ <b>–°–∫–æ—Ä–æ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è</b>\n\nüë§ {username}\nüìÖ –ß–µ—Ä–µ–∑ {days_until} –¥–Ω.\n\nüí° –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–∑–¥—Ä–∞–≤–∏—Ç—å {'—Å–µ–≥–æ–¥–Ω—è' if days_until == 1 else f'—á–µ—Ä–µ–∑ {days_until} –¥–Ω–µ–π'}!"
                button_text = "–°–ø–∞—Å–∏–±–æ"
                callback_data = f"birthday_hr_thanks_{user.telegram_id}_{days_until}"
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è HR
            from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=button_text, callback_data=callback_data)]
            ])
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º HR
            for hr_user in hr_users:
                try:
                    await self.bot.send_message(
                        hr_user.telegram_id, 
                        message, 
                        parse_mode="HTML",
                        reply_markup=keyboard
                    )
                except Exception as e:
                    logger.error(f"Failed to send birthday notification to HR {hr_user.telegram_id}: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∞–º–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è
            if days_until == 0:
                try:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è (–≤—Ç–æ—Ä–æ–µ —Å–ª–æ–≤–æ –∏–∑ fullname, –≤ –Ω–∞–¥–µ–∂–¥–µ —á—Ç–æ —ç—Ç–æ –∏–º—è –≤ –§–ò–û)
                    name_parts = user.fullname.split() if user.fullname else []
                    first_name = name_parts[1] if len(name_parts) > 1 else (name_parts[0] if name_parts else "–ö–æ–ª–ª–µ–≥–∞")
                    
                    birthday_message = f"üéÇ <b>{first_name}, –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –í–∞—Å —Å –î–Ω—ë–º –†–æ–∂–¥–µ–Ω–∏—è!</b>\n\nüéâ –ñ–µ–ª–∞–µ–º —Å—á–∞—Å—Ç—å—è, –∑–¥–æ—Ä–æ–≤—å—è –∏ —É—Å–ø–µ—Ö–æ–≤!"
                    if settings.tpoints_amount > 0:
                        birthday_message += f"\n\nüíé –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {settings.tpoints_amount} T-Points –≤ –ø–æ–¥–∞—Ä–æ–∫!"
                    
                    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–°–ø–∞—Å–∏–±–æ"
                    from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="–°–ø–∞—Å–∏–±–æ", callback_data=f"birthday_thanks_{user.telegram_id}")]
                    ])
                    
                    await self.bot.send_message(
                        user.telegram_id, 
                        birthday_message, 
                        parse_mode="HTML",
                        reply_markup=keyboard
                    )
                except Exception as e:
                    logger.error(f"Failed to send birthday greeting to user {user.telegram_id}: {e}")
            
            return True
            
        except Exception as e:
            logger.error(f"Error sending birthday notification for user {user.telegram_id}: {e}")
            return False
    
    async def _award_birthday_points(self, user: User, points: int) -> bool:
        """–ù–∞—á–∏—Å–ª–∏—Ç—å T-Points –∑–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è"""
        try:
            # –ù–∞—á–∏—Å–ª—è–µ–º T-Points
            success = await self.transaction_service.add_points(
                user_id=user.telegram_id,
                points=points,
                description=f"–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è {date.today().year}"
            )
            
            if success:
                logger.info(f"Awarded {points} T-Points to user {user.telegram_id} for birthday")
            
            return success
            
        except Exception as e:
            logger.error(f"Error awarding birthday points to user {user.telegram_id}: {e}")
            return False
    
    # =============================================================================
    # –ü–†–û–í–ï–†–ö–ê –ò –û–ë–†–ê–ë–û–¢–ö–ê –Æ–ë–ò–õ–ï–ï–í –†–ê–ë–û–¢–´
    # =============================================================================
    
    async def check_anniversaries(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —é–±–∏–ª–µ–∏ —Ä–∞–±–æ—Ç—ã –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        results = {
            'anniversary_notifications_sent': 0,
            'tpoints_awarded': 0,
            'errors': []
        }
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —é–±–∏–ª–µ–µ–≤
            anniversary_settings = await self.get_event_settings('anniversary')
            if not anniversary_settings or not anniversary_settings.is_enabled:
                logger.info("Anniversary notifications are disabled")
                return results
            
            # –ü–∞—Ä—Å–∏–º –¥–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            notification_days = self._parse_notification_days(anniversary_settings.notification_days)
            today = date.today()
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–∞—Ç–∞–º–∏ –Ω–∞–π–º–∞
            users = await self.repository.get_users_with_hire_dates()
            
            for user in users:
                if not user.hire_date:
                    continue
                
                # –í—ã—á–∏—Å–ª—è–µ–º –≥–æ–¥—ã —Ä–∞–±–æ—Ç—ã –∏ –¥–Ω–∏ –¥–æ —é–±–∏–ª–µ—è
                years_worked, days_until_anniversary = self._calculate_anniversary(user.hire_date, today)
                
                # –£—á–∏—Ç—ã–≤–∞–µ–º —é–±–∏–ª–µ–∏ —Ç–æ–ª—å–∫–æ —Å –ø–µ—Ä–≤–æ–≥–æ –≥–æ–¥–∞ —Ä–∞–±–æ—Ç—ã
                if years_worked >= 1 and days_until_anniversary in notification_days:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    if await self._send_anniversary_notification(user, years_worked, days_until_anniversary, anniversary_settings):
                        results['anniversary_notifications_sent'] += 1
                    
                    # –ù–∞—á–∏—Å–ª—è–µ–º T-Points –≤ –¥–µ–Ω—å —é–±–∏–ª–µ—è
                    if days_until_anniversary == 0:
                        points_to_award = anniversary_settings.tpoints_amount + (years_worked * anniversary_settings.tpoints_multiplier)
                        if points_to_award > 0:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—á–∏—Å–ª—è–ª–∏ –ª–∏ —É–∂–µ –∑–∞ —ç—Ç–æ—Ç —é–±–∏–ª–µ–π
                            if not await self.repository.check_anniversary_transaction_exists(user.telegram_id, years_worked):
                                if await self._award_anniversary_points(user, years_worked, points_to_award):
                                    results['tpoints_awarded'] += points_to_award
            
            logger.info(f"Anniversary check completed: {results}")
            return results
            
        except Exception as e:
            error_msg = f"Error in anniversary check: {e}"
            logger.error(error_msg)
            results['errors'].append(error_msg)
            return results
    
    async def _send_anniversary_notification(self, user: User, years: int, days_until: int, settings: AutoEventSettings) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —é–±–∏–ª–µ–µ —Ä–∞–±–æ—Ç—ã"""
        try:
            if not self.bot:
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º HR –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
            hr_users = await self._get_hr_users_for_notifications('anniversary')
            
            if days_until == 0:
                message = f"üèÜ <b>–°–µ–≥–æ–¥–Ω—è —é–±–∏–ª–µ–π —Ä–∞–±–æ—Ç—ã!</b>\n\nüë§ {user.fullname}\nüéØ {years} –ª–µ—Ç –≤ –∫–æ–º–ø–∞–Ω–∏–∏\nüéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!"
            else:
                message = f"üèÜ <b>–°–∫–æ—Ä–æ —é–±–∏–ª–µ–π —Ä–∞–±–æ—Ç—ã</b>\n\nüë§ {user.fullname}\nüéØ {years} –ª–µ—Ç –≤ –∫–æ–º–ø–∞–Ω–∏–∏\nüìÖ –ß–µ—Ä–µ–∑ {days_until} –¥–Ω."
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º HR
            for hr_user in hr_users:
                try:
                    await self.bot.send_message(hr_user.telegram_id, message)
                except Exception as e:
                    logger.error(f"Failed to send anniversary notification to HR {hr_user.telegram_id}: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∞–º–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –¥–µ–Ω—å —é–±–∏–ª–µ—è
            if days_until == 0:
                try:
                    points_to_award = settings.tpoints_amount + (years * settings.tpoints_multiplier)
                    anniversary_message = f"üèÜ <b>–° –Æ–±–∏–ª–µ–µ–º —Ä–∞–±–æ—Ç—ã!</b>\n\nüéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å {years} –≥–æ–¥–∞–º–∏ –≤ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏!\n–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à –≤–∫–ª–∞–¥ –∏ –ø—Ä–µ–¥–∞–Ω–Ω–æ—Å—Ç—å!"
                    if points_to_award > 0:
                        anniversary_message += f"\n\nüíé –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {points_to_award} T-Points –≤ —á–µ—Å—Ç—å —é–±–∏–ª–µ—è!"
                    
                    await self.bot.send_message(user.telegram_id, anniversary_message)
                except Exception as e:
                    logger.error(f"Failed to send anniversary greeting to user {user.telegram_id}: {e}")
            
            return True
            
        except Exception as e:
            logger.error(f"Error sending anniversary notification for user {user.telegram_id}: {e}")
            return False
    
    async def _award_anniversary_points(self, user: User, years: int, points: int) -> bool:
        """–ù–∞—á–∏—Å–ª–∏—Ç—å T-Points –∑–∞ —é–±–∏–ª–µ–π —Ä–∞–±–æ—Ç—ã"""
        try:
            # –ù–∞—á–∏—Å–ª—è–µ–º T-Points
            success = await self.transaction_service.add_points(
                user_id=user.telegram_id,
                points=points,
                description=f"–Æ–±–∏–ª–µ–π - {years} –ª–µ—Ç —Ä–∞–±–æ—Ç—ã"
            )
            
            if success:
                logger.info(f"Awarded {points} T-Points to user {user.telegram_id} for {years} years anniversary")
            
            return success
            
        except Exception as e:
            logger.error(f"Error awarding anniversary points to user {user.telegram_id}: {e}")
            return False
    
    # =============================================================================
    # –ü–†–û–í–ï–†–ö–ê –û–°–¢–ê–¢–ö–û–í –¢–û–í–ê–†–û–í
    # =============================================================================
    
    async def check_low_stock(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        results = {
            'stock_notifications_sent': 0,
            'low_stock_products': 0,
            'errors': []
        }
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤
            stock_settings = await self.get_event_settings('stock_low')
            if not stock_settings or not stock_settings.is_enabled:
                logger.info("Stock notifications are disabled")
                return results
            
            # –ü–æ–ª—É—á–∞–µ–º HR –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
            hr_users = await self._get_hr_users_for_notifications('stock')
            if not hr_users:
                logger.info("No HR users enabled for stock notifications")
                return results
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
            products = await self.repository.get_all_active_products()
            
            low_stock_items = []
            
            for product in products:
                total_stock = product.total_stock
                
                if total_stock <= stock_settings.stock_threshold:
                    low_stock_items.append({
                        'name': product.name,
                        'stock': total_stock,
                        'id': product.id
                    })
                    results['low_stock_products'] += 1
            
            if low_stock_items:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ HR
                message = self._format_stock_notification(low_stock_items, stock_settings.stock_threshold)
                
                for hr_user in hr_users:
                    try:
                        await self.bot.send_message(hr_user.telegram_id, message)
                        results['stock_notifications_sent'] += 1
                    except Exception as e:
                        logger.error(f"Failed to send stock notification to HR {hr_user.telegram_id}: {e}")
            
            logger.info(f"Stock check completed: {results}")
            return results
            
        except Exception as e:
            error_msg = f"Error in stock check: {e}"
            logger.error(error_msg)
            results['errors'].append(error_msg)
            return results
    
    def _format_stock_notification(self, low_stock_items: List[Dict], threshold: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö"""
        message = f"üì¶ <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n"
        message += f"‚ö†Ô∏è –¢–æ–≤–∞—Ä—ã —Å –æ—Å—Ç–∞—Ç–∫–æ–º ‚â§ {threshold} —à—Ç.:\n\n"
        
        for i, item in enumerate(low_stock_items[:10], 1):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 —Ç–æ–≤–∞—Ä–æ–≤
            message += f"{i}. <b>{item['name']}</b>\n   üìä –û—Å—Ç–∞—Ç–æ–∫: {item['stock']} —à—Ç.\n\n"
        
        if len(low_stock_items) > 10:
            message += f"... –∏ –µ—â—ë {len(low_stock_items) - 10} —Ç–æ–≤–∞—Ä–æ–≤\n\n"
        
        message += "üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø–∞—Å—ã"
        
        return message
    
    # =============================================================================
    # –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
    # =============================================================================
    
    async def _get_hr_users_for_notifications(self, event_type: str) -> List[User]:
        """–ü–æ–ª—É—á–∏—Ç—å HR –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –¥–ª—è —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è"""
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö HR –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        hr_users = await self.get_all_hr_users()
        
        if event_type == 'birthday':
            enabled_field = 'birthday_enabled'
        elif event_type == 'anniversary':
            enabled_field = 'anniversary_enabled'
        elif event_type == 'stock':
            enabled_field = 'stock_enabled'
        else:
            return hr_users  # –ï—Å–ª–∏ —Ç–∏–ø –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ—Ö HR
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º HR –ø–æ –∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
        enabled_hr_users = []
        for hr_user in hr_users:
            preferences = await self.get_admin_preferences(hr_user.telegram_id)
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –í–´–ö–õ–Æ–ß–ï–ù–´ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            if getattr(preferences, enabled_field, False):
                enabled_hr_users.append(hr_user)
        
        return enabled_hr_users
    
    def _parse_notification_days(self, days_string: str) -> List[int]:
        """–ü–∞—Ä—Å–∏—Ç—å —Å—Ç—Ä–æ–∫—É –¥–Ω–µ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª"""
        try:
            return [int(day.strip()) for day in days_string.split(',') if day.strip()]
        except (ValueError, AttributeError):
            return [0]  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–æ–ª—å–∫–æ –≤ –¥–µ–Ω—å —Å–æ–±—ã—Ç–∏—è
    
    def _days_until_birthday(self, birth_date: date, today: date) -> int:
        """–í—ã—á–∏—Å–ª–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è"""
        # –°–æ–∑–¥–∞—ë–º –¥–∞—Ç—É –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —ç—Ç–æ–º –≥–æ–¥—É
        this_year_birthday = birth_date.replace(year=today.year)
        
        # –ï—Å–ª–∏ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É–∂–µ –ø—Ä–æ—à—ë–ª –≤ —ç—Ç–æ–º –≥–æ–¥—É, –±–µ—Ä—ë–º —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥
        if this_year_birthday < today:
            this_year_birthday = birth_date.replace(year=today.year + 1)
        
        return (this_year_birthday - today).days
    
    def _calculate_anniversary(self, hire_date: date, today: date) -> tuple[int, int]:
        """–í—ã—á–∏—Å–ª–∏—Ç—å –≥–æ–¥—ã —Ä–∞–±–æ—Ç—ã –∏ –¥–Ω–∏ –¥–æ —é–±–∏–ª–µ—è"""
        # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–ª–Ω—ã–µ –≥–æ–¥—ã —Ä–∞–±–æ—Ç—ã 
        years_worked = today.year - hire_date.year
        
        # –°–æ–∑–¥–∞—ë–º –¥–∞—Ç—É —é–±–∏–ª–µ—è –≤ —ç—Ç–æ–º –≥–æ–¥—É
        try:
            this_year_anniversary = hire_date.replace(year=today.year)
        except ValueError:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π 29 —Ñ–µ–≤—Ä–∞–ª—è
            this_year_anniversary = hire_date.replace(year=today.year, day=28)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ—á–Ω—ã–µ –≥–æ–¥—ã —Ä–∞–±–æ—Ç—ã —É—á–∏—Ç—ã–≤–∞—è –¥–∞—Ç—É –∏ –º–µ—Å—è—Ü
        if this_year_anniversary <= today:
            # –Æ–±–∏–ª–µ–π —É–∂–µ –Ω–∞—Å—Ç—É–ø–∏–ª –≤ —ç—Ç–æ–º –≥–æ–¥—É
            current_years = years_worked
            days_until = 0 if this_year_anniversary == today else 0
            
            # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –¥–µ–Ω—å —é–±–∏–ª–µ—è, —Å—á–∏—Ç–∞–µ–º –¥–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ
            if this_year_anniversary < today:
                try:
                    next_anniversary = hire_date.replace(year=today.year + 1)
                except ValueError:
                    next_anniversary = hire_date.replace(year=today.year + 1, day=28)
                days_until = (next_anniversary - today).days
        else:
            # –Æ–±–∏–ª–µ–π –µ—â—ë –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª –≤ —ç—Ç–æ–º –≥–æ–¥—É
            current_years = years_worked - 1 if years_worked > 0 else 0
            days_until = (this_year_anniversary - today).days
        
        return current_years, days_until
    
    # =============================================================================
    # –ú–ï–¢–û–î–´ –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
    # =============================================================================
    
    async def test_birthday_notification(self, user_id: int) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–Ω–µ —Ä–æ–∂–¥–µ–Ω–∏—è"""
        try:
            user = await self.repository.get_user_by_id(user_id)
            if not user:
                return False
            
            settings = await self.get_event_settings('birthday')
            if not settings:
                return False
            
            return await self._send_birthday_notification(user, 0, settings)
            
        except Exception as e:
            logger.error(f"Error sending test birthday notification: {e}")
            return False
    
    async def test_anniversary_notification(self, user_id: int, years: int = 1) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —é–±–∏–ª–µ–µ"""
        try:
            user = await self.repository.get_user_by_id(user_id)
            if not user:
                return False
            
            settings = await self.get_event_settings('anniversary')
            if not settings:
                return False
            
            return await self._send_anniversary_notification(user, years, 0, settings)
            
        except Exception as e:
            logger.error(f"Error sending test anniversary notification: {e}")
            return False
    
    async def test_stock_notification(self) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö"""
        try:
            test_items = [
                {'name': '–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä 1', 'stock': 2, 'id': 999},
                {'name': '–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä 2', 'stock': 1, 'id': 998}
            ]
            
            settings = await self.get_event_settings('stock_low')
            if not settings:
                return False
            
            hr_users = await self._get_hr_users_for_notifications('stock')
            if not hr_users:
                return False
            
            message = self._format_stock_notification(test_items, settings.stock_threshold)
            message = f"üß™ <b>–¢–ï–°–¢–û–í–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï</b>\n\n{message}"
            
            for hr_user in hr_users:
                try:
                    await self.bot.send_message(hr_user.telegram_id, message)
                except Exception as e:
                    logger.error(f"Failed to send test stock notification to HR {hr_user.telegram_id}: {e}")
            
            return True
            
        except Exception as e:
            logger.error(f"Error sending test stock notification: {e}")
            return False
    
    # =============================================================================
    # –û–¢–ß–ï–¢–´ –î–õ–Ø HR
    # =============================================================================
    
    async def get_birthdays_report(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç –æ –±–ª–∏–∂–∞–π—à–∏—Ö –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è"""
        try:
            users = await self.repository.get_users_with_birthdays()
            today = date.today()
            upcoming_birthdays = []
            
            for user in users:
                if not user.birth_date:
                    continue
                    
                days_until = self._days_until_birthday(user.birth_date, today)
                
                if days_until <= 30:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 30 –¥–Ω–µ–π
                    upcoming_birthdays.append((user, days_until))
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –¥–Ω–µ–π
            upcoming_birthdays.sort(key=lambda x: x[1])
            
            return {'upcoming_birthdays': upcoming_birthdays}
            
        except Exception as e:
            logger.error(f"Error getting birthdays report: {e}")
            return {'upcoming_birthdays': [], 'errors': [str(e)]}
    
    async def get_anniversaries_report(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç –æ –±–ª–∏–∂–∞–π—à–∏—Ö –≥–æ–¥–æ–≤—â–∏–Ω–∞—Ö"""
        try:
            users = await self.repository.get_users_with_hire_dates()
            today = date.today()
            upcoming_anniversaries = []
            
            for user in users:
                if not user.hire_date:
                    continue
                    
                years_worked, days_until = self._calculate_anniversary(user.hire_date, today)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–æ–¥–æ–≤—â–∏–Ω—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π –∏ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 30 –¥–Ω–µ–π
                # –ï—Å–ª–∏ days_until > 300, –∑–Ω–∞—á–∏—Ç –≥–æ–¥–æ–≤—â–∏–Ω–∞ –±—ã–ª–∞ –Ω–µ–¥–∞–≤–Ω–æ (–ø—Ä–æ—à–µ–¥—à–∏–π –≥–æ–¥)
                if years_worked >= 1:
                    if days_until <= 30:  # –ë–ª–∏–∂–∞–π—à–∏–µ 30 –¥–Ω–µ–π
                        upcoming_anniversaries.append((user, years_worked, days_until))
                    elif days_until > 335:  # –ë—ã–ª–∞ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π (–ø—Ä–æ—à–µ–¥—à–∏–π –≥–æ–¥: 365-30=335)
                        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–∞–∫ "–¥–Ω–µ–π –Ω–∞–∑–∞–¥"
                        days_ago = 365 - days_until
                        upcoming_anniversaries.append((user, years_worked, -days_ago))
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ—à–µ–¥—à–∏–µ (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ), –ø–æ—Ç–æ–º –±—É–¥—É—â–∏–µ (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ)
            upcoming_anniversaries.sort(key=lambda x: x[2])
            
            return {'upcoming_anniversaries': upcoming_anniversaries}
            
        except Exception as e:
            logger.error(f"Error getting anniversaries report: {e}")
            return {'upcoming_anniversaries': [], 'errors': [str(e)]} 