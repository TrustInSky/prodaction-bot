from sqlalchemy.ext.asyncio import AsyncSession
from ..repositories.user_repository import UserRepository
from ..services.transaction_service import TransactionService
from ..models.models import User, TPointsActivity
from ..core.base import BaseService
from typing import List, Dict, Any, Optional
import pandas as pd
import openpyxl
from openpyxl.styles import PatternFill
from io import BytesIO
import logging
from datetime import datetime, date

logger = logging.getLogger(__name__)

class UserManagerService(BaseService):
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —á–µ—Ä–µ–∑ Excel
    - –≠–∫—Å–ø–æ—Ä—Ç/–∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –æ—Ç–¥–µ–ª–∞–º
    - –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ/—Å–ø–∏—Å–∞–Ω–∏–µ T-Points —á–µ—Ä–µ–∑ Excel
    """
    
    def __init__(self, session: AsyncSession, group_management_service=None, bot=None):
        super().__init__(session)
        self.user_repo = UserRepository(session)
        self.transaction_service = TransactionService(session)
        self.group_management_service = group_management_service
        self.bot = bot
    
    async def export_users_to_excel(self) -> BytesIO:
        """–≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ Excel —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –ø–æ –æ—Ç–¥–µ–ª–∞–º"""
        try:
            users = await self.user_repo.get_all_users()
            logger.info(f"Exporting {len(users)} users to Excel")
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –æ—Ç–¥–µ–ª–∞–º –∏ —Å—Ç–∞—Ç—É—Å—É
            departments = {}
            users_without_department = []
            inactive_users = []
            
            for user in users:
                if not user.is_active:
                    inactive_users.append(user)
                elif user.department and user.department.strip():
                    dept_name = user.department.strip()
                    if dept_name not in departments:
                        departments[dept_name] = []
                    departments[dept_name].append(user)
                else:
                    users_without_department.append(user)
            
            # –°–æ–∑–¥–∞–µ–º Excel
            output = BytesIO()
            with pd.ExcelWriter(output, engine='openpyxl') as writer:
                
                # –õ–∏—Å—Ç—ã –¥–ª—è –æ—Ç–¥–µ–ª–æ–≤
                for dept_name, dept_users in departments.items():
                    self._create_users_sheet(writer, dept_users, dept_name)
                
                # –õ–∏—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –æ—Ç–¥–µ–ª–∞
                if users_without_department:
                    self._create_users_sheet(writer, users_without_department, "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –±–µ–∑ –æ—Ç–¥–µ–ª–∞")
                
                # –õ–∏—Å—Ç –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                if inactive_users:
                    self._create_users_sheet(writer, inactive_users, "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ")
                
                # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
                self._create_users_instructions_sheet(writer)
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                self._format_users_sheets(writer)
            
            output.seek(0)
            return output
            
        except Exception as e:
            logger.error(f"Error exporting users: {e}")
            raise
    
    def _create_users_sheet(self, writer, users: List[User], sheet_name: str):
        """–°–æ–∑–¥–∞–µ—Ç –ª–∏—Å—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        data = []
        for user in users:
            data.append({
                'telegram_id': user.telegram_id,
                'username': user.username or '',
                'fullname': user.fullname,
                'birth_date': user.birth_date.strftime('%Y-%m-%d') if user.birth_date else '',
                'hire_date': user.hire_date.strftime('%Y-%m-%d') if user.hire_date else '',
                'department': user.department or '',
                'is_active': user.is_active,
                'tpoints': user.tpoints
            })
        
        df = pd.DataFrame(data)
        df.to_excel(writer, index=False, sheet_name=sheet_name)
    
    def _create_users_instructions_sheet(self, writer):
        """–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        instructions = [
            ['üìã –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –†–ê–ë–û–¢–ï –° –î–ê–ù–ù–´–ú–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô', ''],
            ['', ''],
            ['üî¥ –í–ê–ñ–ù–û: –ù–ï –ò–ó–ú–ï–ù–Ø–ô–¢–ï telegram_id!', '–≠—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª—é—á'],
            ['', ''],
            ['‚úÖ –ß—Ç–æ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å:', ''],
            ['- fullname', '–ü–æ–ª–Ω–æ–µ –∏–º—è'],
            ['- birth_date', '–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (YYYY-MM-DD)'],
            ['- hire_date', '–î–∞—Ç–∞ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞'],
            ['- department', '–û—Ç–¥–µ–ª'],
            ['- is_active', '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (TRUE/FALSE)'],
            ['', ''],
            ['üî¥ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (–∫—Ä–∞—Å–Ω—ã–µ –µ—Å–ª–∏ –ø—É—Å—Ç—ã–µ):', ''],
            ['- fullname', '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'],
            ['', ''],
            ['‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø–æ–ª—è (–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –ø—É—Å—Ç—ã–µ):', ''],
            ['- birth_date', '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –î–† —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'],
            ['', ''],
            ['üö® –í–ê–ñ–ù–û –ø—Ä–æ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—é (is_active = FALSE):', ''],
            ['- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò —É–¥–∞–ª—ë–Ω –∏–∑ –≥—Ä—É–ø–ø—ã', '–ë–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è HR!'],
            ['- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏', '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏'],
            ['- –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –ë–î', '–í–∏–¥–Ω–æ –≤ –≤–∫–ª–∞–¥–∫–µ "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ"'],
            ['- –ú–æ–∂–Ω–æ —Ä–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ', 'is_active = TRUE, –Ω–æ –Ω—É–∂–Ω–æ –∑–∞–Ω–æ–≤–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É'],
            ['', ''],
            ['‚ö†Ô∏è –ù–ï –∏–∑–º–µ–Ω—è–π—Ç–µ:', ''],
            ['- telegram_id', '–ù–ï –¢–†–û–ì–ê–¢–¨!'],
            ['- username', '–ò–∑ Telegram'],
            ['- tpoints', '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª'],
        ]
        
        df = pd.DataFrame(instructions, columns=['–û–ø–∏—Å–∞–Ω–∏–µ', '–î–µ—Ç–∞–ª–∏'])
        df.to_excel(writer, index=False, sheet_name='üìã –ò–ù–°–¢–†–£–ö–¶–ò–Ø')
    
    def _format_users_sheets(self, writer):
        """–ö—Ä–∞—Å–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π, –∂–µ–ª—Ç–æ–µ - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö"""
        red_fill = PatternFill(start_color="FFCCCC", end_color="FFCCCC", fill_type="solid")
        yellow_fill = PatternFill(start_color="FFFFCC", end_color="FFFFCC", fill_type="solid")
        
        for sheet_name, worksheet in writer.sheets.items():
            if 'üìã –ò–ù–°–¢–†–£–ö–¶–ò–Ø' not in sheet_name and '‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ' not in sheet_name:
                for row in range(2, worksheet.max_row + 1):
                    # fullname (–∫–æ–ª–æ–Ω–∫–∞ C) - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
                    if not worksheet[f'C{row}'].value:
                        worksheet[f'C{row}'].fill = red_fill
                    
                    # birth_date (–∫–æ–ª–æ–Ω–∫–∞ D) - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –ø–æ–ª–µ
                    if not worksheet[f'D{row}'].value:
                        worksheet[f'D{row}'].fill = yellow_fill
    
    async def export_tpoints_template_to_excel(self) -> BytesIO:
        """–≠–∫—Å–ø–æ—Ä—Ç —à–∞–±–ª–æ–Ω–∞ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è T-Points –ø–æ –æ—Ç–¥–µ–ª–∞–º"""
        try:
            users = await self.user_repo.get_all_active_users()
            logger.info(f"Creating T-Points template for {len(users)} users")
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –æ—Ç–¥–µ–ª–∞–º
            departments = {}
            users_without_department = []
            
            for user in users:
                if user.department and user.department.strip():
                    dept_name = user.department.strip()
                    if dept_name not in departments:
                        departments[dept_name] = []
                    departments[dept_name].append(user)
                else:
                    users_without_department.append(user)
            
            # –°–æ–∑–¥–∞–µ–º Excel
            output = BytesIO()
            with pd.ExcelWriter(output, engine='openpyxl') as writer:
                
                # –õ–∏—Å—Ç—ã –¥–ª—è –æ—Ç–¥–µ–ª–æ–≤
                for dept_name, dept_users in departments.items():
                    self._create_tpoints_sheet(writer, dept_users, f"{dept_name} - T-Points")
                
                # –õ–∏—Å—Ç –±–µ–∑ –æ—Ç–¥–µ–ª–∞
                if users_without_department:
                    self._create_tpoints_sheet(writer, users_without_department, "–ë–µ–∑ –æ—Ç–¥–µ–ª–∞ - T-Points")
                
                # –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
                await self._create_tpoints_activities_sheet(writer)
                self._create_tpoints_instructions_sheet(writer)
                self._create_tpoints_examples_sheet(writer)
            
            output.seek(0)
            return output
            
        except Exception as e:
            logger.error(f"Error creating T-Points template: {e}")
            raise
    
    def _create_tpoints_sheet(self, writer, users: List[User], sheet_name: str):
        """–°–æ–∑–¥–∞–µ—Ç –ª–∏—Å—Ç –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è T-Points —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π"""
        data = []
        for user in users:
            data.append({
                'telegram_id': user.telegram_id,
                'username': user.username or '',
                'fullname': user.fullname,
                'current_tpoints': user.tpoints,
                'activity_name': '',  # –ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–¥–ª—è –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è)
                'points_to_add': '',  # –ó–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–ª–∏ –≤—Ä—É—á–Ω—É—é
                'reason': ''  # –ó–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–ª–∏ –≤—Ä—É—á–Ω—É—é
            })
        
        df = pd.DataFrame(data)
        df.to_excel(writer, index=False, sheet_name=sheet_name)
    
    def _create_tpoints_instructions_sheet(self, writer):
        """–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—é T-Points"""
        instructions = [
            ['üí∞ –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –ù–ê–ß–ò–°–õ–ï–ù–ò–Æ T-POINTS', ''],
            ['', ''],
            ['üî¥ –ù–ï –ò–ó–ú–ï–ù–Ø–ô–¢–ï telegram_id, username, fullname!', ''],
            ['', ''],
            ['üìã –ü–æ—Ä—è–¥–æ–∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è:', ''],
            ['1. –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ª–∏—Å—Ç "üéØ –ê–ö–¢–ò–í–ù–û–°–¢–ò"', '–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π'],
            ['2. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–¥–Ω–∏–º –∏–∑ —Å–ø–æ—Å–æ–±–æ–≤:', ''],
            ['', ''],
            ['üéØ –°–ü–û–°–û–ë 1 - –ß–µ—Ä–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:', ''],
            ['- activity_name', '–¢–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ –ª–∏—Å—Ç–∞ –ê–ö–¢–ò–í–ù–û–°–¢–ò'],
            ['- points_to_add', '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å)'],
            ['- reason', '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å)'],
            ['', ''],
            ['‚úèÔ∏è –°–ü–û–°–û–ë 2 - –†—É—á–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ:', ''],
            ['- activity_name', '–û—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º'],
            ['- points_to_add', '+ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è, - –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è'],
            ['- reason', '–ü—Ä–∏—á–∏–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)'],
            ['', ''],
            ['üìù –ü—Ä–∏–º–µ—Ä—ã:', ''],
            ['–•–∞–∫–∞—Ç–æ–Ω + 100 + "–ó–∞ 1 –º–µ—Å—Ç–æ"', '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å + –∏–∑–º–µ–Ω–µ–Ω–∏–µ'],
            ['–ø—É—Å—Ç–æ + 50 + "–ë–æ–Ω—É—Å –∫ –ó–ü"', '–†—É—á–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ'],
            ['–ø—É—Å—Ç–æ + -25 + "–®—Ç—Ä–∞—Ñ"', '–†—É—á–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ'],
            ['–ø—É—Å—Ç–æ + 0 –∏–ª–∏ –ø—É—Å—Ç–æ', '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'],
            ['', ''],
            ['‚ö†Ô∏è –ü—Ä–∞–≤–∏–ª–∞:', ''],
            ['- –ù–∞–∑–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –ª–∏—Å—Ç–µ', ''],
            ['- –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞–π—Ç–µ reason', ''],
            ['- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', ''],
            ['- –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è', ''],
        ]
        
        df = pd.DataFrame(instructions, columns=['–û–ø–∏—Å–∞–Ω–∏–µ', '–î–µ—Ç–∞–ª–∏'])
        df.to_excel(writer, index=False, sheet_name='üí∞ –ò–ù–°–¢–†–£–ö–¶–ò–Ø')
    
    def _create_tpoints_examples_sheet(self, writer):
        """–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è T-Points"""
        examples = [
            {
                'telegram_id': 123456789,
                'username': 'john_doe',
                'fullname': '–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á',
                'current_tpoints': 150,
                'activity_name': '–•–∞–∫–∞—Ç–æ–Ω',
                'points_to_add': 100,
                'reason': '–ó–∞ 1 –º–µ—Å—Ç–æ –≤ —Ö–∞–∫–∞—Ç–æ–Ω–µ'
            },
            {
                'telegram_id': 987654321,
                'username': 'jane_smith', 
                'fullname': '–ü–µ—Ç—Ä–æ–≤–∞ –ê–Ω–Ω–∞ –°–µ—Ä–≥–µ–µ–≤–Ω–∞',
                'current_tpoints': 75,
                'activity_name': '–¢–∏–º–±–∏–ª–¥–∏–Ω–≥',
                'points_to_add': 25,
                'reason': '–£—á–∞—Å—Ç–∏–µ –≤ –∫–æ–º–∞–Ω–¥–Ω–æ–º –∫–≤–µ—Å—Ç–µ'
            },
            {
                'telegram_id': 555666777,
                'username': 'mike_brown',
                'fullname': '–°–∏–¥–æ—Ä–æ–≤ –ú–∏—Ö–∞–∏–ª –ü–µ—Ç—Ä–æ–≤–∏—á',
                'current_tpoints': 200,
                'activity_name': '',
                'points_to_add': 50,
                'reason': '–ë–æ–Ω—É—Å –∫ –∑–∞—Ä–ø–ª–∞—Ç–µ –∑–∞ –º–µ—Å—è—Ü'
            },
            {
                'telegram_id': 888999000,
                'username': 'anna_white',
                'fullname': '–ö—É–∑–Ω–µ—Ü–æ–≤–∞ –ê–Ω–Ω–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞',
                'current_tpoints': 120,
                'activity_name': '',
                'points_to_add': -30,
                'reason': '–®—Ç—Ä–∞—Ñ –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –¥—Ä–µ—Å—Å-–∫–æ–¥–∞'
            }
        ]
        
        df = pd.DataFrame(examples)
        df.to_excel(writer, index=False, sheet_name='üìù –ü–†–ò–ú–ï–†–´')
    
    async def preview_tpoints_changes(self, file_content: bytes) -> Dict[str, Any]:
        """–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π T-Points"""
        try:
            excel_file = BytesIO(file_content)
            xls = pd.ExcelFile(excel_file)
            
            summary = {
                'total_operations': 0,
                'total_points_add': 0,
                'total_points_remove': 0,
                'operations': [],
                'errors': []
            }
            
            for sheet_name in xls.sheet_names:
                if any(keyword in sheet_name for keyword in ['–ò–ù–°–¢–†–£–ö–¶–ò–Ø', '–ü–†–ò–ú–ï–†–´', '–ê–ö–¢–ò–í–ù–û–°–¢–ò']):
                    continue
                    
                df = pd.read_excel(excel_file, sheet_name=sheet_name)
                
                for index, row in df.iterrows():
                    try:
                        telegram_id = int(row['telegram_id'])
                        activity_name = row.get('activity_name', '')
                        points_to_add = row.get('points_to_add', '')
                        reason = row.get('reason', '')
                        
                        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –ø–æ–ª—É—á–∞–µ–º –µ—ë –¥–∞–Ω–Ω—ã–µ
                        if activity_name and not pd.isna(activity_name) and str(activity_name).strip():
                            activity = await self._get_activity_by_name(str(activity_name).strip())
                            if activity:
                                # –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø–æ–ª—è –ø—É—Å—Ç—ã–µ
                                if pd.isna(points_to_add) or points_to_add == '':
                                    points_to_add = activity.points
                                if pd.isna(reason) or str(reason).strip() == '':
                                    reason = f"–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –∑–∞: {activity.name}"
                            else:
                                summary['errors'].append(f"–°—Ç—Ä–æ–∫–∞ {index+1} –≤ {sheet_name}: –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å '{activity_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                                continue
                        
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
                        if pd.isna(points_to_add) or points_to_add == '' or points_to_add == 0:
                            continue
                        
                        points_to_add = int(float(points_to_add))
                        
                        if not reason or pd.isna(reason) or str(reason).strip() == '':
                            summary['errors'].append(f"–°—Ç—Ä–æ–∫–∞ {index+1} –≤ {sheet_name}: –Ω–µ—Ç –ø—Ä–∏—á–∏–Ω—ã")
                            continue
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        user = await self.user_repo.get_user_by_telegram_id(telegram_id)
                        if not user:
                            summary['errors'].append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                            continue
                        
                        operation = {
                            'telegram_id': telegram_id,
                            'username': user.username,
                            'fullname': user.fullname,
                            'current_points': user.tpoints,
                            'points_change': points_to_add,
                            'new_points': user.tpoints + points_to_add,
                            'reason': str(reason).strip(),
                            'activity_name': str(activity_name).strip() if activity_name and not pd.isna(activity_name) else None,
                            'type': '–Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ' if points_to_add > 0 else '—Å–ø–∏—Å–∞–Ω–∏–µ'
                        }
                        
                        summary['operations'].append(operation)
                        summary['total_operations'] += 1
                        
                        if points_to_add > 0:
                            summary['total_points_add'] += points_to_add
                        else:
                            summary['total_points_remove'] += abs(points_to_add)
                            
                    except Exception as e:
                        summary['errors'].append(f"–û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ {index+1}: {str(e)}")
            
            return summary
            
        except Exception as e:
            logger.error(f"Error previewing T-Points: {e}")
            raise
    
    async def apply_tpoints_changes(self, file_content: bytes, bot=None) -> Dict[str, Any]:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è T-Points —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
        try:
            # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
            summary = await self.preview_tpoints_changes(file_content)
            
            if not summary['operations']:
                return {
                    'success': True,
                    'message': '–û–ø–µ—Ä–∞—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
                    'applied': 0
                }
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
            applied = 0
            successful_ops = []
            
            for operation in summary['operations']:
                try:
                    telegram_id = operation['telegram_id']
                    points_change = operation['points_change']
                    reason = operation['reason']
                    
                    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                    activity_name = operation.get('activity_name')
                    
                    if activity_name:
                        # –ï—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è —Å–≤—è–∑–∞–Ω–∞ —Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
                        activity = await self._get_activity_by_name(activity_name)
                        if activity and points_change > 0:
                            success = await self.transaction_service.create_activity_transaction(
                                user_id=telegram_id,
                                activity_id=activity.id,
                                points=points_change,
                                description=reason
                            )
                        else:
                            # –û–±—ã—á–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è, –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —ç—Ç–æ —Å–ø–∏—Å–∞–Ω–∏–µ
                            if points_change > 0:
                                success = await self.transaction_service.add_points(
                                    user_id=telegram_id,
                                    points=points_change,
                                    description=reason
                                )
                            else:
                                success = await self.transaction_service.remove_points(
                                    user_id=telegram_id,
                                    points=abs(points_change),
                                    description=reason
                                )
                    else:
                        # –†—É—á–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è/—Å–ø–∏—Å–∞–Ω–∏—è
                        if points_change > 0:
                            success = await self.transaction_service.add_points(
                                user_id=telegram_id,
                                points=points_change,
                                description=reason
                            )
                        else:
                            success = await self.transaction_service.remove_points(
                                user_id=telegram_id,
                                points=abs(points_change),
                                description=reason
                            )
                    
                    if success:
                        applied += 1
                        successful_ops.append(operation)
                        
                        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        if bot:
                            await self._send_tpoints_notification(bot, operation)
                            
                except Exception as e:
                    logger.error(f"Error applying T-Points for {operation['telegram_id']}: {e}")
            
            return {
                'success': True,
                'message': f'–í—ã–ø–æ–ª–Ω–µ–Ω–æ {applied} –æ–ø–µ—Ä–∞—Ü–∏–π T-Points',
                'applied': applied,
                'operations': successful_ops
            }
            
        except Exception as e:
            logger.error(f"Error applying T-Points: {e}")
            return {
                'success': False,
                'message': f'–û—à–∏–±–∫–∞: {str(e)}',
                'applied': 0
            }
    
    async def _send_tpoints_notification(self, bot, operation: Dict[str, Any]):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏/—Å–ø–∏—Å–∞–Ω–∏–∏ T-Points"""
        try:
            telegram_id = operation['telegram_id']
            points_change = operation['points_change']
            reason = operation['reason']
            new_points = operation['new_points']
            
            if points_change > 0:
                emoji = "üí∞"
                action = "–Ω–∞—á–∏—Å–ª–µ–Ω–æ"
                points_text = f"+{points_change}"
            else:
                emoji = "üí∏"
                action = "—Å–ø–∏—Å–∞–Ω–æ"
                points_text = f"{points_change}"
            
            message = (
                f"{emoji} T-Points {action}!\n\n"
                f"üíé –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {points_text} T-Points\n"
                f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_points} T-Points"
            )
            
            await bot.send_message(chat_id=telegram_id, text=message)
            
        except Exception as e:
            logger.error(f"Error sending notification to {operation['telegram_id']}: {e}")
    
    async def _get_activity_by_name(self, activity_name: str) -> Optional['TPointsActivity']:
        """–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
        try:
            from ..services.tpoints_activity_service import TPointsActivityService
            activity_service = TPointsActivityService(self.session)
            activities = await activity_service.get_all_activities_full()
            
            for activity in activities:
                if activity.is_active and activity.name.strip().lower() == activity_name.lower():
                    return activity
            return None
        except Exception as e:
            logger.error(f"Error getting activity by name '{activity_name}': {e}")
            return None
    
    async def collect_user_onboarding_data(self, telegram_id: int, fullname: str, 
                                         birth_date: Optional[date] = None,
                                         hire_date: Optional[date] = None,
                                         department: Optional[str] = None) -> bool:
        """–°–±–æ—Ä –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await self.user_repo.get_user_by_telegram_id(telegram_id)
            if not user:
                logger.error(f"User {telegram_id} not found for onboarding")
                return False
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            update_data = {}
            
            if birth_date:
                update_data['birth_date'] = birth_date
            
            if hire_date:
                update_data['hire_date'] = hire_date
                
            if department and department.strip():
                update_data['department'] = department.strip()
            
            if update_data:
                await self.user_repo.update_user_data(telegram_id, update_data)
                logger.info(f"Updated onboarding data for user {telegram_id}")
            
            return True
            
        except Exception as e:
            logger.error(f"Error collecting onboarding data for user {telegram_id}: {e}")
            return False

    async def preview_users_import(self, file_content: bytes) -> Dict[str, Any]:
        """–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            excel_file = BytesIO(file_content)
            xls = pd.ExcelFile(excel_file)
            
            summary = {
                'total_users': 0,
                'users_to_update': [],
                'errors': [],
                'warnings': []
            }
            
            for sheet_name in xls.sheet_names:
                if 'üìã –ò–ù–°–¢–†–£–ö–¶–ò–Ø' in sheet_name:
                    continue
                    
                df = pd.read_excel(excel_file, sheet_name=sheet_name)
                
                for index, row in df.iterrows():
                    try:
                        telegram_id = int(row['telegram_id'])
                        
                        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        current_user = await self.user_repo.get_user_by_telegram_id(telegram_id)
                        if not current_user:
                            summary['errors'].append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
                            continue
                        
                        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                        changes = {}
                        warnings = []
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º fullname (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ)
                        new_fullname = str(row.get('fullname', '')).strip()
                        if not new_fullname:
                            summary['errors'].append(f"–°—Ç—Ä–æ–∫–∞ {index+1}: fullname –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ")
                            continue
                        if new_fullname != current_user.fullname:
                            changes['fullname'] = {
                                'old': current_user.fullname,
                                'new': new_fullname
                            }
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º birth_date (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ)
                        birth_date_str = str(row.get('birth_date', '')).strip()
                        if not birth_date_str or birth_date_str == 'nan':
                            warnings.append("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞ - –Ω–µ –±—É–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –î–†")
                        else:
                            try:
                                new_birth_date = datetime.strptime(birth_date_str, '%Y-%m-%d').date()
                                current_birth_str = current_user.birth_date.strftime('%Y-%m-%d') if current_user.birth_date else ''
                                if birth_date_str != current_birth_str:
                                    changes['birth_date'] = {
                                        'old': current_birth_str,
                                        'new': birth_date_str
                                    }
                            except ValueError:
                                summary['errors'].append(f"–°—Ç—Ä–æ–∫–∞ {index+1}: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç birth_date (–Ω—É–∂–µ–Ω YYYY-MM-DD)")
                                continue
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º hire_date (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ)
                        hire_date_str = str(row.get('hire_date', '')).strip()
                        if hire_date_str and hire_date_str != 'nan':
                            try:
                                new_hire_date = datetime.strptime(hire_date_str, '%Y-%m-%d').date()
                                current_hire_str = current_user.hire_date.strftime('%Y-%m-%d') if current_user.hire_date else ''
                                if hire_date_str != current_hire_str:
                                    changes['hire_date'] = {
                                        'old': current_hire_str,
                                        'new': hire_date_str
                                    }
                            except ValueError:
                                summary['errors'].append(f"–°—Ç—Ä–æ–∫–∞ {index+1}: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç hire_date")
                                continue
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º department
                        new_department = str(row.get('department', '')).strip()
                        current_department = current_user.department or ''
                        if new_department != current_department:
                            changes['department'] = {
                                'old': current_department,
                                'new': new_department
                            }
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º is_active
                        new_is_active = bool(row.get('is_active', True))
                        if new_is_active != current_user.is_active:
                            changes['is_active'] = {
                                'old': current_user.is_active,
                                'new': new_is_active
                            }
                            if not new_is_active:
                                warnings.append("üö® –î–ï–ê–ö–¢–ò–í–ê–¶–ò–Ø: –î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–¥–∞–ª—ë–Ω –∏–∑ –≥—Ä—É–ø–ø—ã!")
                        
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ø—ã—Ç–∫–∏ –∏–∑–º–µ–Ω–∏—Ç—å tpoints
                        if 'tpoints' in row and not pd.isna(row['tpoints']):
                            new_tpoints = int(row['tpoints'])
                            if new_tpoints != current_user.tpoints:
                                warnings.append("–ò–∑–º–µ–Ω–µ–Ω–∏–µ T-Points –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª)")
                        
                        # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        if changes:
                            user_update = {
                                'telegram_id': telegram_id,
                                'username': current_user.username,
                                'fullname': current_user.fullname,
                                'changes': changes,
                                'warnings': warnings
                            }
                            summary['users_to_update'].append(user_update)
                            summary['total_users'] += 1
                            
                    except Exception as e:
                        summary['errors'].append(f"–û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ {index+1}: {str(e)}")
            
            return summary
            
        except Exception as e:
            logger.error(f"Error previewing users import: {e}")
            raise
    
    async def import_users_from_excel(self, file_content: bytes) -> Dict[str, Any]:
        """–ò–º–ø–æ—Ä—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Excel"""
        try:
            # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
            preview = await self.preview_users_import(file_content)
            
            if not preview['users_to_update']:
                return {
                    'success': True,
                    'message': '–ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
                    'updated': 0
                }
            
            if preview['errors']:
                return {
                    'success': False,
                    'message': f'–ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏: {len(preview["errors"])}',
                    'errors': preview['errors'],
                    'updated': 0
                }
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            updated = 0
            deactivated_users = []
            successful_updates = []
            
            for user_update in preview['users_to_update']:
                try:
                    telegram_id = user_update['telegram_id']
                    changes = user_update['changes']
                    
                    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    update_data = {}
                    
                    for field, change in changes.items():
                        if field == 'birth_date':
                            update_data[field] = datetime.strptime(change['new'], '%Y-%m-%d').date()
                        elif field == 'hire_date' and change['new']:
                            update_data[field] = datetime.strptime(change['new'], '%Y-%m-%d').date()
                        else:
                            update_data[field] = change['new']
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    success = await self.user_repo.update_user_data(telegram_id, update_data)
                    
                    if success:
                        updated += 1
                        successful_updates.append({
                            'telegram_id': telegram_id,
                            'changes': changes
                        })
                        
                        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏
                        if 'is_active' in changes and not changes['is_active']['new']:
                            user = await self.user_repo.get_user_by_telegram_id(telegram_id)
                            logger.warning(f"üö® USER DEACTIVATED: {user.fullname} (ID: {telegram_id}) - –£–î–ê–õ–Ø–ï–ú –ò–ó –ì–†–£–ü–ü–´!")
                            deactivated_users.append({
                                'telegram_id': telegram_id,
                                'fullname': user.fullname,
                                'username': user.username
                            })
                            
                            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã
                            if self.group_management_service and self.bot:
                                try:
                                    removal_success = await self.group_management_service.remove_user_from_group(
                                        bot=self.bot,
                                        user_id=telegram_id,
                                        reason=f"–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è —á–µ—Ä–µ–∑ Excel: {user.fullname}"
                                    )
                                    
                                    if removal_success:
                                        logger.warning(f"‚úÖ USER REMOVED FROM GROUP: {user.fullname} (ID: {telegram_id})")
                                        
                                        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                                        await self.group_management_service.notify_user_about_removal(
                                            bot=self.bot,
                                            user_id=telegram_id,
                                            reason="–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ HR-—Å–∏—Å—Ç–µ–º—É"
                                        )
                                    else:
                                        logger.error(f"‚ùå FAILED to remove user {telegram_id} from group")
                                        
                                except Exception as group_error:
                                    logger.error(f"Error removing user {telegram_id} from group: {group_error}")
                            else:
                                logger.warning(f"‚ö†Ô∏è Group management not configured - manual removal required for {telegram_id}")
                        
                        logger.info(f"Updated user {telegram_id}: {list(changes.keys())}")
                        
                except Exception as e:
                    logger.error(f"Error updating user {user_update['telegram_id']}: {e}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            message = f'–û–±–Ω–æ–≤–ª–µ–Ω–æ {updated} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
            if deactivated_users:
                deactivated_names = [user['fullname'] for user in deactivated_users]
                message += f'\n\nüö® –î–ï–ê–ö–¢–ò–í–ò–†–û–í–ê–ù–´ (—É–¥–∞–ª–∏—Ç—å –∏–∑ –≥—Ä—É–ø–ø—ã): {", ".join(deactivated_names)}'
            
            return {
                'success': True,
                'message': message,
                'updated': updated,
                'deactivated_users': deactivated_users,
                'updates': successful_updates
            }
            
        except Exception as e:
            logger.error(f"Error importing users: {e}")
            return {
                'success': False,
                'message': f'–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {str(e)}',
                'updated': 0
            }

    async def export_tpoints_journal_to_excel(self, days: int = 30) -> BytesIO:
        """–≠–∫—Å–ø–æ—Ä—Ç –∂—É—Ä–Ω–∞–ª–∞ T-Points –æ–ø–µ—Ä–∞—Ü–∏–π –≤ Excel —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –ø–æ –æ—Ç–¥–µ–ª–∞–º"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
            from datetime import datetime, timedelta
            since_date = datetime.utcnow() - timedelta(days=days)
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
            transactions = await self.transaction_service.billing_repo.get_transactions_since_date(since_date)
            logger.info(f"Exporting {len(transactions)} T-Points transactions to Excel")
            
            if not transactions:
                # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
                return await self._create_empty_journal_excel()
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –æ—Ç–¥–µ–ª–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            departments = {}
            transactions_without_department = []
            
            for transaction in transactions:
                user = await self.user_repo.get_user_by_telegram_id(transaction.user_id)
                if not user:
                    continue
                    
                if user.department and user.department.strip():
                    dept_name = user.department.strip()
                    if dept_name not in departments:
                        departments[dept_name] = []
                    departments[dept_name].append((transaction, user))
                else:
                    transactions_without_department.append((transaction, user))
            
            # –°–æ–∑–¥–∞–µ–º Excel
            output = BytesIO()
            with pd.ExcelWriter(output, engine='openpyxl') as writer:
                
                # –õ–∏—Å—Ç—ã –¥–ª—è –æ—Ç–¥–µ–ª–æ–≤
                for dept_name, dept_transactions in departments.items():
                    self._create_journal_sheet(writer, dept_transactions, f"{dept_name} - –û–ø–µ—Ä–∞—Ü–∏–∏")
                
                # –õ–∏—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –æ—Ç–¥–µ–ª–∞
                if transactions_without_department:
                    self._create_journal_sheet(writer, transactions_without_department, "–ë–µ–∑ –æ—Ç–¥–µ–ª–∞ - –û–ø–µ—Ä–∞—Ü–∏–∏")
                
                # –°–≤–æ–¥–Ω—ã–π –ª–∏—Å—Ç
                self._create_journal_summary_sheet(writer, transactions)
                
                # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
                self._create_journal_instructions_sheet(writer)
            
            output.seek(0)
            return output
            
        except Exception as e:
            logger.error(f"Error exporting T-Points journal: {e}")
            raise

    async def _create_empty_journal_excel(self) -> BytesIO:
        """–°–æ–∑–¥–∞–µ—Ç –ø—É—Å—Ç–æ–π Excel —Ñ–∞–π–ª –∂—É—Ä–Ω–∞–ª–∞ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏"""
        output = BytesIO()
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            # –ü—É—Å—Ç–∞—è —Å–≤–æ–¥–∫–∞
            empty_data = pd.DataFrame({
                '–û—Ç–¥–µ–ª': ['–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'],
                '–û–ø–µ—Ä–∞—Ü–∏–π': [0],
                '–ù–∞—á–∏—Å–ª–µ–Ω–æ': [0],
                '–°–ø–∏—Å–∞–Ω–æ': [0],
                '–ë–∞–ª–∞–Ω—Å': [0]
            })
            empty_data.to_excel(writer, index=False, sheet_name='üìä –°–í–û–î–ö–ê')
            
            # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
            self._create_journal_instructions_sheet(writer)
        
        output.seek(0)
        return output

    def _create_journal_sheet(self, writer, dept_transactions: List[tuple], sheet_name: str):
        """–°–æ–∑–¥–∞–µ—Ç –ª–∏—Å—Ç —Å –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ –æ—Ç–¥–µ–ª–∞"""
        data = []
        for transaction, user in dept_transactions:
            data.append({
                'ID': transaction.id,
                '–î–∞—Ç–∞': transaction.created_at.strftime('%Y-%m-%d %H:%M:%S'),
                'Telegram ID': user.telegram_id,
                'Username': user.username or '',
                '–§–ò–û': user.fullname,
                '–û—Ç–¥–µ–ª': user.department or '',
                '–°—É–º–º–∞ T-Points': transaction.points_amount,
                '–¢–∏–ø': '–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ' if transaction.points_amount > 0 else '–°–ø–∏—Å–∞–Ω–∏–µ',
                '–û–ø–∏—Å–∞–Ω–∏–µ': transaction.description,
                '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å': transaction.activity.name if transaction.activity else '',
                '–ü—Ä–æ–¥—É–∫—Ç': transaction.product.name if transaction.product else ''
            })
        
        df = pd.DataFrame(data)
        df.to_excel(writer, index=False, sheet_name=sheet_name)

    def _create_journal_summary_sheet(self, writer, transactions: List):
        """–°–æ–∑–¥–∞–µ—Ç —Å–≤–æ–¥–Ω—ã–π –ª–∏—Å—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–æ –æ—Ç–¥–µ–ª–∞–º"""
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –æ—Ç–¥–µ–ª–∞–º –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        dept_stats = {}
        no_dept_stats = {'operations': 0, 'added': 0, 'removed': 0}
        
        for transaction in transactions:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω —Å relationship
            user = transaction.user if hasattr(transaction, 'user') and transaction.user else None
                
            if not user:
                continue
                
            department = user.department.strip() if user.department else None
            
            if department:
                if department not in dept_stats:
                    dept_stats[department] = {'operations': 0, 'added': 0, 'removed': 0}
                
                dept_stats[department]['operations'] += 1
                if transaction.points_amount > 0:
                    dept_stats[department]['added'] += transaction.points_amount
                else:
                    dept_stats[department]['removed'] += abs(transaction.points_amount)
            else:
                no_dept_stats['operations'] += 1
                if transaction.points_amount > 0:
                    no_dept_stats['added'] += transaction.points_amount
                else:
                    no_dept_stats['removed'] += abs(transaction.points_amount)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–≤–æ–¥–∫–∏
        summary_data = []
        
        for dept_name, stats in dept_stats.items():
            balance = stats['added'] - stats['removed']
            summary_data.append({
                '–û—Ç–¥–µ–ª': dept_name,
                '–û–ø–µ—Ä–∞—Ü–∏–π': stats['operations'],
                '–ù–∞—á–∏—Å–ª–µ–Ω–æ T-Points': stats['added'],
                '–°–ø–∏—Å–∞–Ω–æ T-Points': stats['removed'],
                '–ë–∞–ª–∞–Ω—Å –æ—Ç–¥–µ–ª–∞': balance
            })
        
        if no_dept_stats['operations'] > 0:
            balance = no_dept_stats['added'] - no_dept_stats['removed']
            summary_data.append({
                '–û—Ç–¥–µ–ª': '–ë–µ–∑ –æ—Ç–¥–µ–ª–∞',
                '–û–ø–µ—Ä–∞—Ü–∏–π': no_dept_stats['operations'],
                '–ù–∞—á–∏—Å–ª–µ–Ω–æ T-Points': no_dept_stats['added'],
                '–°–ø–∏—Å–∞–Ω–æ T-Points': no_dept_stats['removed'],
                '–ë–∞–ª–∞–Ω—Å –æ—Ç–¥–µ–ª–∞': balance
            })
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_operations = sum(item['–û–ø–µ—Ä–∞—Ü–∏–π'] for item in summary_data)
        total_added = sum(item['–ù–∞—á–∏—Å–ª–µ–Ω–æ T-Points'] for item in summary_data)
        total_removed = sum(item['–°–ø–∏—Å–∞–Ω–æ T-Points'] for item in summary_data)
        total_balance = total_added - total_removed
        
        summary_data.append({
            '–û—Ç–¥–µ–ª': 'üîπ –ò–¢–û–ì–û',
            '–û–ø–µ—Ä–∞—Ü–∏–π': total_operations,
            '–ù–∞—á–∏—Å–ª–µ–Ω–æ T-Points': total_added,
            '–°–ø–∏—Å–∞–Ω–æ T-Points': total_removed,
            '–ë–∞–ª–∞–Ω—Å –æ—Ç–¥–µ–ª–∞': total_balance
        })
        
        df = pd.DataFrame(summary_data)
        df.to_excel(writer, index=False, sheet_name='üìä –°–í–û–î–ö–ê')

    def _create_journal_instructions_sheet(self, writer):
        """–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∂—É—Ä–Ω–∞–ª—É –æ–ø–µ—Ä–∞—Ü–∏–π"""
        instructions = [
            ['üìä –ñ–£–†–ù–ê–õ T-POINTS –û–ü–ï–†–ê–¶–ò–ô', ''],
            ['', ''],
            ['üìã –û–ø–∏—Å–∞–Ω–∏–µ –ª–∏—Å—Ç–æ–≤:', ''],
            ['‚Ä¢ üìä –°–í–û–î–ö–ê', '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–¥–µ–ª–∞–º'],
            ['‚Ä¢ [–û—Ç–¥–µ–ª] - –û–ø–µ—Ä–∞—Ü–∏–∏', '–î–µ—Ç–∞–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ—Ç–¥–µ–ª–∞'],
            ['‚Ä¢ –ë–µ–∑ –æ—Ç–¥–µ–ª–∞ - –û–ø–µ—Ä–∞—Ü–∏–∏', '–û–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –æ—Ç–¥–µ–ª–∞'],
            ['', ''],
            ['üìä –ü–æ–ª—è –≤ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –ª–∏—Å—Ç–∞—Ö:', ''],
            ['‚Ä¢ ID', '–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –æ–ø–µ—Ä–∞—Ü–∏–∏'],
            ['‚Ä¢ –î–∞—Ç–∞', '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏'],
            ['‚Ä¢ Telegram ID', 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram'],
            ['‚Ä¢ Username', '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram'],
            ['‚Ä¢ –§–ò–û', '–ü–æ–ª–Ω–æ–µ –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞'],
            ['‚Ä¢ –û—Ç–¥–µ–ª', '–û—Ç–¥–µ–ª —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞'],
            ['‚Ä¢ –°—É–º–º–∞ T-Points', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ T-Points (+/-)'],
            ['‚Ä¢ –¢–∏–ø', '–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –∏–ª–∏ –°–ø–∏—Å–∞–Ω–∏–µ'],
            ['‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ', '–ü—Ä–∏—á–∏–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏'],
            ['‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', '–°–≤—è–∑–∞–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–µ—Å–ª–∏ –µ—Å—Ç—å)'],
            ['‚Ä¢ –ü—Ä–æ–¥—É–∫—Ç', '–°–≤—è–∑–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å)'],
            ['', ''],
            ['üí° –ü–æ–ª–µ–∑–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ Excel:', ''],
            ['‚Ä¢ –§–∏–ª—å—Ç—Ä—ã', '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ –¥–∞—Ç–∞–º/—Ç–∏–ø–∞–º'],
            ['‚Ä¢ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞', '–°–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –ø–æ –ª—é–±–æ–º—É –ø–æ–ª—é'],
            ['‚Ä¢ –ü–æ–∏—Å–∫', 'Ctrl+F –¥–ª—è –ø–æ–∏—Å–∫–∞'],
            ['‚Ä¢ –°–≤–æ–¥–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã', '–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É'],
        ]
        
        df = pd.DataFrame(instructions, columns=['–û–ø–∏—Å–∞–Ω–∏–µ', '–î–µ—Ç–∞–ª–∏'])
        df.to_excel(writer, index=False, sheet_name='üìã –ò–ù–°–¢–†–£–ö–¶–ò–Ø')

    async def _create_tpoints_activities_sheet(self, writer):
        """–°–æ–∑–¥–∞–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π T-Points"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            from ..services.tpoints_activity_service import TPointsActivityService
            activity_service = TPointsActivityService(self.session)
            activities = await activity_service.get_all_activities_full()
            
            data = []
            if activities:
                for activity in activities:
                    if activity.is_active:
                        data.append({
                            '–ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏': activity.name,
                            'T-Points': activity.points,
                            '–û–ø–∏—Å–∞–Ω–∏–µ': activity.description or '',
                            '–°—Ç–∞—Ç—É—Å': '–ê–∫—Ç–∏–≤–Ω–∞' if activity.is_active else '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'
                        })
            
            # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
            if not data:
                data = [
                    {'–ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏': '–£—á–∞—Å—Ç–∏–µ –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–µ', 'T-Points': 50, '–û–ø–∏—Å–∞–Ω–∏–µ': '–ó–∞ —É—á–∞—Å—Ç–∏–µ –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏', '–°—Ç–∞—Ç—É—Å': '–ü—Ä–∏–º–µ—Ä'},
                    {'–ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏': '–•–∞–∫–∞—Ç–æ–Ω', 'T-Points': 100, '–û–ø–∏—Å–∞–Ω–∏–µ': '–ó–∞ —É—á–∞—Å—Ç–∏–µ –≤ —Ö–∞–∫–∞—Ç–æ–Ω–µ', '–°—Ç–∞—Ç—É—Å': '–ü—Ä–∏–º–µ—Ä'},
                    {'–ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏': '–û–±—É—á–µ–Ω–∏–µ', 'T-Points': 30, '–û–ø–∏—Å–∞–Ω–∏–µ': '–ó–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –æ–±—É—á–∞—é—â–µ–≥–æ –∫—É—Ä—Å–∞', '–°—Ç–∞—Ç—É—Å': '–ü—Ä–∏–º–µ—Ä'},
                    {'–ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏': '–¢–∏–º–±–∏–ª–¥–∏–Ω–≥', 'T-Points': 25, '–û–ø–∏—Å–∞–Ω–∏–µ': '–ó–∞ —É—á–∞—Å—Ç–∏–µ –≤ –∫–æ–º–∞–Ω–¥–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è—Ö', '–°—Ç–∞—Ç—É—Å': '–ü—Ä–∏–º–µ—Ä'},
                    {'–ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏': '–°–ø–æ—Ä—Ç', 'T-Points': 20, '–û–ø–∏—Å–∞–Ω–∏–µ': '–ó–∞ —É—á–∞—Å—Ç–∏–µ –≤ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö', '–°—Ç–∞—Ç—É—Å': '–ü—Ä–∏–º–µ—Ä'}
                ]
            
            df = pd.DataFrame(data)
            df.to_excel(writer, index=False, sheet_name='üéØ –ê–ö–¢–ò–í–ù–û–°–¢–ò')
            
        except Exception as e:
            logger.error(f"Error creating activities sheet: {e}")
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            data = [
                {'–ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏': '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏', 'T-Points': 0, '–û–ø–∏—Å–∞–Ω–∏–µ': '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', '–°—Ç–∞—Ç—É—Å': '–û—à–∏–±–∫–∞'}
            ]
            df = pd.DataFrame(data)
            df.to_excel(writer, index=False, sheet_name='üéØ –ê–ö–¢–ò–í–ù–û–°–¢–ò')
