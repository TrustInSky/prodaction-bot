from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
import logging
from datetime import datetime
import math

from ..services.order import OrderService
from ..repositories.status_repository import StatusRepository
from ..services.status_service import StatusService
from ..utils.message_editor import update_message
from ..utils.callback_helpers import safe_callback_answer
from .keyboards.user_order_keyboards import (
    get_user_orders_keyboard,
    get_order_detail_keyboard,
    get_order_cancel_confirmation_keyboard
)


logger = logging.getLogger(__name__)

user_orders_router = Router(name="user_orders")

# –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
from .constants import ORDERS_PER_PAGE

async def _send_hr_cancellation_notification(order, user_id, reason="–û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ HR –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º - –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û: —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥"""
    try:
        from ..middlewares.database import add_pending_notification
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å–ª–µ –∫–æ–º–º–∏—Ç–∞
        notification_data = {
            'order_id': order.id,
            'user_id': user_id,
            'reason': reason
        }
        
        add_pending_notification('order_cancelled_by_user', notification_data)
        logger.info(f"Queued HR cancellation notification for order {order.id} with reason: {reason}")
        
    except Exception as e:
        logger.error(f"Error queuing HR cancellation notification for order {order.id}: {e}")
        raise

@user_orders_router.callback_query(F.data == 'menu:my_orders')
async def show_my_orders(callback: CallbackQuery, order_service: OrderService, status_service: StatusService):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    try:
        user_id = callback.from_user.id
        orders = await order_service.get_user_orders(user_id)
        
        await _show_orders_page(callback, orders, page=1, status_service=status_service)
        
    except Exception as e:
        logger.error(f'Error in show_my_orders: {e}')
        await safe_callback_answer(callback, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤', show_alert=True)

@user_orders_router.callback_query(F.data.startswith('user_orders_page:'))
async def show_orders_page(callback: CallbackQuery, order_service: OrderService, status_service: StatusService):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–∫–∞–∑–æ–≤"""
    try:
        page = int(callback.data.split(':')[1])
        user_id = callback.from_user.id
        orders = await order_service.get_user_orders(user_id)
        
        await _show_orders_page(callback, orders, page, status_service=status_service)
        
    except ValueError:
        await safe_callback_answer(callback, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã', show_alert=True)
    except Exception as e:
        logger.error(f'Error in show_orders_page: {e}')
        await safe_callback_answer(callback, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤', show_alert=True)

async def _show_orders_page(callback: CallbackQuery, orders: list, page: int, status_service: StatusService):
    """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–∫–∞–∑–æ–≤"""
    total_orders = len(orders)
    total_pages = math.ceil(total_orders / ORDERS_PER_PAGE) if total_orders > 0 else 1
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if page < 1:
        page = 1
    elif page > total_pages and total_orders > 0:
        page = total_pages
    
    if not orders:
        text = (
            'üì¶ <b>–ú–æ–∏ –∑–∞–∫–∞–∑—ã</b>\n\n'
            '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.\n\n'
            '–í—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ —Ç–æ–≤–∞—Ä–æ–≤.'
        )
    else:
        text = f'üì¶ <b>–ú–æ–∏ –∑–∞–∫–∞–∑—ã</b> (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages})\n\n'
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        start_idx = (page - 1) * ORDERS_PER_PAGE
        end_idx = min(start_idx + ORDERS_PER_PAGE, total_orders)
        page_orders = orders[start_idx:end_idx]
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –∏–∑ –ë–î –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–∫–∞–∑–æ–≤
        status_codes = list(set(order.status for order in page_orders))
        statuses = await status_service.get_statuses_by_codes(status_codes)
        status_map = {s.code: s for s in statuses}
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∫ –∑–∞–∫–∞–∑–∞–º –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        for order in page_orders:
            status_obj = status_map.get(order.status)
            if status_obj:
                order.status_emoji = status_obj.emoji
        
        for i, order in enumerate(page_orders, start=start_idx + 1):
            status_obj = status_map.get(order.status)
            status_display = status_obj.display_name if status_obj else order.status
            
            text += (
                f'<b>{i}. –ó–∞–∫–∞–∑ #{order.id}</b>\n'
                f'üìä –°—Ç–∞—Ç—É—Å: {status_display}\n'
                f'üíé –°—É–º–º–∞: {order.total_cost:,} T-Points\n'
                f'üìÖ –î–∞—Ç–∞: {order.created_at.strftime("%d.%m.%Y %H:%M")}\n\n'
            )
    
    keyboard = get_user_orders_keyboard(orders, page, total_pages)
    await update_message(callback, text=text, reply_markup=keyboard)
    await safe_callback_answer(callback)

@user_orders_router.callback_query(F.data.startswith('user_order_view:'))
async def view_order_detail(callback: CallbackQuery, order_service: OrderService, status_service: StatusService):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—Ç–º–µ–Ω—ã"""
    try:
        order_id = int(callback.data.split(':')[1])
        user_id = callback.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ —Å –¥–µ—Ç–∞–ª—è–º–∏
        order = await order_service.get_order_by_id(order_id)
        
        if not order:
            await safe_callback_answer(callback, '‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω', show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if order.user_id != user_id:
            await safe_callback_answer(callback, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω', show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏–∑ –ë–î
        status_obj = await status_service.get_status_by_code(order.status)
        status_display = status_obj.display_name if status_obj else order.status
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–∫–∞–∑–∞
        text = (
            f'üì¶ <b>–ó–∞–∫–∞–∑ #{order.id}</b>\n\n'
            f'üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_display}\n'
            f'üìÖ <b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</b> {order.created_at.strftime("%d.%m.%Y %H:%M")}\n'
            f'üíé <b>–û–±—â–∞—è —Å—É–º–º–∞:</b> {order.total_cost:,} T-Points\n\n'
            f'<b>–¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ:</b>\n'
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö
        for item in order.items:
            text += (
                f'‚Ä¢ <b>{item.product.name}</b>\n'
                f'  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item.quantity} —à—Ç.\n'
                f'  –¶–µ–Ω–∞: {item.price:,} T-Points –∑–∞ —à—Ç.\n'
            )
            if item.size:
                text += f'  –†–∞–∑–º–µ—Ä: {item.size}\n'
            text += '\n'
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ —Å—Ç–∞—Ç—É—Å–µ –∏–∑ –ë–î
        if status_obj and status_obj.comment_user:
            text += f'<i>{status_obj.comment_user}</i>'
        
        keyboard = get_order_detail_keyboard(order)
        await update_message(callback, text=text, reply_markup=keyboard)
        await safe_callback_answer(callback)
        
    except ValueError:
        await safe_callback_answer(callback, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–∫–∞–∑–∞', show_alert=True)
    except Exception as e:
        logger.error(f'Error in view_order_detail: {e}')
        await safe_callback_answer(callback, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–∞', show_alert=True)

@user_orders_router.callback_query(F.data.startswith('user_order_cancel:'))
async def cancel_order_confirmation(callback: CallbackQuery, order_service: OrderService):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞"""
    try:
        order_id = int(callback.data.split(':')[1])
        user_id = callback.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑
        order = await order_service.get_order_by_id(order_id)
        
        if not order:
            await safe_callback_answer(callback, '‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω', show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if order.user_id != user_id:
            await safe_callback_answer(callback, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω', show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑
        if order.status in ['delivered', 'cancelled']:
            await safe_callback_answer(callback, '‚ùå –≠—Ç–æ—Ç –∑–∞–∫–∞–∑ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å', show_alert=True)
            return
        
        text = (
            f'‚ùì <b>–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ #{order.id}</b>\n\n'
            f'–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑?\n\n'
            f'üíé <b>–°—É–º–º–∞ –∫ –≤–æ–∑–≤—Ä–∞—Ç—É:</b> {order.total_cost:,} T-Points\n\n'
            f'<i>T-Points –±—É–¥—É—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å,\n'
            f'–∞ —Ç–æ–≤–∞—Ä—ã –≤–µ—Ä–Ω—É—Ç—Å—è –Ω–∞ —Å–∫–ª–∞–¥.</i>'
        )
        
        keyboard = get_order_cancel_confirmation_keyboard(order_id)
        await update_message(callback, text=text, reply_markup=keyboard)
        await safe_callback_answer(callback)
        
    except ValueError:
        await safe_callback_answer(callback, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–∫–∞–∑–∞', show_alert=True)
    except Exception as e:
        logger.error(f'Error in cancel_order_confirmation: {e}')
        await safe_callback_answer(callback, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞', show_alert=True)

@user_orders_router.callback_query(F.data.startswith('user_order_cancel_confirm:'))
async def cancel_order_confirm(callback: CallbackQuery, order_service: OrderService):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ë–ï–ó –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∏—á–∏–Ω—ã"""
    try:
        order_id = int(callback.data.split(':')[1])
        user_id = callback.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        order = await order_service.get_order_by_id(order_id)
        if not order:
            await safe_callback_answer(callback, '‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω', show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if order.user_id != user_id:
            await safe_callback_answer(callback, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω', show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑
        if order.status in ['delivered', 'cancelled']:
            await safe_callback_answer(callback, '‚ùå –≠—Ç–æ—Ç –∑–∞–∫–∞–∑ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å', show_alert=True)
            return
        
        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–∫–∞–∑
        success = await order_service.cancel_order(order_id, user_id)
        
        if success:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏—á–∏–Ω—É —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è HR
            username = callback.from_user.username
            first_name = callback.from_user.first_name or ""
            user_display = f"@{username}" if username else f"{first_name} (ID: {user_id})"
            cancel_reason = f"–û—Ç–º–µ–Ω–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_display}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ HR
            await _send_hr_cancellation_notification(order, user_id, cancel_reason)
            
            await update_message(
                callback,
                text=(
                    f'‚úÖ <b>–ó–∞–∫–∞–∑ #{order_id} –æ—Ç–º–µ–Ω—ë–Ω</b>\n\n'
                    f'üí∞ T-Points –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å\n'
                    f'üì¶ –¢–æ–≤–∞—Ä—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ —Å–∫–ª–∞–¥\n\n'
                    f'–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!'
                ),
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text='üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã', callback_data='menu:my_orders')],
                    [InlineKeyboardButton(text='üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='menu:main')]
                ])
            )
            
            await safe_callback_answer(callback, "‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω")
            logger.info(f'User {user_id} ({user_display}) cancelled order {order_id}')
        else:
            await safe_callback_answer(callback, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞', show_alert=True)
            logger.error(f'Failed to cancel order {order_id} for user {user_id}')
            
    except ValueError:
        await safe_callback_answer(callback, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–∫–∞–∑–∞', show_alert=True)
    except Exception as e:
        logger.error(f'Error in cancel_order_confirm: {e}')
        await safe_callback_answer(callback, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞', show_alert=True)

@user_orders_router.callback_query(F.data == 'noop')
async def handle_noop(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ (–Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã)"""
    await safe_callback_answer(callback)

__all__ = ["user_orders_router"] 