from aiogram import Router, F
from aiogram.types import CallbackQuery
import logging

from ..services.order import OrderService
from ..services.user import UserService
from .keyboards.order_keyboards import (
    get_order_analytics_keyboard,
    get_analytics_details_keyboard
)
from ..utils.message_editor import update_message
from ..utils.callback_helpers import safe_callback_answer
from .utils import check_hr_access

analytics_router = Router()
logger = logging.getLogger(__name__)

@analytics_router.callback_query(F.data == "orders_analytics")
async def show_analytics_menu(callback: CallbackQuery, order_service: OrderService, user_service: UserService):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ –∑–∞–∫–∞–∑–∞–º - —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥: aiogram3-di"""
    await safe_callback_answer(callback)
    
    if not await check_hr_access(user_service, callback.from_user.id):
        await safe_callback_answer(callback, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
        return
    
    await update_message(
        callback,
        text="üìä <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤</b>\n\n"
             "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:",
        reply_markup=get_order_analytics_keyboard()
    )

@analytics_router.callback_query(F.data.startswith("analytics_"))
async def show_analytics_details(callback: CallbackQuery, order_service: OrderService, user_service: UserService):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥: aiogram3-di"""
    await safe_callback_answer(callback)
    
    if not await check_hr_access(user_service, callback.from_user.id):
        await safe_callback_answer(callback, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
        return
    
    try:
        analytics_type = callback.data.split("_")[1]
    except IndexError:
        await safe_callback_answer(callback, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
        return
    
    analytics_handlers = {
        "departments": _show_departments_analytics,
        "top_products": _show_top_products_analytics,
        "top_ambassadors": _show_top_ambassadors_analytics,
        "general": _show_general_analytics
    }
    
    handler = analytics_handlers.get(analytics_type)
    if handler:
        await handler(callback, order_service, analytics_type)
    else:
        await safe_callback_answer(callback, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")

@analytics_router.callback_query(F.data == "back_to_analytics")
async def go_back_to_analytics(callback: CallbackQuery, user_service: UserService):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –º–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ - —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥: aiogram3-di"""
    await safe_callback_answer(callback)
    
    if not await check_hr_access(user_service, callback.from_user.id):
        await safe_callback_answer(callback, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
        return
    
    await update_message(
        callback,
        text="üìä <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤</b>\n\n"
             "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:",
        reply_markup=get_order_analytics_keyboard()
    )

async def _show_departments_analytics(callback: CallbackQuery, order_service: OrderService, analytics_type: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ –æ—Ç–¥–µ–ª–∞–º"""
    try:
        departments_data = await order_service.get_analytics_by_departments()
        
        if not departments_data:
            message_text = "üìä <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –æ—Ç–¥–µ–ª–∞–º</b>\n\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."
        else:
            message_text = "üìä <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –æ—Ç–¥–µ–ª–∞–º</b>\n\n"
            
            total_orders = sum(count for _, count, _ in departments_data)
            total_points = sum(total or 0 for _, _, total in departments_data)
            
            message_text += f"<b>–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>\n"
            message_text += f"üìã –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders}\n"
            message_text += f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {total_points:,} T-Points\n\n"
            message_text += f"<b>–ü–æ –æ—Ç–¥–µ–ª–∞–º:</b>\n"
            
            for i, (dept, count, total) in enumerate(departments_data, 1):
                dept_name = dept or "–ù–µ —É–∫–∞–∑–∞–Ω"
                percentage = (count / total_orders * 100) if total_orders > 0 else 0
                message_text += (
                    f"{i}. <b>{dept_name}</b>\n"
                    f"   üì¶ –ó–∞–∫–∞–∑–æ–≤: {count} ({percentage:.1f}%)\n"
                    f"   üí∞ –°—É–º–º–∞: {total or 0:,} T-Points\n\n"
                )
        
        await update_message(
            callback,
            text=message_text,
            reply_markup=get_analytics_details_keyboard(analytics_type)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ –æ—Ç–¥–µ–ª–∞–º: {e}")
        await safe_callback_answer(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")

async def _show_top_products_analytics(callback: CallbackQuery, order_service: OrderService, analytics_type: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø —Ç–æ–≤–∞—Ä–æ–≤"""
    try:
        products_data = await order_service.get_top_products()
        
        if not products_data:
            message_text = "üìä <b>–¢–æ–ø —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."
        else:
            message_text = "üìä <b>–¢–æ–ø —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n"
            
            total_quantity = sum(quantity for _, quantity, _ in products_data)
            total_revenue = sum(revenue or 0 for _, _, revenue in products_data)
            
            message_text += f"<b>–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>\n"
            message_text += f"üì¶ –í—Å–µ–≥–æ –ø—Ä–æ–¥–∞–Ω–æ: {total_quantity} —à—Ç.\n"
            message_text += f"üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {total_revenue:,} T-Points\n\n"
            message_text += f"<b>–¢–æ–ø —Ç–æ–≤–∞—Ä–æ–≤:</b>\n"
            
            for i, (name, quantity, revenue) in enumerate(products_data, 1):
                percentage = (quantity / total_quantity * 100) if total_quantity > 0 else 0
                avg_price = (revenue / quantity) if quantity > 0 else 0
                
                message_text += (
                    f"{i}. <b>{name}</b>\n"
                    f"   üì¶ –ü—Ä–æ–¥–∞–Ω–æ: {quantity} —à—Ç. ({percentage:.1f}%)\n"
                    f"   üí∞ –í—ã—Ä—É—á–∫–∞: {revenue or 0:,} T-Points\n"
                    f"   üíµ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {avg_price:.0f} T-Points\n\n"
                )
        
        await update_message(
            callback,
            text=message_text,
            reply_markup=get_analytics_details_keyboard(analytics_type)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø —Ç–æ–≤–∞—Ä–æ–≤: {e}")
        await safe_callback_answer(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")

async def _show_top_ambassadors_analytics(callback: CallbackQuery, order_service: OrderService, analytics_type: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–æ–≤ –º–µ—Ä—á–∞"""
    try:
        ambassadors_data = await order_service.get_top_ambassadors()
        
        if not ambassadors_data:
            message_text = "üìä <b>–¢–æ–ø-5 –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–æ–≤ –º–µ—Ä—á–∞</b>\n\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."
        else:
            message_text = "üìä <b>–¢–æ–ø-5 –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–æ–≤ –º–µ—Ä—á–∞</b>\n\n"
            
            total_orders = sum(count for _, _, count, _ in ambassadors_data)
            total_points = sum(total or 0 for _, _, _, total in ambassadors_data)
            
            message_text += f"<b>–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>\n"
            message_text += f"üìã –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders}\n"
            message_text += f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {total_points:,} T-Points\n\n"
            message_text += f"<b>–¢–æ–ø –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–æ–≤:</b>\n"
            
            for i, (name, username, count, total) in enumerate(ambassadors_data, 1):
                username_text = f"(@{username})" if username else "(–±–µ–∑ username)"
                percentage = (count / total_orders * 100) if total_orders > 0 else 0
                avg_order = (total / count) if count > 0 else 0
                
                trophy = ["ü•á", "ü•à", "ü•â"][i-1] if i <= 3 else f"{i}."
                
                message_text += (
                    f"{trophy} <b>{name}</b> {username_text}\n"
                    f"   üì¶ –ó–∞–∫–∞–∑–æ–≤: {count} ({percentage:.1f}%)\n"
                    f"   üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {total or 0:,} T-Points\n"
                    f"   üíµ –°—Ä–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑: {avg_order:.0f} T-Points\n\n"
                )
        
        await update_message(
            callback,
            text=message_text,
            reply_markup=get_analytics_details_keyboard(analytics_type)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–æ–≤: {e}")
        await safe_callback_answer(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")

async def _show_general_analytics(callback: CallbackQuery, order_service: OrderService, analytics_type: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–∫–∞–∑–æ–≤"""
    try:
        general_stats = await order_service.get_general_statistics()
        
        total_orders = sum(general_stats.get(status, 0) for status in 
                          ["pending", "processing", "ready_for_pickup", "delivered", "cancelled"])
        
        delivered_orders = general_stats.get('delivered', 0)
        cancelled_orders = general_stats.get('cancelled', 0)
        active_orders = total_orders - delivered_orders - cancelled_orders
        
        success_rate = (delivered_orders / total_orders * 100) if total_orders > 0 else 0
        cancel_rate = (cancelled_orders / total_orders * 100) if total_orders > 0 else 0
        
        message_text = "üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤</b>\n\n"
            
        message_text += f"<b>–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>\n"
        message_text += f"üìã –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders}\n"
        message_text += f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {delivered_orders} ({success_rate:.1f}%)\n"
        message_text += f"‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ: {cancelled_orders} ({cancel_rate:.1f}%)\n"
        message_text += f"‚è≥ –í —Ä–∞–±–æ—Ç–µ: {active_orders}\n\n"
        
        message_text += f"<b>–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:</b>\n"
        status_names = {
            'pending': 'üìã –û–∂–∏–¥–∞—é—Ç',
            'processing': '‚ö° –í —Ä–∞–±–æ—Ç–µ',
            'ready_for_pickup': 'üì¶ –ì–æ—Ç–æ–≤—ã –∫ –≤—ã–¥–∞—á–µ',
            'delivered': '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω—ã',
            'cancelled': '‚ùå –û—Ç–º–µ–Ω–µ–Ω—ã'
        }
        
        for status, name in status_names.items():
            count = general_stats.get(status, 0)
            percentage = (count / total_orders * 100) if total_orders > 0 else 0
            message_text += f"{name}: {count} ({percentage:.1f}%)\n"
        
        await update_message(
            callback,
            text=message_text,
            reply_markup=get_analytics_details_keyboard(analytics_type)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await safe_callback_answer(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")