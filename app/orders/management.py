from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramBadRequest
import logging

from ..services.order import OrderService
from ..services.user import UserService
from ..services.notifications.order_notifications import OrderNotificationService
from ..repositories.status_repository import StatusRepository
from ..services.status_service import StatusService
from .keyboards.order_keyboards import (
    get_orders_menu_keyboard,
    get_orders_list_keyboard,
    get_order_details_keyboard
)
from ..utils.message_editor import update_message
from ..utils.callback_helpers import safe_callback_answer
from .utils import (
    format_order_details_message
)
from ..middlewares.access_control import HROrAdminAccess


management_router = Router()
logger = logging.getLogger(__name__)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
management_router.callback_query.middleware(HROrAdminAccess())

@management_router.callback_query(F.data == "menu:orders")
async def show_orders_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–∞–∑–¥–µ–ª–∞ –∑–∞–∫–∞–∑–æ–≤ - —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥: aiogram3-di"""
    try:
        await safe_callback_answer(callback)
    except TelegramBadRequest as e:
        if "query is too old" in str(e):
            # –ï—Å–ª–∏ callback —É—Å—Ç–∞—Ä–µ–ª, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –±–µ–∑ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback
            logger.warning("Callback query is too old, proceeding without answering")
        else:
            # –ï—Å–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ - –ª–æ–≥–∏—Ä—É–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è
            logger.error(f"Error answering callback: {e}")
            return
    
    await update_message(
        callback,
        text="üì¶ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏</b>\n\n"
             "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–∫–∞–∑–∞–º–∏:",
        reply_markup=get_orders_menu_keyboard()
    )

@management_router.callback_query(F.data.startswith("orders_status_"))
async def show_orders_by_status(callback: CallbackQuery, order_service: OrderService):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º - —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥: aiogram3-di"""
    await safe_callback_answer(callback)
    
    status = callback.data.split("_")[2]
    await _show_orders_list_by_status(callback, status, order_service)

@management_router.callback_query(F.data.startswith("view_order_"))
async def view_order_details(
    callback: CallbackQuery, 
    order_service: OrderService,
    user_service: UserService,
    status_service: StatusService
):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ - —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥: aiogram3-di"""
    await safe_callback_answer(callback)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–∫–∞–∑–∞ –∏ —Å—Ç–∞—Ç—É—Å —Å–ø–∏—Å–∫–∞ –∏–∑ callback_data
    parts = callback.data.split("_")
    try:
        order_id = int(parts[2])
        status_list = parts[3] if len(parts) > 3 else "all"
    except (IndexError, ValueError):
        await safe_callback_answer(callback, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
    order_details = await order_service.get_order_details(order_id)
    
    if not order_details:
        await safe_callback_answer(callback, "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    order = order_details['order']
    items = order_details['items']
    user = order.user  # user –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ —Å–≤—è–∑—å –≤ –º–æ–¥–µ–ª–∏ Order
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ HR-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –µ—Å–ª–∏ –∑–∞–∫–∞–∑ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
    hr_user = None
    if order.hr_user_id:
        hr_user = await user_service.get_user_by_telegram_id(order.hr_user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏–∑ –ë–î
    status_obj = await status_service.get_status_by_code(order.status)
    status_display = status_obj.display_name if status_obj else order.status
    status_comment = status_obj.comment_hr if status_obj else None
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–∫–∞–∑–∞
    message_text = format_order_details_message(order, user, items, hr_user, status_display, status_comment)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–∫–∞–∑–∞ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    await update_message(
        callback,
        text=message_text,
        reply_markup=get_order_details_keyboard(order_id, order.status, status_list)
    )

@management_router.callback_query(F.data.startswith("update_status_"))
async def update_order_status(callback: CallbackQuery, order_service: OrderService):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ - —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥: aiogram3-di"""
    await safe_callback_answer(callback)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è ready_for_pickup
    # –§–æ—Ä–º–∞—Ç: update_status_{order_id}_{status}_{status_list}
    parts = callback.data.split("_")
    try:
        order_id = int(parts[2])
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ—Å—Ç–∞–≤–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã —Ç–∏–ø–∞ ready_for_pickup
        if len(parts) >= 6 and parts[3] == "ready" and parts[4] == "for" and parts[5] == "pickup":
            status = "ready_for_pickup"
            status_list = parts[6] if len(parts) > 6 else "all"
        else:
            status = parts[3]
            status_list = parts[4] if len(parts) > 4 else "all"
    except (IndexError, ValueError):
        await safe_callback_answer(callback, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –î–û –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
    order = await order_service.order_repo.get_order_with_details(order_id)
    if not order:
        await safe_callback_answer(callback, "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞
    valid_statuses = ['new', 'processing', 'ready_for_pickup', 'delivered', 'cancelled']
    if status not in valid_statuses:
        await safe_callback_answer(callback, f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {status}")
        return
    
    success = await order_service.update_order_status(
        order_id=order_id,
        new_status=status,
        hr_user_id=callback.from_user.id
    )
    
    if success:
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        status_messages = {
            'processing': '‚úÖ –ó–∞–∫–∞–∑ –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É!',
            'ready_for_pickup': 'üì¶ –ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ!',
            'delivered': '‚úÖ –ó–∞–∫–∞–∑ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–¥–∞–Ω–Ω—ã–π!',
            'cancelled': '‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω!'
        }
        success_message = status_messages.get(status, '‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω!')
        
        await safe_callback_answer(callback, success_message)
        
        # –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª
        if status == 'processing':
            # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –∫ –∑–∞–∫–∞–∑—É –≤ —Ä–∞–∑–¥–µ–ª–µ "–í —Ä–∞–±–æ—Ç–µ"
            await _refresh_order_details(callback, order_id, "processing", order_service)
        else:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –¥–µ—Ç–∞–ª—è–º –∑–∞–∫–∞–∑–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
            await _refresh_order_details(callback, order_id, status_list, order_service)
    else:
        await safe_callback_answer(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞.")

@management_router.callback_query(F.data == "back_to_orders_menu")
async def go_back_to_orders_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∑–∞–∫–∞–∑–æ–≤ - —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥: aiogram3-di"""
    await safe_callback_answer(callback)
    
    await update_message(
        callback,
        text="üì¶ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏</b>\n\n"
             "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–∫–∞–∑–∞–º–∏:",
        reply_markup=get_orders_menu_keyboard()
    )

@management_router.callback_query(F.data.startswith("back_to_orders_list_"))
async def go_back_to_orders_list(callback: CallbackQuery, order_service: OrderService):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ - —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥: aiogram3-di"""
    await safe_callback_answer(callback)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏–∑ callback_data
    try:
        status = callback.data.split("_")[4]
    except IndexError:
        await safe_callback_answer(callback, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
        return
    
    await _show_orders_list_by_status(callback, status, order_service)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ menu:my_orders –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –≤ main_router.py –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

async def _show_orders_list_by_status(callback: CallbackQuery, status: str, order_service: OrderService):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å—É"""
    from ..orders.constants import normalize_admin_status
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    normalized_status = normalize_admin_status(status)
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤
    status_titles = {
        'new': '–ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã',
        'processing': '–ó–∞–∫–∞–∑—ã –≤ —Ä–∞–±–æ—Ç–µ',
        'ready_for_pickup': '–ì–æ—Ç–æ–≤—ã –∫ –≤—ã–¥–∞—á–µ',
        'delivered': '–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã',
        'cancelled': '–û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã',
        'all': '–í—Å–µ –∑–∞–∫–∞–∑—ã'
    }
    status_title = status_titles.get(normalized_status, '–ó–∞–∫–∞–∑—ã')
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
    if normalized_status == "all":
        orders = await order_service.get_all_orders()
    else:
        orders = await order_service.get_orders_by_status(normalized_status)
    
    if not orders:
        await update_message(
            callback,
            text=f"üì≠ <b>{status_title}</b>\n\n"
                 f"–í –¥–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.",
            reply_markup=get_orders_menu_keyboard()
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
    await update_message(
        callback,
        text=f"<b>{status_title}</b>\n\n"
             f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {len(orders)}",
        reply_markup=get_orders_list_keyboard(orders, status)
    )

async def _refresh_order_details(
    callback: CallbackQuery, 
    order_id: int, 
    status_list: str, 
    order_service: OrderService
):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
        order = await order_service.order_repo.get_order_with_details(order_id)
        
        if not order:
            await safe_callback_answer(callback, "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        user = order.user
        items = order.items
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ HR-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –µ—Å–ª–∏ –∑–∞–∫–∞–∑ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
        hr_user = None
        if order.hr_user_id:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ order_service –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            # (–º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –∏–Ω–∂–µ–∫—Ç–∏—Ç—å user_service, –Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π)
            pass  # hr_user –æ—Å—Ç–∞–Ω–µ—Ç—Å—è None, –Ω–æ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–∫–∞–∑–∞
        message_text = format_order_details_message(order, user, items, hr_user)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update_message(
            callback,
            text=message_text,
            reply_markup=get_order_details_keyboard(order_id, order.status, status_list)
        )
        
    except Exception as e:
        logger.error(f"Error refreshing order details: {e}")
        await safe_callback_answer(callback, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ")