from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import logging

from ..services.order import OrderService
from ..services.user import UserService
from ..services.notifications.order_notifications import OrderNotificationService
from .keyboards.order_keyboards import get_order_details_keyboard
from ..utils.message_editor import update_message
from ..utils.callback_helpers import safe_callback_answer
from .utils import (
    check_hr_access,
    format_order_details_message
)

notifications_router = Router(name="notifications_handlers")
logger = logging.getLogger(__name__)

@notifications_router.callback_query(F.data.startswith("hr_acknowledge_cancel:"))
async def hr_acknowledge_cancellation(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ' –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞"""
    try:
        order_id = int(callback.data.split(":")[1])
        
        # –ü—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        await callback.message.delete()
        await safe_callback_answer(callback, "‚úÖ –û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–µ")
        
        logger.info(f"HR user {callback.from_user.id} acknowledged cancellation of order {order_id}")
        
    except ValueError:
        await safe_callback_answer(callback, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–∫–∞–∑–∞", show_alert=True)
    except Exception as e:
        logger.error(f"Error in hr_acknowledge_cancellation: {e}")
        await safe_callback_answer(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

class CancelOrderStates(StatesGroup):
    waiting_for_reason = State()

@notifications_router.callback_query(F.data.startswith("order_accept_"))
async def process_order_accept(
    callback: CallbackQuery, 
    order_service: OrderService,
    user_service: UserService,
    notification_service: OrderNotificationService
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑' –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥: aiogram3-di"""
    await safe_callback_answer(callback)
    
    if not await check_hr_access(user_service, callback.from_user.id):
        await safe_callback_answer(callback, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
        return
    
    try:
        order_id = int(callback.data.split("_")[2])
    except (IndexError, ValueError):
        await safe_callback_answer(callback, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
        return
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: Atomic –æ–ø–µ—Ä–∞—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è race conditions
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        order = await order_service.get_order_by_id(order_id)
        if not order:
            await safe_callback_answer(callback, "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –µ—â–µ –º–æ–∂–Ω–æ –≤–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É
        if order.status != 'new':
            status_text = await order_service.get_status_display_text(order.status)
            await safe_callback_answer(
                callback, 
                f"‚ùå –ó–∞–∫–∞–∑ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è.\n–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {status_text}", 
                show_alert=True
            )
            await _delete_notification_message(callback)
            return
    
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –ª–∏ —É–∂–µ HR
        if order.hr_user_id and order.hr_user_id != callback.from_user.id:
            hr_user = await user_service.get_user_by_telegram_id(order.hr_user_id)
            hr_name = hr_user.fullname if hr_user else "–¥—Ä—É–≥–∏–º HR"
            await safe_callback_answer(
                callback, 
                f"‚ùå –ó–∞–∫–∞–∑ —É–∂–µ –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É {hr_name}", 
                show_alert=True
            )
            await _delete_notification_message(callback)
            return
        
        # –ê—Ç–æ–º–∞—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
        success = await order_service.assign_order_to_hr(order_id, callback.from_user.id)
        
        if success:
            # –í–º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
            await _show_order_details_after_accept(callback, order_id, order_service, user_service)
            
            await safe_callback_answer(callback, f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É!", show_alert=True)
        else:
            await safe_callback_answer(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞.")
            
    except Exception as e:
        logger.error(f"Error in process_order_accept for order {order_id}: {e}")
        await safe_callback_answer(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞")

@notifications_router.callback_query(F.data.startswith("order_later_"))
async def process_order_later(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–∑–∂–µ' –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥: aiogram3-di"""
    await safe_callback_answer(callback)
    
    try:
        order_id = int(callback.data.split("_")[2])
    except (IndexError, ValueError):
        await safe_callback_answer(callback, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
        return
    
    await _delete_notification_message(callback)
    
    await safe_callback_answer(callback, f"üìã –ó–∞–∫–∞–∑ #{order_id} –æ—Ç–ª–æ–∂–µ–Ω. –û–Ω –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ä–∞–∑–¥–µ–ª–µ '–ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã'.", show_alert=True)

@notifications_router.callback_query(F.data.startswith("order_cancel_"))
async def process_order_cancel(
    callback: CallbackQuery, 
    state: FSMContext,
    order_service: OrderService,
    user_service: UserService
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑' –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    await safe_callback_answer(callback)
    
    if not await check_hr_access(user_service, callback.from_user.id):
        await safe_callback_answer(callback, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
        return
    
    try:
        order_id = int(callback.data.split("_")[2])
    except (IndexError, ValueError):
        await safe_callback_answer(callback, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
        return
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫–∞–∑ —Å atomic –æ–ø–µ—Ä–∞—Ü–∏–µ–π
    try:
        order = await order_service.get_order_by_id(order_id)
        if not order:
            await safe_callback_answer(callback, "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å
        if order.status in ['delivered', 'cancelled']:
            await safe_callback_answer(callback, "‚ùå –ó–∞–∫–∞–∑ —É–∂–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å", show_alert=True)
            await _delete_notification_message(callback)
            return
    
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–∫–∞–∑–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(order_id=order_id, hr_user_id=callback.from_user.id)
        await state.set_state(CancelOrderStates.waiting_for_reason)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–º–µ–Ω—ã
        await update_message(
            callback,
            text=f"‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ #{order_id}\n\n–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞:",
            reply_markup=None
        )
            
    except Exception as e:
        logger.error(f"Error in process_order_cancel for order {order_id}: {e}")
        await safe_callback_answer(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞")

@notifications_router.message(CancelOrderStates.waiting_for_reason)
async def process_cancel_reason(
    message,
    state: FSMContext,
    order_service: OrderService,
    notification_service: OrderNotificationService
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞"""
    data = await state.get_data()
    order_id = data.get('order_id')
    hr_user_id = data.get('hr_user_id')
    cancel_reason = message.text
    
    if not order_id or not hr_user_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        await state.clear()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –ü–ï–†–ï–î –æ—Ç–º–µ–Ω–æ–π
    order = await order_service.order_repo.get_order_with_details(order_id)
    if not order:
        await message.answer(f"‚ùå –ó–∞–∫–∞–∑ #{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return
    
    user = order.user
    items = order.items
    old_status = order.status
    
    # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–∫–∞–∑ (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
    success = await order_service.cancel_order(order_id, hr_user_id)
    
    if success:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑
        updated_order = await order_service.get_order_by_id(order_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ HR –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞ —Å –ø—Ä–∏—á–∏–Ω–æ–π
        try:
            await notification_service.send_hr_order_cancellation_notification(
                order=updated_order,
                user=user,
                hr_user_id=hr_user_id,
                reason=cancel_reason
            )
        except Exception as e:
            logger.error(f"Failed to send HR cancellation notification for order {order_id}: {e}")
        
        await message.answer(
            f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –æ—Ç–º–µ–Ω—ë–Ω\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {cancel_reason}\n\n"
            "T-Points –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —Ç–æ–≤–∞—Ä—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ —Å–∫–ª–∞–¥."
        )
    else:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞ #{order_id}")
    
    await state.clear()

@notifications_router.callback_query(F.data.startswith("order_dismiss_"))
async def process_order_dismiss(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ - —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥: aiogram3-di"""
    await safe_callback_answer(callback)
    
    try:
        order_id = int(callback.data.split("_")[2])
    except (IndexError, ValueError):
        await safe_callback_answer(callback, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
        return
    
    await _delete_notification_message(callback)
    await safe_callback_answer(callback, f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ #{order_id} —Å–∫—Ä—ã—Ç–æ")

async def _delete_notification_message(callback: CallbackQuery):
    """–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º"""
    try:
        await callback.message.delete()
    except Exception as e:
        logger.error(f"Error deleting notification message: {e}")

async def _show_order_details_after_accept(
    callback: CallbackQuery, 
    order_id: int, 
    order_service: OrderService,
    user_service: UserService
):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –ø–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    
    Args:
        callback: –û–±—ä–µ–∫—Ç callback
        order_id: ID –∑–∞–∫–∞–∑–∞
        order_service: –°–µ—Ä–≤–∏—Å –∑–∞–∫–∞–∑–æ–≤
        user_service: –°–µ—Ä–≤–∏—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
        order = await order_service.order_repo.get_order_with_details(order_id)
        
        if not order:
            await safe_callback_answer(callback, "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        user_data = order.user
        items = order.items
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ HR-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        hr_user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–∫–∞–∑–∞
        message_text = format_order_details_message(order, user_data, items, hr_user)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–∫–∞–∑–∞ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        await update_message(
            callback,
            text=message_text,
            reply_markup=get_order_details_keyboard(order_id, order.status, "processing")
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞ –ø–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è: {e}")
        await safe_callback_answer(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞")

async def _check_order_availability(order_id: int, order_service: OrderService) -> tuple[bool, str]:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π"""
    try:
        order = await order_service.get_order_by_id(order_id)
        if not order:
            return False, "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        if order.status == 'cancelled':
            return False, "–ó–∞–∫–∞–∑ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω"
        elif order.status == 'delivered':
            return False, "–ó–∞–∫–∞–∑ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω"
        elif order.status == 'processing' and order.hr_user_id:
            return False, "–ó–∞–∫–∞–∑ —É–∂–µ –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É –¥—Ä—É–≥–∏–º HR"
    
        return True, ""
    except Exception as e:
        logger.error(f"Error checking order availability for order {order_id}: {e}")
        return False, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–∫–∞–∑–∞"

async def _handle_order_acceptance_error(callback: CallbackQuery, error_message: str):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–∫–∞–∑–∞
    
    Args:
        callback: –û–±—ä–µ–∫—Ç callback
        error_message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    await safe_callback_answer(callback, f"‚ùå {error_message}")
    await _delete_notification_message(callback)