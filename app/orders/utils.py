from typing import Optional, Tuple, List, Any, Dict
from aiogram.types import CallbackQuery
from ..models.models import Order, User, OrderItem, Product
from .constants import (
    normalize_admin_status
)
from datetime import datetime


async def check_hr_access(user_service, telegram_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º HR - —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥: aiogram3-di"""
    user = await user_service.get_user_by_telegram_id(telegram_id)
    if not user or user.role not in ("hr", "admin"):
        return False
    return True


def format_user_link(user: User) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return f"@{user.username}" if user.username else "–±–µ–∑ username"


def format_order_details_message(
    order: Order,
    user: User,
    items: List[OrderItem],
    hr_user: Optional[User] = None,
    status_display: Optional[str] = None,
    status_comment: Optional[str] = None
) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–∫–∞–∑–∞"""
    status_text = status_display or order.status
    
    message = [
        f"üì¶ <b>–ó–∞–∫–∞–∑ #{order.id}</b>",
        f"üìÖ –°–æ–∑–¥–∞–Ω: {order.created_at.strftime('%d.%m.%Y %H:%M')}",
        f"üë§ –ó–∞–∫–∞–∑—á–∏–∫: {user.fullname}",
        f"üì± Telegram: @{user.username}" if user.username else "",
        f"üíº –û—Ç–¥–µ–ª: {user.department or '–ù–µ —É–∫–∞–∑–∞–Ω'}",
        f"üìä –°—Ç–∞—Ç—É—Å: {status_text}",
        "",
        "<b>–¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ:</b>"
    ]
    
    total_cost = 0
    for item in items:
        cost = item.quantity * item.price
        total_cost += cost
        size_text = f" (—Ä–∞–∑–º–µ—Ä {item.size})" if item.size else ""
        message.append(
            f"‚Ä¢ {item.product.name}{size_text}\n"
            f"  {item.quantity} —à—Ç. x {item.price} T-Points = {cost} T-Points"
        )
    
    message.extend([
        "",
        f"üí∞ <b>–ò—Ç–æ–≥–æ:</b> {total_cost} T-Points"
    ])
    
    if hr_user:
        message.extend([
            "",
            f"üë®‚Äçüíº <b>HR-–º–µ–Ω–µ–¥–∂–µ—Ä:</b> {hr_user.fullname}"
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å—Ç–∞—Ç—É—Å–∞
    if status_comment:
        message.extend([
            "",
            f"‚ÑπÔ∏è {status_comment}"
        ])
    
    return "\n".join(filter(None, message))


def format_analytics_departments(departments_data: List[Tuple[str, int, float]]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ –æ—Ç–¥–µ–ª–∞–º
    
    Args:
        departments_data: –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (–æ—Ç–¥–µ–ª, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤, —Å—É–º–º–∞)
    """
    if not departments_data:
        return "üìä <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –æ—Ç–¥–µ–ª–∞–º</b>\n\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."
    
    message_text = "üìä <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –æ—Ç–¥–µ–ª–∞–º</b>\n\n"
    for i, (dept, count, total) in enumerate(departments_data, 1):
        dept_name = dept or "–ù–µ —É–∫–∞–∑–∞–Ω"
        message_text += f"{i}. <b>{dept_name}:</b> {count} –∑–∞–∫–∞–∑–æ–≤, {total or 0} T-points\n"
    
    return message_text


def format_analytics_products(products_data: List[Tuple[str, int, float]]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ —Ç–æ–ø —Ç–æ–≤–∞—Ä–∞–º
    
    Args:
        products_data: –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –≤—ã—Ä—É—á–∫–∞)
    """
    if not products_data:
        return "üìä <b>–¢–æ–ø —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."
    
    message_text = "üìä <b>–¢–æ–ø —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n"
    for i, (name, quantity, revenue) in enumerate(products_data, 1):
        message_text += f"{i}. <b>{name}:</b> {quantity} —à—Ç., {revenue or 0} T-points\n"
    
    return message_text


def format_analytics_ambassadors(ambassadors_data: List[Tuple[str, str, int, float]]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ —Ç–æ–ø –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–∞–º
    
    Args:
        ambassadors_data: –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (–∏–º—è, username, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤, —Å—É–º–º–∞)
    """
    if not ambassadors_data:
        return "üìä <b>–¢–æ–ø-5 –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–æ–≤ –º–µ—Ä—á–∞</b>\n\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."
    
    message_text = "üìä <b>–¢–æ–ø-5 –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–æ–≤ –º–µ—Ä—á–∞</b>\n\n"
    for i, (name, username, count, total) in enumerate(ambassadors_data, 1):
        username_text = f"(@{username})" if username else "(–±–µ–∑ username)"
        message_text += f"{i}. <b>{name}</b> {username_text}: {count} –∑–∞–∫–∞–∑–æ–≤, {total or 0} T-points\n"
    
    return message_text


def format_general_statistics(general_stats: Dict[str, Any]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–∫–∞–∑–æ–≤
    
    Args:
        general_stats: –°–ª–æ–≤–∞—Ä—å —Å –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    """
    return (
        "üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤</b>\n\n"
        f"üìã <b>–ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã:</b> {general_stats.get('new', 0)}\n"
        f"‚ö° <b>–í —Ä–∞–±–æ—Ç–µ:</b> {general_stats.get('processing', 0)}\n"
        f"üì¶ <b>–ì–æ—Ç–æ–≤—ã –∫ –≤—ã–¥–∞—á–µ:</b> {general_stats.get('ready_for_pickup', 0)}\n"
        f"‚úÖ <b>–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ:</b> {general_stats.get('delivered', 0)}\n"
        f"‚ùå <b>–û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ:</b> {general_stats.get('cancelled', 0)}\n\n"
        f"üí∞ <b>–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤:</b> {general_stats.get('total_amount', 0)} T-points\n"
        f"üìà <b>–°—Ä–µ–¥–Ω–∏–π —á–µ–∫:</b> {general_stats.get('avg_order', 0)} T-points"
    )


def parse_callback_data(callback_data: str, expected_parts: int) -> Optional[List[str]]:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–∞—Ä—Å–∏—Ç callback_data
    
    Args:
        callback_data: –°—Ç—Ä–æ–∫–∞ callback_data
        expected_parts: –û–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π
        
    Returns:
        –°–ø–∏—Å–æ–∫ —á–∞—Å—Ç–µ–π –∏–ª–∏ None –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π
    """
    parts = callback_data.split("_")
    if len(parts) >= expected_parts:
        return parts
        return None