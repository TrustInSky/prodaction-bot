from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from aiogram.fsm.state import State, StatesGroup
from ..services.user_manager_service import UserManagerService
from ..utils.message_editor import update_message
from ..utils.callback_helpers import safe_callback_answer
from ..middlewares.access_control import HROrAdminAccess
from ..keyboards.user_management_kb import UserManagementKeyboard
import tempfile
import os
import logging

logger = logging.getLogger(__name__)

user_management_router = Router(name="user_management")

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
user_management_router.callback_query.middleware(HROrAdminAccess())
user_management_router.message.middleware(HROrAdminAccess())

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class UserManagementStates(StatesGroup):
    awaiting_users_excel_upload = State()
    awaiting_tpoints_excel_upload = State()


# ===== –ì–õ–ê–í–ù–´–ï –ú–ï–ù–Æ =====

@user_management_router.callback_query(F.data == "menu:users")
async def show_users_management_menu(callback: CallbackQuery, user_manager_service: UserManagerService):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏"""
    try:
        logger.info(f"User {callback.from_user.id} opening users management menu")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —á–µ—Ä–µ–∑ UserService
        from ..services.user import UserService
        user_service = UserService(user_manager_service.session)
        stats = await user_service.get_users_stats()
        
        text = (
            f"üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏</b>\n\n"
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {stats.get('total_users', 0)}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats.get('active_users', 0)}\n"
            f"‚Ä¢ –ü–æ –æ—Ç–¥–µ–ª–∞–º: {stats.get('departments_count', 0)}\n\n"
            f"üõ† –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        keyboard = UserManagementKeyboard.get_users_management_menu()
        
        await update_message(callback, text=text, reply_markup=keyboard)
        await safe_callback_answer(callback)
        
    except Exception as e:
        logger.error(f"Error showing users management menu: {e}", exc_info=True)
        await safe_callback_answer(callback, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é", show_alert=True)


@user_management_router.callback_query(F.data == "menu:tpoints") 
async def show_tpoints_management_menu(callback: CallbackQuery, user_manager_service: UserManagerService):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è T-Points"""
    try:
        logger.info(f"User {callback.from_user.id} opening T-Points management menu")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ T-Points —á–µ—Ä–µ–∑ TransactionService
        from ..services.transaction_service import TransactionService
        transaction_service = TransactionService(user_manager_service.session)
        stats = await transaction_service.get_tpoints_stats()
        
        text = (
            f"üíé <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ T-Points</b>\n\n"
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"‚Ä¢ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {stats.get('total_points', 0):,} T-Points\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('active_users', 0)}\n"
            f"‚Ä¢ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –º–µ—Å—è—Ü: {stats.get('monthly_transactions', 0)}\n\n"
            f"üõ† –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        keyboard = UserManagementKeyboard.get_tpoints_management_menu()
        
        await update_message(callback, text=text, reply_markup=keyboard)
        await safe_callback_answer(callback)
        
    except Exception as e:
        logger.error(f"Error showing T-Points management menu: {e}", exc_info=True)
        await safe_callback_answer(callback, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é", show_alert=True)


@user_management_router.callback_query(F.data == "users:export")
async def export_users(callback: CallbackQuery, user_manager_service: UserManagerService):
    """–≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ Excel"""
    try:
        logger.info(f"User {callback.from_user.id} exporting users")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —ç–∫—Å–ø–æ—Ä—Ç–∞
        await update_message(
            callback,
            text="üìä –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤...",
            reply_markup=None
        )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel —Ñ–∞–π–ª
        excel_buffer = await user_manager_service.export_users_to_excel()
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(delete=False, suffix=".xlsx") as temp_file:
            temp_file.write(excel_buffer.getvalue())
            temp_file_path = temp_file.name
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        await callback.message.answer_document(
            document=FSInputFile(temp_file_path, filename="employees.xlsx"),
            caption="üì§ <b>–≠–∫—Å–ø–æ—Ä—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤</b>\n\n–î–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ –æ—Ç–¥–µ–ª–∞–º"
        )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(temp_file_path)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
        keyboard = UserManagementKeyboard.get_users_export_menu()
        
        await callback.message.answer(
            text="‚úÖ –§–∞–π–ª –≤—ã–≥—Ä—É–∂–µ–Ω! –ß—Ç–æ –¥–∞–ª—å—à–µ?",
            reply_markup=keyboard
        )
        
        await safe_callback_answer(callback)
        
    except Exception as e:
        logger.error(f"Error exporting users: {e}", exc_info=True)
        await safe_callback_answer(callback, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)


@user_management_router.callback_query(F.data == "users:import")
async def request_users_upload(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –∑–∞–≥—Ä—É–∑–∫–∏ Excel —Ñ–∞–π–ª–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    try:
        logger.info(f"User {callback.from_user.id} requesting users import")
        
        text = (
            "üì• <b>–ò–º–ø–æ—Ä—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤</b>\n\n"
            "–ü—Ä–∏—à–ª–∏—Ç–µ Excel-—Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (.xlsx)\n\n"
            "üìã <b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–∞–π–ª—É:</b>\n"
            "‚Ä¢ –§–æ—Ä–º–∞—Ç: .xlsx\n"
            "‚Ä¢ –î–∞–Ω–Ω—ã–µ —Ä–∞–∑–±–∏—Ç—ã –ø–æ –ª–∏—Å—Ç–∞–º –ø–æ –æ—Ç–¥–µ–ª–∞–º\n"
            "‚Ä¢ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: telegram_id, fullname\n"
            "‚Ä¢ –ü—É—Å—Ç—ã–µ –ø–æ–ª—è –±—É–¥—É—Ç –≤—ã–¥–µ–ª–µ–Ω—ã –∫—Ä–∞—Å–Ω—ã–º"
        )
        
        keyboard = UserManagementKeyboard.get_users_import_cancel()
        
        await update_message(callback, text=text, reply_markup=keyboard)
        await state.set_state(UserManagementStates.awaiting_users_excel_upload)
        await safe_callback_answer(callback)
        
    except Exception as e:
        logger.error(f"Error requesting users upload: {e}", exc_info=True)
        await safe_callback_answer(callback, "‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@user_management_router.callback_query(F.data == "tpoints:template")
async def export_tpoints_template(callback: CallbackQuery, user_manager_service: UserManagerService):
    """–≠–∫—Å–ø–æ—Ä—Ç —à–∞–±–ª–æ–Ω–∞ –¥–ª—è T-Points –æ–ø–µ—Ä–∞—Ü–∏–π"""
    try:
        logger.info(f"User {callback.from_user.id} exporting T-Points template")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —ç–∫—Å–ø–æ—Ä—Ç–∞
        await update_message(
            callback,
            text="üìã –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω –¥–ª—è T-Points –æ–ø–µ—Ä–∞—Ü–∏–π...",
            reply_markup=None
        )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω Excel —Ñ–∞–π–ª–∞
        excel_buffer = await user_manager_service.export_tpoints_template_to_excel()
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(delete=False, suffix=".xlsx") as temp_file:
            temp_file.write(excel_buffer.getvalue())
            temp_file_path = temp_file.name
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        await callback.message.answer_document(
            document=FSInputFile(temp_file_path, filename="tpoints_template.xlsx"),
            caption="üìã <b>–®–∞–±–ª–æ–Ω T-Points –æ–ø–µ—Ä–∞—Ü–∏–π</b>\n\n–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–±—Ä–∞—Ç–Ω–æ"
        )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(temp_file_path)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
        keyboard = UserManagementKeyboard.get_tpoints_export_menu()
        
        await callback.message.answer(
            text="‚úÖ –®–∞–±–ª–æ–Ω –≤—ã–≥—Ä—É–∂–µ–Ω! –ß—Ç–æ –¥–∞–ª—å—à–µ?",
            reply_markup=keyboard
        )
        
        await safe_callback_answer(callback)
        
    except Exception as e:
        logger.error(f"Error exporting T-Points template: {e}", exc_info=True)
        await safe_callback_answer(callback, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —à–∞–±–ª–æ–Ω–∞", show_alert=True)


@user_management_router.callback_query(F.data == "tpoints:import")
async def request_tpoints_upload(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –∑–∞–≥—Ä—É–∑–∫–∏ Excel —Ñ–∞–π–ª–∞ —Å T-Points –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏"""
    try:
        logger.info(f"User {callback.from_user.id} requesting T-Points import")
        
        text = (
            "üíé <b>–ò–º–ø–æ—Ä—Ç T-Points –æ–ø–µ—Ä–∞—Ü–∏–π</b>\n\n"
            "–ü—Ä–∏—à–ª–∏—Ç–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π Excel-—Ñ–∞–π–ª —Å T-Points –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ (.xlsx)\n\n"
            "üìã <b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–∞–π–ª—É:</b>\n"
            "‚Ä¢ –§–æ—Ä–º–∞—Ç: .xlsx\n"
            "‚Ä¢ –î–∞–Ω–Ω—ã–µ —Ä–∞–∑–±–∏—Ç—ã –ø–æ –ª–∏—Å—Ç–∞–º –ø–æ –æ—Ç–¥–µ–ª–∞–º\n"
            "‚Ä¢ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: telegram_id, points_to_add, reason\n"
            "‚Ä¢ –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞ - –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ, –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ - —Å–ø–∏—Å–∞–Ω–∏–µ"
        )
        
        keyboard = UserManagementKeyboard.get_tpoints_import_cancel()
        
        await update_message(callback, text=text, reply_markup=keyboard)
        await state.set_state(UserManagementStates.awaiting_tpoints_excel_upload)
        await safe_callback_answer(callback)
        
    except Exception as e:
        logger.error(f"Error requesting T-Points upload: {e}", exc_info=True)
        await safe_callback_answer(callback, "‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@user_management_router.message(F.document, StateFilter(UserManagementStates.awaiting_users_excel_upload))
async def handle_users_excel_upload(message: Message, state: FSMContext, user_manager_service: UserManagerService):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Excel —Ñ–∞–π–ª–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    try:
        file = message.document
        logger.info(f"Received users file: {file.file_name}")
        
        if not file.file_name.endswith(".xlsx"):
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .xlsx")
            return
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        file_path = f"/tmp/users_{file.file_name}"
        
        try:
            await message.bot.download(file, destination=file_path)
            logger.info(f"File saved to: {file_path}")
            
            if not os.path.exists(file_path):
                await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª")
                return
                
        except Exception as download_error:
            logger.error(f"Error downloading file: {download_error}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {str(download_error)}")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_msg = await message.answer("‚öôÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª...")
        
        try:
            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç—å
            with open(file_path, 'rb') as f:
                file_content = f.read()
            
            # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π
            preview = await user_manager_service.preview_users_import(file_content)
            
            if preview['errors'] and len(preview['errors']) > 0:
                error_text = "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –≤ —Ñ–∞–π–ª–µ:\n" + "\n".join(preview['errors'][:5])
                if len(preview['errors']) > 5:
                    error_text += f"\n... –∏ –µ—â—ë {len(preview['errors']) - 5} –æ—à–∏–±–æ–∫"
                await message.answer(error_text)
                return
            
            if not preview['users_to_update']:
                await message.answer("‚ÑπÔ∏è –í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π
            preview_text = (
                "üìã <b>–ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–ô –ü–†–û–°–ú–û–¢–† –ò–ó–ú–ï–ù–ï–ù–ò–ô –°–û–¢–†–£–î–ù–ò–ö–û–í</b>\n\n"
                f"üìä <b>–°–≤–æ–¥–∫–∞:</b>\n"
                f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {preview['total_users']}\n"
            )
            
            if preview['warnings']:
                preview_text += f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {len(preview['warnings'])}\n"
            
            preview_text += "\n<b>üîç –î–µ—Ç–∞–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π (–ø–µ—Ä–≤—ã–µ 5):</b>\n"
            
            for i, user_update in enumerate(preview['users_to_update'][:5], 1):
                preview_text += f"{i}. <b>{user_update['fullname']}</b> (@{user_update['username'] or '–±–µ–∑ username'})\n"
                
                for field, change in user_update['changes'].items():
                    field_name = {
                        'fullname': '–ò–º—è',
                        'birth_date': '–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è',
                        'hire_date': '–î–∞—Ç–∞ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞',
                        'department': '–û—Ç–¥–µ–ª',
                        'is_active': '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'
                    }.get(field, field)
                    
                    preview_text += f"   ‚Ä¢ {field_name}: '{change['old']}' ‚Üí '{change['new']}'\n"
                
                if user_update['warnings']:
                    for warning in user_update['warnings']:
                        preview_text += f"   ‚ö†Ô∏è {warning}\n"
                
                preview_text += "\n"
            
            if len(preview['users_to_update']) > 5:
                preview_text += f"... –∏ –µ—â—ë {len(preview['users_to_update']) - 5} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
            
            preview_text += (
                "‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï:</b>\n"
                "‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ\n"
                "‚Ä¢ –û—Ç–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–º–ø–æ—Ä—Ç:"
            )
            
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω—ã
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            from ..utils.temp_file_manager import temp_file_manager
            file_id = temp_file_manager.store_file(file_path, ttl_minutes=30)
            
            keyboard = UserManagementKeyboard.get_users_confirm_import(file_id)
            
            await message.answer(preview_text, reply_markup=keyboard)
            
        except Exception as processing_error:
            logger.error(f"Error processing users file: {processing_error}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(processing_error)}")
        finally:
            # –ù–ï —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∑–¥–µ—Å—å - –æ–Ω –Ω—É–∂–µ–Ω –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–∞
            pass
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"Critical error handling users upload: {e}", exc_info=True)
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        await state.clear()


@user_management_router.message(F.document, StateFilter(UserManagementStates.awaiting_tpoints_excel_upload))
async def handle_tpoints_excel_upload(message: Message, state: FSMContext, user_manager_service: UserManagerService):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Excel —Ñ–∞–π–ª–∞ —Å T-Points –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏"""
    try:
        file = message.document
        logger.info(f"Received T-Points file: {file.file_name}")
        
        if not file.file_name.endswith(".xlsx"):
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .xlsx")
            return
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        file_path = f"/tmp/tpoints_{file.file_name}"
        
        try:
            await message.bot.download(file, destination=file_path)
            logger.info(f"File saved to: {file_path}")
            
            if not os.path.exists(file_path):
                await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª")
                return
                
        except Exception as download_error:
            logger.error(f"Error downloading file: {download_error}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {str(download_error)}")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_msg = await message.answer("‚öôÔ∏è –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º T-Points –æ–ø–µ—Ä–∞—Ü–∏–∏...")
        
        try:
            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç—å
            with open(file_path, 'rb') as f:
                file_content = f.read()
            
            # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π
            preview = await user_manager_service.preview_tpoints_changes(file_content)
            
            if preview['errors'] and len(preview['errors']) > 0:
                error_text = "‚ùå –û—à–∏–±–∫–∏ –≤ —Ñ–∞–π–ª–µ:\n" + "\n".join(preview['errors'][:5])
                if len(preview['errors']) > 5:
                    error_text += f"\n... –∏ –µ—â—ë {len(preview['errors']) - 5} –æ—à–∏–±–æ–∫"
                await message.answer(error_text)
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
            total_add = preview['total_points_add']
            total_remove = preview['total_points_remove']
            net_change = total_add - total_remove
            
            preview_text = (
                "üìã <b>–ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–ô –ü–†–û–°–ú–û–¢–† T-POINTS –û–ü–ï–†–ê–¶–ò–ô</b>\n\n"
                f"üìä <b>–°–≤–æ–¥–∫–∞:</b>\n"
                f"‚Ä¢ –í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {preview['total_operations']}\n"
                f"‚Ä¢ üí∞ –ù–∞—á–∏—Å–ª–µ–Ω–∏–π: {total_add:,} T-Points\n"
                f"‚Ä¢ üí∏ –°–ø–∏—Å–∞–Ω–∏–π: {total_remove:,} T-Points\n"
                f"‚Ä¢ üìà –ò—Ç–æ–≥–æ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {net_change:+,} T-Points\n\n"
            )
            
            if preview['errors']:
                preview_text += f"‚ö†Ô∏è <b>–û—à–∏–±–æ–∫ –≤ —Ñ–∞–π–ª–µ: {len(preview['errors'])}</b>\n"
                for error in preview['errors'][:3]:
                    preview_text += f"‚Ä¢ {error}\n"
                if len(preview['errors']) > 3:
                    preview_text += f"... –∏ –µ—â—ë {len(preview['errors']) - 3} –æ—à–∏–±–æ–∫\n"
                preview_text += "\n"
            
            if preview['operations']:
                preview_text += "<b>üîç –î–µ—Ç–∞–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏–π (–ø–µ—Ä–≤—ã–µ 5):</b>\n"
                for i, op in enumerate(preview['operations'][:5], 1):
                    action_emoji = "üí∞" if op['points_change'] > 0 else "üí∏"
                    action = "–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ" if op['points_change'] > 0 else "–°–ø–∏—Å–∞–Ω–∏–µ"
                    
                    preview_text += (
                        f"{i}. {action_emoji} <b>{op['fullname']}</b>\n"
                        f"   üìù {op['reason']}\n"
                        f"   üíé {op['current_points']:,} ‚Üí {op['new_points']:,} T-Points "
                        f"({op['points_change']:+,})\n\n"
                    )
                
                if len(preview['operations']) > 5:
                    preview_text += f"... –∏ –µ—â—ë {len(preview['operations']) - 5} –æ–ø–µ—Ä–∞—Ü–∏–π\n\n"
            
            preview_text += (
                "‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï:</b>\n"
                "‚Ä¢ –û–ø–µ—Ä–∞—Ü–∏–∏ –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ\n"
                "‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
                "‚Ä¢ –û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ –±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ:"
            )
            
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω—ã
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            from ..utils.temp_file_manager import temp_file_manager
            file_id = temp_file_manager.store_file(file_path, ttl_minutes=30)
            
            keyboard = UserManagementKeyboard.get_tpoints_confirm_operations(file_id)
            
            await message.answer(preview_text, reply_markup=keyboard)
            
        except Exception as processing_error:
            logger.error(f"Error processing T-Points file: {processing_error}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(processing_error)}")
        finally:
            # –ù–ï —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∑–¥–µ—Å—å - –æ–Ω –Ω—É–∂–µ–Ω –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
            pass
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"Critical error handling T-Points upload: {e}", exc_info=True)
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        await state.clear()


@user_management_router.callback_query(F.data.startswith("tpoints:confirm:"))
async def confirm_tpoints_operations(callback: CallbackQuery, user_manager_service: UserManagerService):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ T-Points –æ–ø–µ—Ä–∞—Ü–∏–π"""
    try:
        from ..utils.temp_file_manager import temp_file_manager
        file_id = callback.data.replace("tpoints:confirm:", "")
        file_path = temp_file_manager.get_file_path(file_id)
        
        if not file_path:
            await safe_callback_answer(callback, "‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)
            return
        
        logger.info(f"Confirming T-Points operations from file: {file_path}")
        
        if not os.path.exists(file_path):
            temp_file_manager.remove_file(file_id)
            await safe_callback_answer(callback, "‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
        await update_message(
            callback,
            text="‚öôÔ∏è –í—ã–ø–æ–ª–Ω—è–µ–º T-Points –æ–ø–µ—Ä–∞—Ü–∏–∏...",
            reply_markup=None
        )
        
        try:
            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç—å
            with open(file_path, 'rb') as f:
                file_content = f.read()
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ (–ø–µ—Ä–µ–¥–∞–µ–º bot –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)
            result = await user_manager_service.apply_tpoints_changes(file_content, callback.bot)
            
            if result["success"]:
                result_text = (
                    "‚úÖ <b>T-Points –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!</b>\n\n"
                    f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {result['applied']}\n"
                )
                
                if result['applied'] > 0:
                    result_text += "\nüì¨ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."
            else:
                result_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π: {result['message']}"
            
            await callback.message.answer(result_text)
            
        except Exception as apply_error:
            logger.error(f"Error applying T-Points operations: {apply_error}")
            await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π: {str(apply_error)}")
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä
            temp_file_manager.remove_file(file_id)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é T-Points
        keyboard = UserManagementKeyboard.get_tpoints_export_menu()
        
        await callback.message.answer(
            text="üíé –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ T-Points",
            reply_markup=keyboard
        )
        
        await safe_callback_answer(callback)
        
    except Exception as e:
        logger.error(f"Critical error confirming T-Points operations: {e}", exc_info=True)
        await safe_callback_answer(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", show_alert=True)


@user_management_router.callback_query(F.data.startswith("users:confirm:"))
async def confirm_users_import(callback: CallbackQuery, user_manager_service: UserManagerService):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        from ..utils.temp_file_manager import temp_file_manager
        file_id = callback.data.replace("users:confirm:", "")
        file_path = temp_file_manager.get_file_path(file_id)
        
        if not file_path:
            await safe_callback_answer(callback, "‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)
            return
        
        logger.info(f"Confirming users import from file: {file_path}")
        
        if not os.path.exists(file_path):
            temp_file_manager.remove_file(file_id)
            await safe_callback_answer(callback, "‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∏–º–ø–æ—Ä—Ç–∞
        await update_message(
            callback,
            text="‚öôÔ∏è –í—ã–ø–æ–ª–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤...",
            reply_markup=None
        )
        
        try:
            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç—å
            with open(file_path, 'rb') as f:
                file_content = f.read()
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç
            result = await user_manager_service.import_users_from_excel(file_content)
            
            if result["success"]:
                result_text = (
                    "‚úÖ <b>–ò–º–ø–æ—Ä—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω!</b>\n\n"
                    f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {result['updated']}\n"
                )
                
                if result.get('updates') and len(result['updates']) > 0:
                    result_text += "\n<b>üìù –î–µ—Ç–∞–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:</b>\n"
                    for update in result['updates'][:3]:
                        result_text += f"‚Ä¢ ID {update['telegram_id']}: {list(update['changes'].keys())}\n"
                    
                    if len(result['updates']) > 3:
                        result_text += f"... –∏ –µ—â—ë {len(result['updates']) - 3} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
            else:
                result_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: {result['message']}"
                if result.get('errors'):
                    result_text += f"\n\n–û—à–∏–±–∫–∏:\n" + "\n".join(result['errors'][:3])
            
            await callback.message.answer(result_text)
            
        except Exception as apply_error:
            logger.error(f"Error applying users import: {apply_error}")
            await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∏–º–ø–æ—Ä—Ç–∞: {str(apply_error)}")
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä
            temp_file_manager.remove_file(file_id)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        keyboard = UserManagementKeyboard.get_users_export_menu()
        
        await callback.message.answer(
            text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏",
            reply_markup=keyboard
        )
        
        await safe_callback_answer(callback)
        
    except Exception as e:
        logger.error(f"Critical error confirming users import: {e}", exc_info=True)
        await safe_callback_answer(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", show_alert=True)


@user_management_router.callback_query(F.data.startswith("users:cancel:"))
async def cancel_users_import(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ –∏–º–ø–æ—Ä—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        from ..utils.temp_file_manager import temp_file_manager
        file_id = callback.data.replace("users:cancel:", "")
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä
        temp_file_manager.remove_file(file_id)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        keyboard = UserManagementKeyboard.get_users_export_menu()
        
        await update_message(
            callback,
            text="‚ùå –ò–º–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω–µ–Ω\n\nüë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏",
            reply_markup=keyboard
        )
        
        await safe_callback_answer(callback)
        
    except Exception as e:
        logger.error(f"Error canceling users import: {e}", exc_info=True)
        await safe_callback_answer(callback, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ", show_alert=True)


@user_management_router.callback_query(F.data.startswith("tpoints:cancel:"))
async def cancel_tpoints_operations(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ T-Points –æ–ø–µ—Ä–∞—Ü–∏–π"""
    try:
        from ..utils.temp_file_manager import temp_file_manager
        file_id = callback.data.replace("tpoints:cancel:", "")
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä
        temp_file_manager.remove_file(file_id)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é T-Points
        keyboard = UserManagementKeyboard.get_tpoints_export_menu()
        
        await update_message(
            callback,
            text="‚ùå T-Points –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã\n\nüíé –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ T-Points",
            reply_markup=keyboard
        )
        
        await safe_callback_answer(callback)
        
    except Exception as e:
        logger.error(f"Error canceling T-Points operations: {e}", exc_info=True)
        await safe_callback_answer(callback, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ", show_alert=True)


@user_management_router.callback_query(F.data == "tpoints:journal")
async def export_tpoints_journal(callback: CallbackQuery, user_manager_service: UserManagerService):
    """–≠–∫—Å–ø–æ—Ä—Ç –∂—É—Ä–Ω–∞–ª–∞ T-Points –æ–ø–µ—Ä–∞—Ü–∏–π –≤ Excel"""
    try:
        logger.info(f"User {callback.from_user.id} requesting T-Points journal export")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —ç–∫—Å–ø–æ—Ä—Ç–∞
        await update_message(
            callback,
            text="üìä –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∂—É—Ä–Ω–∞–ª –æ–ø–µ—Ä–∞—Ü–∏–π T-Points...",
            reply_markup=None
        )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel —Ñ–∞–π–ª —Å –∂—É—Ä–Ω–∞–ª–æ–º (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π)
        excel_buffer = await user_manager_service.export_tpoints_journal_to_excel(days=30)
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(delete=False, suffix=".xlsx") as temp_file:
            temp_file.write(excel_buffer.getvalue())
            temp_file_path = temp_file.name
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        await callback.message.answer_document(
            document=FSInputFile(temp_file_path, filename="tpoints_journal.xlsx"),
            caption=(
                "üìä <b>–ñ—É—Ä–Ω–∞–ª T-Points –æ–ø–µ—Ä–∞—Ü–∏–π</b>\n\n"
                "üìÖ –ü–µ—Ä–∏–æ–¥: –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π\n"
                "üìã –î–∞–Ω–Ω—ã–µ —Ä–∞–∑–±–∏—Ç—ã –ø–æ –æ—Ç–¥–µ–ª–∞–º\n"
                "üìä –í–∫–ª—é—á–µ–Ω–∞ —Å–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
            )
        )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(temp_file_path)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å –æ–ø—Ü–∏—è–º–∏
        keyboard = UserManagementKeyboard.get_tpoints_journal_menu()
        
        await callback.message.answer(
            text="‚úÖ –ñ—É—Ä–Ω–∞–ª –æ–ø–µ—Ä–∞—Ü–∏–π –≤—ã–≥—Ä—É–∂–µ–Ω! –ß—Ç–æ –¥–∞–ª—å—à–µ?",
            reply_markup=keyboard
        )
        
        await safe_callback_answer(callback)
        
    except Exception as e:
        logger.error(f"Error exporting T-Points journal: {e}", exc_info=True)
        await safe_callback_answer(callback, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –∂—É—Ä–Ω–∞–ª–∞", show_alert=True)


# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò HR –£–í–ï–î–û–ú–õ–ï–ù–ò–ô =====

@user_management_router.callback_query(F.data == "hr_notification_later")
async def handle_hr_notification_later(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–∑–∂–µ' –≤ HR —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö"""
    try:
        logger.info(f"HR user {callback.from_user.id} postponed employee notification")
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º
        await callback.message.delete()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await callback.answer(
            "‚è∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–æ. –í—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ–∑–∂–µ —á–µ—Ä–µ–∑ '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏'",
            show_alert=True
        )
        
    except Exception as e:
        logger.error(f"Error handling HR notification later: {e}", exc_info=True)
        await safe_callback_answer(callback, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏", show_alert=True) 