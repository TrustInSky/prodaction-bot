from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from ..repositories.user_repository import UserRepository
from ..repositories.tpoints_activity_repository import TPointsActivityRepository
from ..services.tpoints_activity_service import TPointsActivityService
from ..utils.callback_helpers import safe_callback_answer
from ..keyboards.tpoints_activity_keyboard import (
    create_tpoints_keyboard, 
    create_edit_keyboard,
    create_confirmation_keyboard,
    create_role_based_keyboard
)

class EditTPointsStates(StatesGroup):
    editing_list = State()


tpoints_activity_router = Router()

def format_tpoints_text(tpoints_dict: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ T-–ø–æ–∏–Ω—Ç–æ–≤ –≤ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç"""
    if not tpoints_dict:
        return "üìä <b>–°–ø–∏—Å–æ–∫ T-–ø–æ–∏–Ω—Ç–æ–≤ –ø—É—Å—Ç</b>"
    
    text = "üìä <b>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å T-–ø–æ–∏–Ω—Ç—ã:</b>\n\n"
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–∏–Ω—Ç–æ–≤
    sorted_items = sorted(tpoints_dict.items(), key=lambda x: x[1])
    
    for activity, points in sorted_items:
        text += f"‚Ä¢ <b>{activity}</b> ‚Äî {points} T-–ø–æ–∏–Ω—Ç–æ–≤\n"
    
    return text


@tpoints_activity_router.callback_query(F.data == "menu:how_to_get_tpoints")
async def show_tpoints_list(callback: CallbackQuery, user_repository: UserRepository, tpoints_activity_service: TPointsActivityService):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ø–æ—Å–æ–±–æ–≤ –ø–æ–ª—É—á–µ–Ω–∏—è T-–ø–æ–∏–Ω—Ç–æ–≤ - aiogram3-di"""
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
    try:
        user = await user_repository.get_user_by_telegram_id(user_id)
        user_role = user.role if user else None
    except Exception as e:
        user_role = None
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ T-–ø–æ–∏–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å (–æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç TPointsActivityRepository)
    tpoints_dict = await tpoints_activity_service.get_activities_dict()
    
    text = format_tpoints_text(tpoints_dict)
    keyboard = create_tpoints_keyboard(user_id, user_role)  
    
    await callback.message.edit_text(
        text=text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await safe_callback_answer(callback)

@tpoints_activity_router.callback_query(F.data == "edit_tpoints")
async def start_edit_tpoints(callback: CallbackQuery, state: FSMContext, user_repository: UserRepository):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è T-–ø–æ–∏–Ω—Ç–æ–≤ - aiogram3-di"""
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
    try:
        user = await user_repository.get_user_by_telegram_id(user_id)
        user_role = user.role if user else None
        
        if user_role not in ["hr", "admin"]:
            await safe_callback_answer(callback, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞", show_alert=True)
            return
    except Exception as e:
        await safe_callback_answer(callback, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à–∏ –ø—Ä–∞–≤–∞", show_alert=True)
        return
    
    await state.set_state(EditTPointsStates.editing_list)
    
    text = ("‚úèÔ∏è <b>–†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è T-–ø–æ–∏–Ω—Ç–æ–≤</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<code>–ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∏–Ω—Ç–æ–≤</code>\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "<code>–†–µ–ø–æ—Å—Ç –ø–æ—Å—Ç–∞ –≤ —Å–æ—Ü —Å–µ—Ç—è—Ö:10\n"
            "–ú–∞–≥–Ω–∏—Ç–∏–∫ –Ω–∞ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫:30\n"
            "–û—Ç–∑—ã–≤ –Ω–∞ —Ö—Ö:30</code>\n\n"
            "–ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ = –æ–¥–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n"
            "–°—Ç–∞—Ä—ã–π —Å–ø–∏—Å–æ–∫ –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω –Ω–æ–≤—ã–º!")
    
    keyboard = create_edit_keyboard()
    
    await callback.message.edit_text(
        text=text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await safe_callback_answer(callback)

@tpoints_activity_router.message(EditTPointsStates.editing_list)
async def process_tpoints_edit(message: Message, state: FSMContext, tpoints_activity_service: TPointsActivityService):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ T-–ø–æ–∏–Ω—Ç–æ–≤ - aiogram3-di"""
    try:
        # –ü–∞—Ä—Å–∏–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        new_tpoints = {}
        lines = message.text.strip().split('\n')
        
        for line in lines:
            if ':' not in line:
                continue
                
            parts = line.split(':', 1)
            if len(parts) != 2:
                continue
                
            activity = parts[0].strip()
            try:
                points = int(parts[1].strip())
                if activity and points >= 0:
                    new_tpoints[activity] = points
            except ValueError:
                continue
        
        if not new_tpoints:
            await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–≤—å—é –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await state.update_data(preview_tpoints=new_tpoints)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
        preview_text = "üîç <b>–ü—Ä–µ–≤—å—é –Ω–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞:</b>\n\n"
        preview_text += format_tpoints_text(new_tpoints)
        preview_text += f"\n\nüìä –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π: {len(new_tpoints)}"
        preview_text += "\n‚úÖ –î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞–∂–º–∏—Ç–µ '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'"
        
        keyboard = create_edit_keyboard()
        
        await message.reply(
            text=preview_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–ø–∏—Å–∫–∞: {str(e)}")

@tpoints_activity_router.callback_query(F.data == "save_tpoints")
async def save_tpoints_changes(callback: CallbackQuery, state: FSMContext, user_repository: UserRepository, tpoints_activity_service: TPointsActivityService):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ T-–ø–æ–∏–Ω—Ç–æ–≤ - aiogram3-di"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
    try:
        user = await user_repository.get_user_by_telegram_id(callback.from_user.id)
        user_role = user.role if user else None
        
        if user_role not in ["hr", "admin"]:
            await safe_callback_answer(callback, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π", show_alert=True)
            return
    except Exception as e:
        await safe_callback_answer(callback, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à–∏ –ø—Ä–∞–≤–∞", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    preview_tpoints = data.get("preview_tpoints")
    
    if not preview_tpoints:
        await safe_callback_answer(callback, "‚ùå –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", show_alert=True)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å (–æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç TPointsActivityRepository)
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞
        text_data = "\n".join([f"{name}:{points}" for name, points in preview_tpoints.items()])
        success, message = await tpoints_activity_service.update_activities_from_text(text_data)
        
        if success:
            await state.clear()
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å (–æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç TPointsActivityRepository)
            updated_tpoints = await tpoints_activity_service.get_activities_dict()
            
            text = "‚úÖ <b>–°–ø–∏—Å–æ–∫ T-–ø–æ–∏–Ω—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!</b>\n\n"
            text += format_tpoints_text(updated_tpoints)
            
            keyboard = create_tpoints_keyboard(callback.from_user.id, user_role)
            
            await callback.message.edit_text(
                text=text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            await safe_callback_answer(callback, "üíæ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
        else:
            await safe_callback_answer(callback, f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {message}", show_alert=True)
            
    except Exception as e:
        await safe_callback_answer(callback, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {str(e)}", show_alert=True)

@tpoints_activity_router.callback_query(F.data == "cancel_edit")
async def cancel_tpoints_edit(callback: CallbackQuery, state: FSMContext, user_repository: UserRepository, tpoints_activity_service: TPointsActivityService):
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ T-–ø–æ–∏–Ω—Ç–æ–≤ - aiogram3-di"""
    await state.clear()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ UserRepository, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ TPointsActivityService
    try:
        user = await user_repository.get_user_by_telegram_id(callback.from_user.id)
        user_role = user.role if user else None
    except Exception as e:
        user_role = None
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å (–æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç TPointsActivityRepository)
    tpoints_dict = await tpoints_activity_service.get_activities_dict()
    text = format_tpoints_text(tpoints_dict)
    keyboard = create_tpoints_keyboard(callback.from_user.id, user_role)
    
    await callback.message.edit_text(
        text=text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await safe_callback_answer(callback, "‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")


@tpoints_activity_router.callback_query(F.data == "back_to_main")
async def back_to_main(callback: CallbackQuery, state: FSMContext, user_repository: UserRepository):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - aiogram3-di"""
    await state.clear()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
    try:
        user = await user_repository.get_user_by_telegram_id(callback.from_user.id)
        if not user:
            await safe_callback_answer(callback, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
    except Exception as e:
        await safe_callback_answer(callback, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", show_alert=True)
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    from ..keyboards.main_menu import MainKeyboard
    keyboard = await MainKeyboard.get_main_keyboard(user_id=callback.from_user.id, role=user.role)
    
    main_text = (
        f"üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
        f"üíé –í–∞—à –±–∞–ª–∞–Ω—Å: {user.tpoints:,} T-Points\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    await callback.message.edit_text(
        text=main_text,
        reply_markup=keyboard
    )
    await safe_callback_answer(callback, "üè† –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...")