"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è–º–∏ (–¥–ª—è HR)
"""
from aiogram import Router, F, types
from datetime import date, timedelta
import logging

from ..services.auto_events_service import AutoEventsService
from ..keyboards.events_kb import EventsKeyboard

router = Router()
logger = logging.getLogger(__name__)


@router.callback_query(F.data == "check_events")
async def check_events_menu(
    callback: types.CallbackQuery,
    auto_events_service: AutoEventsService
):
    """–ú–µ–Ω—é –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è HR"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not await check_hr_access(callback.from_user.id, callback):
        return
    
    try:
        text = (
            "üìÖ <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±—ã—Ç–∏–π</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å:"
        )
        
        keyboard = EventsKeyboard.get_events_menu()
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Error showing events menu: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é", show_alert=True)


@router.callback_query(F.data == "check_birthdays")
async def check_birthdays_report(
    callback: types.CallbackQuery,
    auto_events_service: AutoEventsService
):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–∏–∂–∞–π—à–∏—Ö –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è"""
    if not await check_hr_access(callback.from_user.id, callback):
        return
    
    try:
        await callback.answer("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è...", show_alert=False)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç –æ –±–ª–∏–∂–∞–π—à–∏—Ö –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        birthday_report = await auto_events_service.get_birthdays_report()
        upcoming_birthdays = birthday_report.get('upcoming_birthdays', [])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        text = "üéÇ <b>–ë–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è</b>\n\n"
        
        if not upcoming_birthdays:
            text += "ü§∑‚Äç‚ôÄÔ∏è –ù–∞ –±–ª–∏–∂–∞–π—à–∏–µ 30 –¥–Ω–µ–π –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        else:
            for user, days_until in upcoming_birthdays[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                if days_until == 0:
                    text += f"üéâ <b>–°–ï–ì–û–î–ù–Ø</b> - {user.fullname}\n"
                elif days_until == 1:
                    text += f"üìÖ <b>–ó–ê–í–¢–†–ê</b> - {user.fullname}\n"
                else:
                    text += f"üìÖ –ß–µ—Ä–µ–∑ {days_until} –¥–Ω. - {user.fullname}\n"
            
            if len(upcoming_birthdays) > 10:
                text += f"\n... –∏ –µ—â—ë {len(upcoming_birthdays) - 10} —á–µ–ª–æ–≤–µ–∫"
        
        keyboard = EventsKeyboard.get_back_to_events()
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Error checking birthdays: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏", show_alert=True)


@router.callback_query(F.data == "check_anniversaries")
async def check_anniversaries_report(
    callback: types.CallbackQuery,
    auto_events_service: AutoEventsService
):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–∏–∂–∞–π—à–∏—Ö —é–±–∏–ª–µ–µ–≤"""
    if not await check_hr_access(callback.from_user.id, callback):
        return
    
    try:
        await callback.answer("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —é–±–∏–ª–µ–∏...", show_alert=False)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç –æ –±–ª–∏–∂–∞–π—à–∏—Ö —é–±–∏–ª–µ—è—Ö —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        anniversary_report = await auto_events_service.get_anniversaries_report()
        upcoming_anniversaries = anniversary_report.get('upcoming_anniversaries', [])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        text = "üèÜ <b>–ë–ª–∏–∂–∞–π—à–∏–µ –≥–æ–¥–æ–≤—â–∏–Ω—ã —Ä–∞–±–æ—Ç—ã</b>\n\n"
        
        if not upcoming_anniversaries:
            text += "ü§∑‚Äç‚ôÄÔ∏è –ù–∞ –±–ª–∏–∂–∞–π—à–∏–µ 30 –¥–Ω–µ–π –≥–æ–¥–æ–≤—â–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        else:
            for user, years, days_until in upcoming_anniversaries[:10]:
                if days_until == 0:
                    text += f"üéØ <b>–°–ï–ì–û–î–ù–Ø</b> - {user.fullname} ({years} –ª–µ—Ç)\n"
                elif days_until == 1:
                    text += f"üìÖ <b>–ó–ê–í–¢–†–ê</b> - {user.fullname} ({years} –ª–µ—Ç)\n"
                elif days_until < 0:
                    # –ü—Ä–æ—à–µ–¥—à–∏–µ –≥–æ–¥–æ–≤—â–∏–Ω—ã (–¥–Ω–∏ –Ω–∞–∑–∞–¥)
                    days_ago = abs(days_until)
                    text += f"üïê {days_ago} –¥–Ω. –Ω–∞–∑–∞–¥ - {user.fullname} ({years} –ª–µ—Ç)\n"
                else:
                    text += f"üìÖ –ß–µ—Ä–µ–∑ {days_until} –¥–Ω. - {user.fullname} ({years} –ª–µ—Ç)\n"
            
            if len(upcoming_anniversaries) > 10:
                text += f"\n... –∏ –µ—â—ë {len(upcoming_anniversaries) - 10} –≥–æ–¥–æ–≤—â–∏–Ω"
        
        keyboard = EventsKeyboard.get_back_to_events()
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Error checking anniversaries: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏", show_alert=True)


@router.callback_query(F.data == "check_stock")
async def check_stock_report(
    callback: types.CallbackQuery,
    auto_events_service: AutoEventsService
):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤"""
    if not await check_hr_access(callback.from_user.id, callback):
        return
    
    try:
        await callback.answer("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏...", show_alert=False)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –æ—Å—Ç–∞—Ç–∫–æ–≤
        results = await auto_events_service.check_low_stock()
        
        text = "üì¶ <b>–û—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n"
        
        if results['low_stock_products'] == 0:
            text += "‚úÖ –í—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ"
        else:
            text += f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {results['low_stock_products']} —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º"
            
            if results.get('errors'):
                text += f"\n\n‚ùå –û—à–∏–±–∫–∏: {', '.join(results['errors'])}"
        
        keyboard = EventsKeyboard.get_back_to_events()
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Error checking stock: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏", show_alert=True)


@router.callback_query(F.data == "check_all_events")
async def check_all_events_report(
    callback: types.CallbackQuery,
    auto_events_service: AutoEventsService
):
    """–ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π (—Ç–æ–ª—å–∫–æ –æ—Ç—á–µ—Ç—ã –±–µ–∑ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è)"""
    if not await check_hr_access(callback.from_user.id, callback):
        return
    
    try:
        await callback.answer("üîç –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É...", show_alert=False)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç—ã –ø–æ –≤—Å–µ–º —Å–æ–±—ã—Ç–∏—è–º (–±–µ–∑ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è T-Points)
        birthday_report = await auto_events_service.get_birthdays_report()
        anniversary_report = await auto_events_service.get_anniversaries_report()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç
        text = "üìä <b>–°–≤–æ–¥–∫–∞ –ø–æ –≤—Å–µ–º —Å–æ–±—ã—Ç–∏—è–º</b>\n\n"
        
        # –î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è
        upcoming_birthdays = birthday_report.get('upcoming_birthdays', [])
        today_birthdays = [user for user, days in upcoming_birthdays if days == 0]
        upcoming_birthdays_7 = [user for user, days in upcoming_birthdays if 0 < days <= 7]
        
        text += f"üéÇ <b>–î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è:</b>\n"
        text += f"   –°–µ–≥–æ–¥–Ω—è: {len(today_birthdays)} —á–µ–ª.\n"
        text += f"   –ù–∞ –Ω–µ–¥–µ–ª–µ: {len(upcoming_birthdays_7)} —á–µ–ª.\n"
        text += f"   –í—Å–µ–≥–æ –Ω–∞ 30 –¥–Ω–µ–π: {len(upcoming_birthdays)} —á–µ–ª.\n\n"
        
        # –ì–æ–¥–æ–≤—â–∏–Ω—ã
        upcoming_anniversaries = anniversary_report.get('upcoming_anniversaries', [])
        today_anniversaries = [user for user, years, days in upcoming_anniversaries if days == 0]
        upcoming_anniversaries_7 = [user for user, years, days in upcoming_anniversaries if 0 < days <= 7]
        past_anniversaries_7 = [user for user, years, days in upcoming_anniversaries if -7 <= days < 0]
        
        text += f"üèÜ <b>–ì–æ–¥–æ–≤—â–∏–Ω—ã —Ä–∞–±–æ—Ç—ã:</b>\n"
        text += f"   –°–µ–≥–æ–¥–Ω—è: {len(today_anniversaries)} —á–µ–ª.\n"
        text += f"   –ù–∞ –Ω–µ–¥–µ–ª–µ: {len(upcoming_anniversaries_7)} —á–µ–ª.\n"
        text += f"   –ù–∞ –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–µ: {len(past_anniversaries_7)} —á–µ–ª.\n"
        text += f"   –í—Å–µ–≥–æ (¬±30 –¥–Ω–µ–π): {len(upcoming_anniversaries)} —á–µ–ª.\n\n"
        
        # –û—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
        stock_result = await auto_events_service.check_low_stock()
        text += f"üì¶ <b>–û—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:</b>\n"
        text += f"   –¢–æ–≤–∞—Ä–æ–≤ —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º: {stock_result.get('low_stock_products', 0)} —à—Ç.\n\n"
        
        text += f"‚è∞ –û—Ç—á–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω: {date.today().strftime('%d.%m.%Y')}\n\n"
        text += "üí° <i>–≠—Ç–æ —Ç–æ–ª—å–∫–æ –æ—Ç—á–µ—Ç. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.</i>"
        
        keyboard = EventsKeyboard.get_back_to_events()
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Error in full events check: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏", show_alert=True)


async def check_hr_access(user_id: int, callback: types.CallbackQuery) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ HR"""
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏, –ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
    return True 