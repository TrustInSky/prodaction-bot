from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
import logging

from ..services.question import QuestionService
from ..services.notifications.question_notifications import QuestionNotificationService
from ..services.user import UserService
from ..utils.message_editor import update_message
from ..utils.callback_helpers import safe_callback_answer
from ..middlewares.access_control import HROrAdminAccess

logger = logging.getLogger(__name__)

hr_questions_router = Router(name="hr_questions")

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ HR/Admin
hr_questions_router.callback_query.middleware(HROrAdminAccess())
hr_questions_router.message.middleware(HROrAdminAccess())

class HRQuestionStates(StatesGroup):
    waiting_for_answer = State()
    confirming_answer = State()

@hr_questions_router.callback_query(F.data == "menu:questions")
async def hr_questions_menu(
    callback: CallbackQuery,
    question_service: QuestionService
):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è HR"""
    await safe_callback_answer(callback)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–æ–ø—Ä–æ—Å–æ–≤
        stats = await question_service.get_questions_statistics()
        
        message_text = (
            f"‚ùì <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–Ω–æ–Ω–∏–º–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏</b>\n\n"
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"üÜï –ù–æ–≤—ã—Ö: {stats['new']}\n"
            f"‚è≥ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ: {stats['in_progress']}\n"
            f"‚úÖ –û—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö: {stats['answered']}\n"
            f"üìã –í—Å–µ–≥–æ: {stats['total']}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        kb = InlineKeyboardBuilder()
        
        if stats['new'] > 0:
            kb.row(InlineKeyboardButton(
                text=f"üÜï –ù–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã ({stats['new']})",
                callback_data="hr_questions:new"
            ))
        
        if stats['in_progress'] > 0:
            kb.row(InlineKeyboardButton(
                text=f"‚è≥ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ ({stats['in_progress']})",
                callback_data="hr_questions:in_progress"
            ))
        
        kb.row(InlineKeyboardButton(
            text="üìã –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã",
            callback_data="hr_questions:all"
        ))
        
        if stats['answered'] > 0:
            kb.row(InlineKeyboardButton(
                text=f"‚úÖ –û—Ç–≤–µ—á–µ–Ω–Ω—ã–µ ({stats['answered']})",
                callback_data="hr_questions:answered"
            ))
        
        kb.row(InlineKeyboardButton(
            text="‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            callback_data="menu:main"
        ))
        
        await update_message(
            callback,
            text=message_text,
            reply_markup=kb.as_markup()
        )
        
    except Exception as e:
        logger.error(f"Error in hr_questions_menu: {e}")
        await safe_callback_answer(callback, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é –≤–æ–ø—Ä–æ—Å–æ–≤", show_alert=True)

@hr_questions_router.callback_query(F.data.startswith("hr_questions:"))
async def show_questions_by_status(
    callback: CallbackQuery,
    question_service: QuestionService
):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É"""
    await safe_callback_answer(callback)
    
    status_filter = callback.data.split(":")[1]
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    status_map = {
        "new": "new",
        "in_progress": "in_progress", 
        "answered": "answered",
        "all": None
    }
    
    status = status_map.get(status_filter)
    
    try:
        questions = await question_service.get_all_questions_for_hr(status)
        
        if not questions:
            status_names = {
                "new": "–Ω–æ–≤—ã—Ö",
                "in_progress": "–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ",
                "answered": "–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö",
                "all": ""
            }
            
            text = f"üì≠ –ù–µ—Ç {status_names.get(status_filter, '')} –≤–æ–ø—Ä–æ—Å–æ–≤."
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="menu:questions")]
            ])
            
            await update_message(callback, text=text, reply_markup=keyboard)
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
        message_lines = []
        
        if status_filter == "all":
            message_lines.append("üìã <b>–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã:</b>\n")
        else:
            status_names = {
                "new": "üÜï –ù–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã",
                "in_progress": "‚è≥ –í–æ–ø—Ä–æ—Å—ã –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ",
                "answered": "‚úÖ –û—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã"
            }
            message_lines.append(f"{status_names[status_filter]}:\n")
        
        for question in questions[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            status_emoji = {
                'new': 'üÜï',
                'in_progress': '‚è≥',
                'answered': '‚úÖ'
            }.get(question.status, '‚ùì')
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–≤—Ç–æ—Ä–∞, –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –∞–Ω–æ–Ω–∏–º–Ω—ã–π
            author_info = ""
            if not question.is_anonymous and question.user:
                if question.user.fullname and question.user.fullname.strip():
                    author_info = f" –æ—Ç {question.user.fullname.strip()}"
                elif question.user.username and question.user.username.strip():
                    author_info = f" –æ—Ç @{question.user.username.strip()}"
                else:
                    author_info = f" –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID: {question.user.telegram_id})"
            elif question.user:
                # –î–ª—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —á—Ç–æ —ç—Ç–æ –∞–Ω–æ–Ω–∏–º–Ω–æ
                author_info = " (–∞–Ω–æ–Ω–∏–º–Ω—ã–π)"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –∫—Ç–æ –æ—Ç–≤–µ—Ç–∏–ª
            answered_by = ""
            if question.answers and question.answers[0].respondent:
                respondent = question.answers[0].respondent
                if respondent.username and respondent.username.strip():
                    answered_by = f"\nüë§ –û—Ç–≤–µ—Ç–∏–ª: @{respondent.username.strip()}"
                elif respondent.fullname and respondent.fullname.strip():
                    answered_by = f"\nüë§ –û—Ç–≤–µ—Ç–∏–ª: {respondent.fullname.strip()}"
                else:
                    answered_by = f"\nüë§ –û—Ç–≤–µ—Ç–∏–ª: HR (ID: {respondent.telegram_id})"
            
            message_lines.append(
                f"{status_emoji} <b>–í–æ–ø—Ä–æ—Å #{question.id}</b>{author_info}\n"
                f"üìÖ {question.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                f"üí¨ <i>{question.message[:80]}{'...' if len(question.message) > 80 else ''}</i>{answered_by}\n"
            )
        
        if len(questions) > 10:
            message_lines.append(f"\n... –∏ –µ—â—ë {len(questions) - 10} –≤–æ–ø—Ä–æ—Å–æ–≤")
        
        # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
        kb = InlineKeyboardBuilder()
        
        for question in questions[:10]:
            status_emoji = {
                'new': 'üÜï',
                'in_progress': '‚è≥',
                'answered': '‚úÖ'
            }.get(question.status, '‚ùì')
            
            kb.row(InlineKeyboardButton(
                text=f"{status_emoji} –í–æ–ø—Ä–æ—Å #{question.id}",
                callback_data=f"hr_question_view:{question.id}"
            ))
        
        kb.row(InlineKeyboardButton(
            text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",
            callback_data="menu:questions"
        ))
        
        await update_message(
            callback,
            text="\n".join(message_lines),
            reply_markup=kb.as_markup()
        )
        
    except Exception as e:
        logger.error(f"Error showing questions by status {status_filter}: {e}")
        await safe_callback_answer(callback, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤", show_alert=True)


@hr_questions_router.callback_query(F.data.startswith("hr_question_answer:"))
async def start_answering_question(
    callback: CallbackQuery,
    state: FSMContext,
    question_service: QuestionService
):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å"""
    await safe_callback_answer(callback)
    
    question_id = int(callback.data.split(":")[1])
    
    try:
        question = await question_service.get_question_by_id(question_id)
        
        if not question:
            await safe_callback_answer(callback, "‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤–æ–ø—Ä–æ—Å–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(question_id=question_id)
        await state.set_state(HRQuestionStates.waiting_for_answer)
        
        await update_message(
            callback,
            text=(
                f"üìù <b>–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å #{question_id}</b>\n\n"
                f"üí¨ <b>–í–æ–ø—Ä–æ—Å:</b>\n"
                f"<i>{question.message}</i>\n\n"
                f"–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:"
            ),
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"hr_question_view:{question_id}")]
            ])
        )
        
    except Exception as e:
        logger.error(f"Error starting answer for question {question_id}: {e}")
        await safe_callback_answer(callback, "‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—Ç–∞", show_alert=True)

@hr_questions_router.callback_query(F.data.startswith("hr_question_take:"))
async def take_question_in_progress(
    callback: CallbackQuery,
    question_service: QuestionService
):
    """–í–∑—è—Ç—å –≤–æ–ø—Ä–æ—Å –≤ —Ä–∞–±–æ—Ç—É"""
    await safe_callback_answer(callback)
    
    question_id = int(callback.data.split(":")[1])
    
    try:
        success = await question_service.update_question_status(question_id, 'in_progress')
        
        if success:
            await safe_callback_answer(callback, "‚úÖ –í–æ–ø—Ä–æ—Å –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É!")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–ø—Ä–æ—Å–µ
            question = await question_service.get_question_by_id(question_id)
            
            if question:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                status_emoji = {
                    'new': 'üÜï',
                    'in_progress': '‚è≥',
                    'answered': '‚úÖ'
                }.get(question.status, '‚ùì')
                
                status_text = {
                    'new': '–ù–æ–≤—ã–π',
                    'in_progress': '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
                    'answered': '–û—Ç–≤–µ—á–µ–Ω'
                }.get(question.status, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ—Ä–µ
                author_info = "–ê–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                if question.user and not question.is_anonymous:
                    if question.user.username and question.user.username.strip():
                        author_info = f"@{question.user.username.strip()}"
                    else:
                        author_info = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (ID: {question.user.telegram_id})"
                
                message_text = (
                    f"{status_emoji} <b>–í–æ–ø—Ä–æ—Å #{question.id}</b>\n\n"
                    f"üë§ <b>–û—Ç:</b> {author_info}\n"
                    f"üìÖ <b>–î–∞—Ç–∞:</b> {question.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                    f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}\n\n"
                    f"üí¨ <b>–í–æ–ø—Ä–æ—Å:</b>\n"
                    f"<i>{question.message}</i>"
                )
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã, –µ—Å–ª–∏ –µ—Å—Ç—å
                if question.answers:
                    for answer in question.answers:
                        hr_username = ""
                        if answer.respondent and answer.respondent.username and answer.respondent.username.strip():
                            hr_username = f" (@{answer.respondent.username.strip()})"
                        
                        message_text += (
                            f"\n\nüìù <b>–û—Ç–≤–µ—Ç HR{hr_username}:</b>\n"
                            f"<i>{answer.message}</i>\n"
                            f"üìÖ {answer.created_at.strftime('%d.%m.%Y %H:%M')}"
                        )
                
                # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–µ–π—Å—Ç–≤–∏–π
                kb = InlineKeyboardBuilder()
                
                if question.status == 'new':
                    kb.row(InlineKeyboardButton(
                        text="‚è≥ –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É",
                        callback_data=f"hr_question_take:{question.id}"
                    ))
                
                if question.status in ['new', 'in_progress'] and not question.answers:
                    kb.row(InlineKeyboardButton(
                        text="üìù –û—Ç–≤–µ—Ç–∏—Ç—å",
                        callback_data=f"hr_question_answer:{question.id}"
                    ))
                
                kb.row(InlineKeyboardButton(
                    text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É",
                    callback_data="menu:questions"
                ))
                
                await update_message(
                    callback,
                    text=message_text,
                    reply_markup=kb.as_markup()
                )
        else:
            await safe_callback_answer(callback, "‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞", show_alert=True)
            
    except Exception as e:
        logger.error(f"Error taking question {question_id}: {e}")
        await safe_callback_answer(callback, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑—è—Ç–∏–∏ –≤–æ–ø—Ä–æ—Å–∞ –≤ —Ä–∞–±–æ—Ç—É", show_alert=True)

@hr_questions_router.callback_query(F.data.startswith("hr_question_view:"))
async def view_question_detail(
    callback: CallbackQuery,
    question_service: QuestionService
):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –≤–æ–ø—Ä–æ—Å–∞"""
    await safe_callback_answer(callback)
    
    question_id = int(callback.data.split(":")[1])
    
    try:
        question = await question_service.get_question_by_id(question_id)
        
        if not question:
            await safe_callback_answer(callback, "‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        status_emoji = {
            'new': 'üÜï',
            'in_progress': '‚è≥',
            'answered': '‚úÖ'
        }.get(question.status, '‚ùì')
        
        status_text = {
            'new': '–ù–æ–≤—ã–π',
            'in_progress': '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
            'answered': '–û—Ç–≤–µ—á–µ–Ω'
        }.get(question.status, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ—Ä–µ
        author_info = "–ê–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        if question.user and not question.is_anonymous:
            if question.user.username and question.user.username.strip():
                author_info = f"@{question.user.username.strip()}"
            else:
                author_info = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (ID: {question.user.telegram_id})"
        
        message_text = (
            f"{status_emoji} <b>–í–æ–ø—Ä–æ—Å #{question.id}</b>\n\n"
            f"üë§ <b>–û—Ç:</b> {author_info}\n"
            f"üìÖ <b>–î–∞—Ç–∞:</b> {question.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}\n\n"
            f"üí¨ <b>–í–æ–ø—Ä–æ—Å:</b>\n"
            f"<i>{question.message}</i>"
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã, –µ—Å–ª–∏ –µ—Å—Ç—å
        if question.answers:
            for answer in question.answers:
                hr_username = ""
                if answer.respondent and answer.respondent.username and answer.respondent.username.strip():
                    hr_username = f" (@{answer.respondent.username.strip()})"
                
                message_text += (
                    f"\n\nüìù <b>–û—Ç–≤–µ—Ç HR{hr_username}:</b>\n"
                    f"<i>{answer.message}</i>\n"
                    f"üìÖ {answer.created_at.strftime('%d.%m.%Y %H:%M')}"
                )
        
        # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–µ–π—Å—Ç–≤–∏–π
        kb = InlineKeyboardBuilder()
        
        if question.status == 'new':
            kb.row(InlineKeyboardButton(
                text="‚è≥ –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É",
                callback_data=f"hr_question_take:{question.id}"
            ))
        
        if question.status in ['new', 'in_progress'] and not question.answers:
            kb.row(InlineKeyboardButton(
                text="üìù –û—Ç–≤–µ—Ç–∏—Ç—å",
                callback_data=f"hr_question_answer:{question.id}"
            ))
        
        kb.row(InlineKeyboardButton(
            text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É",
            callback_data="menu:questions"
        ))
        
        await update_message(
            callback,
            text=message_text,
            reply_markup=kb.as_markup()
        )
        
    except Exception as e:
        logger.error(f"Error viewing question {question_id}: {e}")
        await safe_callback_answer(callback, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–∞", show_alert=True)

@hr_questions_router.callback_query(F.data.startswith("question_view:"))
async def hr_question_from_notification(
    callback: CallbackQuery,
    question_service: QuestionService
):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    await safe_callback_answer(callback)
    
    question_id = int(callback.data.split(":")[1])
    
    try:
        question = await question_service.get_question_by_id(question_id)
        
        if not question:
            await safe_callback_answer(callback, "‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        status_emoji = {
            'new': 'üÜï',
            'in_progress': '‚è≥',
            'answered': '‚úÖ'
        }.get(question.status, '‚ùì')
        
        status_text = {
            'new': '–ù–æ–≤—ã–π',
            'in_progress': '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
            'answered': '–û—Ç–≤–µ—á–µ–Ω'
        }.get(question.status, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ—Ä–µ (–∞–Ω–æ–Ω–∏–º–Ω–æ)
        author_info = "–ê–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        message_text = (
            f"{status_emoji} <b>–í–æ–ø—Ä–æ—Å #{question.id}</b>\n\n"
            f"üë§ <b>–û—Ç:</b> {author_info}\n"
            f"üìÖ <b>–î–∞—Ç–∞:</b> {question.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}\n\n"
            f"üí¨ <b>–í–æ–ø—Ä–æ—Å:</b>\n"
            f"<i>{question.message}</i>"
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã, –µ—Å–ª–∏ –µ—Å—Ç—å
        if question.answers:

            for answer in question.answers:
                hr_username = ""
                if answer.respondent and answer.respondent.username and answer.respondent.username.strip():
                    hr_username = f" (@{answer.respondent.username.strip()})"
                
                message_text += (
                    f"\n\nüìù <b>–û—Ç–≤–µ—Ç HR{hr_username}:</b>\n"
                    f"<i>{answer.message}</i>\n"
                    f"üìÖ {answer.created_at.strftime('%d.%m.%Y %H:%M')}"
                )
        
        # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–µ–π—Å—Ç–≤–∏–π
        kb = InlineKeyboardBuilder()
        
        if question.status == 'new':
            kb.row(InlineKeyboardButton(
                text="‚è≥ –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É",
                callback_data=f"hr_question_take:{question.id}"
            ))
        
        if question.status in ['new', 'in_progress'] and not question.answers:
            kb.row(InlineKeyboardButton(
                text="üìù –û—Ç–≤–µ—Ç–∏—Ç—å",
                callback_data=f"hr_question_answer:{question.id}"
            ))
        
        kb.row(InlineKeyboardButton(
            text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É",
            callback_data="menu:questions"
        ))
        
        await update_message(
            callback,
            text=message_text,
            reply_markup=kb.as_markup()
        )
        
    except Exception as e:
        logger.error(f"Error viewing question {question_id}: {e}")
        await safe_callback_answer(callback, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–∞", show_alert=True)

@hr_questions_router.callback_query(F.data.startswith("question_skip:"))
async def skip_question_notification(callback: CallbackQuery):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    await safe_callback_answer(callback, "‚è≠Ô∏è –í–æ–ø—Ä–æ—Å –ø—Ä–æ–ø—É—â–µ–Ω")
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    try:
        await callback.message.delete()
    except Exception as e:
        logger.warning(f"Failed to delete notification message: {e}")



@hr_questions_router.message(HRQuestionStates.waiting_for_answer)
async def process_question_answer(
    message: Message,
    state: FSMContext,
    question_service: QuestionService
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å - –ø–æ–∫–∞–∑ –ø—Ä–µ–≤—å—é"""
    answer_text = message.text
    
    if not answer_text:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–≤–µ—Ç–æ–º.")
        return
    
    if len(answer_text.strip()) < 1:
        await message.answer("‚ùå –û—Ç–≤–µ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return
    
    if len(answer_text) > 2000:
        await message.answer("‚ùå –û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 2000 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        question_id = data.get("question_id")
        
        if not question_id:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: ID –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–ø—Ä–æ—Å–µ
        question = await question_service.get_question_by_id(question_id)
        
        if not question:
            await message.answer("‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(answer_text=answer_text)
        await state.set_state(HRQuestionStates.confirming_answer)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –æ—Ç–≤–µ—Ç–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        message_text = (
            f"üìù <b>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å #{question_id}</b>\n\n"
            f"üí¨ <b>–ò—Å—Ö–æ–¥–Ω—ã–π –≤–æ–ø—Ä–æ—Å:</b>\n"
            f"<i>{question.message}</i>\n\n"
            f"üì§ <b>–í–∞—à –æ—Ç–≤–µ—Ç:</b>\n"
            f"<i>{answer_text}</i>\n\n"
            f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é?"
        )
        
        kb = InlineKeyboardBuilder()
        kb.row(InlineKeyboardButton(
            text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç",
            callback_data=f"hr_confirm_answer:{question_id}"
        ))
        kb.row(InlineKeyboardButton(
            text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç",
            callback_data=f"hr_question_answer:{question_id}"
        ))
        kb.row(InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            callback_data=f"hr_question_view:{question_id}"
        ))
        
        await message.answer(
            text=message_text,
            reply_markup=kb.as_markup()
        )
        
    except Exception as e:
        logger.error(f"Error processing answer preview: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞.")
        await state.clear()

@hr_questions_router.callback_query(F.data.startswith("hr_confirm_answer:"))
async def confirm_answer_sending(
    callback: CallbackQuery,
    state: FSMContext,
    question_service: QuestionService,
    question_notification_service: QuestionNotificationService,
    user_service: UserService
):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞"""
    await safe_callback_answer(callback)
    
    question_id = int(callback.data.split(":")[1])
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        answer_text = data.get("answer_text")
        
        if not answer_text:
            await safe_callback_answer(callback, "‚ùå –û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            await state.clear()
            return
        
        hr_user_id = callback.from_user.id
        
        # –°–æ–∑–¥–∞—ë–º –æ—Ç–≤–µ—Ç
        answer = await question_service.create_answer(
            question_id=question_id,
            respondent_id=hr_user_id,
            message=answer_text
        )
        
        if not answer:
            await safe_callback_answer(callback, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–∞ –≤–æ–ø—Ä–æ—Å —É–∂–µ –æ—Ç–≤–µ—á–µ–Ω", show_alert=True)
            await state.clear()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        question = await question_service.get_question_by_id(question_id)
        hr_user = await user_service.get_user_by_telegram_id(hr_user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if question and hr_user:
            try:
                await question_notification_service.notify_user_about_answer(question, answer, hr_user)
                logger.info(f"User notified about answer to question {question_id}")
            except Exception as e:
                logger.error(f"Failed to notify user about answer to question {question_id}: {e}")
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ HR
        await update_message(
            callback,
            text=(
                f"‚úÖ <b>–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å #{question_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>\n\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–∞—à–µ–º –æ—Ç–≤–µ—Ç–µ."
            ),
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="üìã –ö —Å–ø–∏—Å–∫—É –≤–æ–ø—Ä–æ—Å–æ–≤", callback_data="menu:questions"),
                    InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:main")
                ]
            ])
        )
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"Error confirming answer: {e}")
        await safe_callback_answer(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞", show_alert=True)
        await state.clear()
