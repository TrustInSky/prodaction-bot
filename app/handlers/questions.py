from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
import logging

from ..services.question import QuestionService
from ..services.notifications.question_notifications import QuestionNotificationService
from ..services.user import UserService
from ..utils.message_editor import update_message
from ..utils.callback_helpers import safe_callback_answer
from ..keyboards.main_menu import MainKeyboard

logger = logging.getLogger(__name__)
router = Router(name="questions_handlers")

def format_respondent_info(respondent) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–µ —Å —É—á–µ—Ç–æ–º —Ä–æ–ª–∏
    """
    if not respondent:
        return "HR"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å
    role_text = "HR" if respondent.role == "hr" else "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è - –¥–ª—è –æ–±–µ–∏—Ö —Ä–æ–ª–µ–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ç–¥–∞–µ—Ç—Å—è username
    name_info = ""
    if respondent.username and respondent.username.strip():
        name_info = f" (@{respondent.username.strip()})"
    elif respondent.fullname and respondent.fullname.strip():
        name_info = f" ({respondent.fullname.strip()})"
    
    return f"{role_text}{name_info}"

class QuestionStates(StatesGroup):
    waiting_for_question = State()
    confirming_question = State()

@router.callback_query(F.data == "menu:ask_question")
async def ask_question_menu(
    callback: CallbackQuery, 
    question_service: QuestionService
):
    """–ú–µ–Ω—é –¥–ª—è –∑–∞–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞"""
    await safe_callback_answer(callback)
    
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ–ø—Ä–æ—Å—ã
    has_questions = await question_service.has_user_questions(user_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_text = (
        "üí¨ <b>–°–∏—Å—Ç–µ–º–∞ –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –ó–∞–¥–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏\n"
        "‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞\n"
        "‚Ä¢ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞\n\n"
        "‚ùóÔ∏è <b>–í–∞–∂–Ω–æ:</b> –ù–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å –±—É–¥–µ—Ç –¥–∞–Ω –æ—Ç–≤–µ—Ç –ª–∏—á–Ω–æ –≤–∞–º.\n"
        "–í–æ–ø—Ä–æ—Å –±—É–¥–µ—Ç –∞–Ω–æ–Ω–∏–º–Ω—ã–º –¥–ª—è HR, –Ω–æ —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø–æ–º–Ω–∏—Ç, "
        "—á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º –æ—Ç–≤–µ—Ç."
    )
    
    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    kb = InlineKeyboardBuilder()
    kb.row(InlineKeyboardButton(
        text="‚úçÔ∏è –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å",
        callback_data="questions:ask"
    ))
    
    # –ö–Ω–æ–ø–∫–∞ "–ú–æ–∏ –≤–æ–ø—Ä–æ—Å—ã" –≤—Å–µ–≥–¥–∞ –≤–∏–¥–Ω–∞
    kb.row(InlineKeyboardButton(
        text="üìã –ú–æ–∏ –≤–æ–ø—Ä–æ—Å—ã",
        callback_data="questions:my_questions"
    ))
    
    kb.row(InlineKeyboardButton(
        text="‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        callback_data="menu:main"
    ))
    
    await update_message(
        callback,
        text=message_text,
        reply_markup=kb.as_markup()
    )

@router.callback_query(F.data == "questions:ask")
async def start_asking_question(
    callback: CallbackQuery,
    state: FSMContext,
    question_service: QuestionService
):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞"""
    await safe_callback_answer(callback)
    
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
    can_ask, error_message = await question_service.can_user_ask_question(user_id)
    if not can_ask:
        await safe_callback_answer(callback, f"‚ùå {error_message}", show_alert=True)
        return
    
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
    await state.set_state(QuestionStates.waiting_for_question)
    
    await update_message(
        callback,
        text=(
            "‚úçÔ∏è <b>–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å</b>\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.\n\n"
            "üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
            "‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞\n"
            "‚Ä¢ –í–æ–ø—Ä–æ—Å –ø–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –±–æ—Ç–∞\n"
            "‚Ä¢ –ò–¥–µ—è –¥–ª—è –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ\n\n"
            "–í–∞—à –≤–æ–ø—Ä–æ—Å –±—É–¥–µ—Ç –∞–Ω–æ–Ω–∏–º–Ω—ã–º, –Ω–æ –æ—Ç–≤–µ—Ç –ø—Ä–∏–¥—ë—Ç –ª–∏—á–Ω–æ –≤–∞–º."
        ),
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="questions:cancel")
        ]])
    )

@router.message(QuestionStates.waiting_for_question)
async def process_question_preview(
    message: Message,
    state: FSMContext,
    question_service: QuestionService
):
    """–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –≤–æ–ø—Ä–æ—Å–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π"""
    user_id = message.from_user.id
    question_text = message.text
    
    if not question_text:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—à–∏–º –≤–æ–ø—Ä–æ—Å–æ–º.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –≤–æ–ø—Ä–æ—Å–∞
    if len(question_text.strip()) < 5:
        await message.answer("‚ùå –í–æ–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ú–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
        
    if len(question_text) > 1000:
        await message.answer("‚ùå –í–æ–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await state.update_data(question_text=question_text)
    await state.set_state(QuestionStates.confirming_question)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –≤–æ–ø—Ä–æ—Å–∞
    preview_text = (
        f"üìù <b>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –≤–æ–ø—Ä–æ—Å–∞</b>\n\n"
        f"üí¨ <b>–í–∞—à –≤–æ–ø—Ä–æ—Å:</b>\n"
        f"<i>{question_text}</i>\n\n"
        f"‚ùóÔ∏è <b>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ:</b>\n"
        f"‚Ä¢ –í–æ–ø—Ä–æ—Å –±—É–¥–µ—Ç –∞–Ω–æ–Ω–∏–º–Ω—ã–º –¥–ª—è HR\n"
        f"‚Ä¢ –û—Ç–≤–µ—Ç –ø—Ä–∏–¥—ë—Ç –ª–∏—á–Ω–æ –≤–∞–º\n"
        f"‚Ä¢ –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–º–µ–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å –±—É–¥–µ—Ç –Ω–µ–ª—å–∑—è\n\n"
        f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å?"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="question_confirm"),
            InlineKeyboardButton(text="‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å", callback_data="question_edit")
        ],
        [
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="questions:cancel")
        ]
    ])
    
    await message.answer(text=preview_text, reply_markup=keyboard)

@router.callback_query(F.data == "question_confirm")
async def confirm_question(
    callback: CallbackQuery,
    state: FSMContext,
    question_service: QuestionService,
    question_notification_service: QuestionNotificationService,
    user_service: UserService
):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞"""
    await safe_callback_answer(callback)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    question_text = data.get("question_text")
    
    if not question_text:
        await safe_callback_answer(callback, "‚ùå –û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        await state.clear()
        return
    
    user_id = callback.from_user.id
    
    try:
        # –°–æ–∑–¥–∞—ë–º –≤–æ–ø—Ä–æ—Å
        question = await question_service.create_question(
            user_id=user_id,
            message=question_text,
            is_anonymous=True
        )
        
        if not question:
            await update_message(
                callback,
                text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:main")
                ]])
            )
            await state.clear()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        user = await user_service.get_user_by_telegram_id(user_id)
        if not user:
            logger.error(f"User {user_id} not found for question notification")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º HR –æ –Ω–æ–≤–æ–º –≤–æ–ø—Ä–æ—Å–µ
        if user:
            try:
                await question_notification_service.notify_hr_about_new_question(question, user)
                logger.info(f"HR notified about question {question.id} from user {user_id}")
            except Exception as e:
                logger.error(f"Failed to notify HR about question {question.id}: {e}")
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update_message(
            callback,
            text=(
                f"‚úÖ <b>–í–æ–ø—Ä–æ—Å #{question.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>\n\n"
                f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å. HR-–º–µ–Ω–µ–¥–∂–µ—Ä —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –µ–≥–æ "
                f"–∏ –æ—Ç–≤–µ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ª–∏—á–Ω–æ –≤–∞–º.\n\n"
                f"–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å —Å–≤–æ–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –º–µ–Ω—é "
                f"\"–ó–∞–¥–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å\" ‚Üí \"–ú–æ–∏ –≤–æ–ø—Ä–æ—Å—ã\"."
            ),
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:main")
            ]])
        )
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"Error creating question: {e}")
        await update_message(
            callback,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:main")
            ]])
        )
        await state.clear()

@router.callback_query(F.data == "question_edit")
async def edit_question(callback: CallbackQuery, state: FSMContext):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –≤–æ–ø—Ä–æ—Å–∞"""
    await safe_callback_answer(callback)
    
    await state.set_state(QuestionStates.waiting_for_question)
    
    await update_message(
        callback,
        text=(
            "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞</b>\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ.\n\n"
            "üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
            "‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞\n"
            "‚Ä¢ –í–æ–ø—Ä–æ—Å –ø–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –±–æ—Ç–∞\n"
            "‚Ä¢ –ò–¥–µ—è –¥–ª—è –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ\n\n"
            "–í–∞—à –≤–æ–ø—Ä–æ—Å –±—É–¥–µ—Ç –∞–Ω–æ–Ω–∏–º–Ω—ã–º, –Ω–æ –æ—Ç–≤–µ—Ç –ø—Ä–∏–¥—ë—Ç –ª–∏—á–Ω–æ –≤–∞–º."
        ),
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="questions:cancel")
        ]])
    )

@router.callback_query(F.data == "questions:cancel")
async def cancel_question(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –∑–∞–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞"""
    await safe_callback_answer(callback)
    await state.clear()
    
    await update_message(
        callback,
        text="‚ùå –ó–∞–¥–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:main")
        ]])
    )

@router.callback_query(F.data == "questions:my_questions")
async def show_my_questions(
    callback: CallbackQuery,
    question_service: QuestionService
):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    await safe_callback_answer(callback)
    
    user_id = callback.from_user.id
    page = 0  # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    
    await show_my_questions_page(callback, question_service, user_id, page)

@router.callback_query(F.data.startswith("my_questions:"))
async def handle_my_questions_pagination(
    callback: CallbackQuery,
    question_service: QuestionService
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ –º–æ–∏—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö"""
    await safe_callback_answer(callback)
    
    user_id = callback.from_user.id
    data_parts = callback.data.split(":")
    
    if len(data_parts) >= 2:
        action = data_parts[1]
        
        if action == "page":
            page = int(data_parts[2]) if len(data_parts) > 2 else 0
            await show_my_questions_page(callback, question_service, user_id, page)
        elif action == "view":
            question_id = int(data_parts[2])
            page = int(data_parts[3]) if len(data_parts) > 3 else 0
            await show_question_detail(callback, question_service, question_id, page)

async def show_my_questions_page(
    callback: CallbackQuery,
    question_service: QuestionService,
    user_id: int,
    page: int
):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    questions = await question_service.get_user_questions(user_id)
    
    if not questions:
        await update_message(
            callback,
            text="üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="menu:ask_question")
            ]])
        )
        return
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    per_page = 5
    total_questions = len(questions)
    total_pages = (total_questions + per_page - 1) // per_page
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if page < 0:
        page = 0
    elif page >= total_pages:
        page = total_pages - 1
    
    # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = page * per_page
    end_idx = start_idx + per_page
    page_questions = questions[start_idx:end_idx]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    message_text = (
        f"üìã <b>–í–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã</b>\n"
        f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages} (–≤—Å–µ–≥–æ: {total_questions})\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
    )
    
    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
    kb = InlineKeyboardBuilder()
    
    for question in page_questions:
        # –ò–∫–æ–Ω–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
        if question.status == 'answered':
            status_icon = "‚úÖ"  # –ó–µ–ª—ë–Ω–∞—è –≥–∞–ª–æ—á–∫–∞ –¥–ª—è –æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö
        elif question.status == 'in_progress':
            status_icon = "‚è≥"
        else:
            status_icon = "üÜï"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        question_preview = question.message[:30] + "..." if len(question.message) > 30 else question.message
        button_text = f"{status_icon} –í–æ–ø—Ä–æ—Å #{question.id}: {question_preview}"
        
        kb.row(InlineKeyboardButton(
            text=button_text,
            callback_data=f"my_questions:view:{question.id}:{page}"
        ))
    
    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=f"my_questions:page:{page - 1}"
        ))
    
    if page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton(
            text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è",
            callback_data=f"my_questions:page:{page + 1}"
        ))
    
    if nav_buttons:
        kb.row(*nav_buttons)
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    kb.row(InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="menu:ask_question"))
    
    await update_message(
        callback,
        text=message_text,
        reply_markup=kb.as_markup()
    )

async def show_question_detail(
    callback: CallbackQuery,
    question_service: QuestionService,
    question_id: int,
    return_page: int
):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–ø—Ä–æ—Å–µ"""
    question = await question_service.get_question_by_id(question_id)
    
    if not question:
        await safe_callback_answer(callback, "‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –°—Ç–∞—Ç—É—Å —Å —ç–º–æ–¥–∑–∏
    status_emoji = {
        'new': 'üÜï',
        'in_progress': '‚è≥',
        'answered': '‚úÖ'
    }.get(question.status, '‚ùì')
    
    status_text = {
        'new': '–ù–æ–≤—ã–π',
        'in_progress': '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
        'answered': '–û—Ç–≤–µ—á–µ–Ω'
    }.get(question.status, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    message_text = (
        f"{status_emoji} <b>–í–æ–ø—Ä–æ—Å #{question.id}</b>\n\n"
        f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}\n"
        f"üìÖ <b>–î–∞—Ç–∞:</b> {question.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
        f"üí¨ <b>–í–∞—à –≤–æ–ø—Ä–æ—Å:</b>\n"
        f"<i>{question.message}</i>"
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã, –µ—Å–ª–∏ –µ—Å—Ç—å
    if question.answers:
        message_text += "\n\nüìù <b>–û—Ç–≤–µ—Ç—ã:</b>"
        for answer in question.answers:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–µ —Å —É—á–µ—Ç–æ–º —Ä–æ–ª–∏
            respondent_info = format_respondent_info(answer.respondent)
            
            message_text += (
                f"\n\nüí¨ <b>–û—Ç–≤–µ—Ç –æ—Ç {respondent_info}:</b>\n"
                f"<i>{answer.message}</i>\n"
                f"üìÖ {answer.created_at.strftime('%d.%m.%Y %H:%M')}"
            )
    
    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    kb = InlineKeyboardBuilder()
    kb.row(InlineKeyboardButton(
        text="‚Ü©Ô∏è –ö —Å–ø–∏—Å–∫—É –≤–æ–ø—Ä–æ—Å–æ–≤",
        callback_data=f"my_questions:page:{return_page}"
    ))
    
    await update_message(
        callback,
        text=message_text,
        reply_markup=kb.as_markup()
    ) 