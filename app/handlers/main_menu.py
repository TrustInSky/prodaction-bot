from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from ..services.user import UserService
from ..keyboards.main_menu import MainKeyboard
from ..utils.message_editor import update_message
from ..utils.callback_helpers import safe_callback_answer
import logging
from datetime import datetime, date, timedelta

logger = logging.getLogger(__name__)

router = Router(name="main_menu")

# –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ä—ã—Ö –∫–æ–º–∞–Ω–¥
BOT_START_TIME = datetime.now()



# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class OnboardingStates(StatesGroup):
    waiting_for_fullname = State()
    waiting_for_birth_date = State()
    waiting_for_hire_date = State()
    waiting_for_department = State()


@router.message(Command("start"))
async def cmd_start(message: Message, user_service: UserService, state: FSMContext, onboarding_service):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π - –∑–∞–ø—É—Å–∫–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥, –∏–Ω–∞—á–µ - –æ–±—ã—á–Ω–æ–µ –º–µ–Ω—é
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä–æ–π (–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –¥–æ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞)
        message_time = datetime.fromtimestamp(message.date.timestamp())
        if message_time < BOT_START_TIME:
            logger.info(f"Ignoring old /start command from user {message.from_user.id} sent at {message_time}")
            return
        
        logger.info(f"Start command called for user {message.from_user.id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î
        user = await user_service.get_user(message.from_user.id)
        
        if not user:
            # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∑–∞–ø—É—Å–∫–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
            logger.info(f"New user {message.from_user.id}, starting onboarding")
            await start_onboarding(message, state, onboarding_service)
            return
        
        logger.info(f"Existing user {user.telegram_id} role: {user.role}")
        
        # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        welcome_text = await user_service.get_welcome_message(user)
        keyboard = await MainKeyboard.get_main_keyboard(
            user_id=message.from_user.id,
            role=user.role
        )
        
        await message.answer(text=welcome_text, reply_markup=keyboard)
        logger.info(f"Main menu sent to existing user {user.telegram_id}")
        
    except Exception as e:
        logger.error(f"Error in start command: {e}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


async def start_onboarding(message: Message, state: FSMContext, onboarding_service):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    await state.set_state(OnboardingStates.waiting_for_fullname)
    
    welcome_text = await onboarding_service.get_onboarding_welcome_text()
    await message.answer(welcome_text)


@router.message(OnboardingStates.waiting_for_fullname)
async def process_fullname(message: Message, state: FSMContext, onboarding_service):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –§–ò–û"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º OnboardingService –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    validation = await onboarding_service.validate_fullname(message.text)
    
    if not validation['valid']:
        await message.answer(validation['message'])
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –§–ò–û –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(fullname=message.text.strip())
    await state.set_state(OnboardingStates.waiting_for_birth_date)
    
    first_name = validation['first_name']
    
    text = (
        f"‚úÖ –°–ø–∞—Å–∏–±–æ, {first_name}!\n\n"
        f"üìÖ –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:\n\n"
        f"üí° –ü—Ä–∏–º–µ—Ä: 15.03.1990"
    )
    
    await message.answer(text)


@router.message(OnboardingStates.waiting_for_birth_date)
async def process_birth_date(message: Message, state: FSMContext, onboarding_service):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º OnboardingService –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    validation = await onboarding_service.validate_birth_date(message.text)
    
    if not validation['valid']:
        await message.answer(validation['message'])
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è
    await state.update_data(birth_date=validation['birth_date'])
    await state.set_state(OnboardingStates.waiting_for_hire_date)
    
    text = (
        f"‚úÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {validation['birth_date'].strftime('%d.%m.%Y')}\n\n"
        f"üíº –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤–∞—à–µ–≥–æ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:\n\n"
        f"üí° –ü—Ä–∏–º–µ—Ä: 01.09.2023"
    )
    
    await message.answer(text)


@router.message(OnboardingStates.waiting_for_hire_date)
async def process_hire_date(message: Message, state: FSMContext, onboarding_service):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º OnboardingService –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    validation = await onboarding_service.validate_hire_date(message.text)
    
    if not validation['valid']:
        await message.answer(validation['message'])
        return
    
    await state.update_data(hire_date=validation['hire_date'])
    await state.set_state(OnboardingStates.waiting_for_department)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –æ—Ç–¥–µ–ª–∞–º–∏
    departments = onboarding_service.get_available_departments()
    
    text = (
        f"‚úÖ –î–∞—Ç–∞ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {validation['hire_date'].strftime('%d.%m.%Y')}\n\n"
        f"üè¢ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –æ—Ç–¥–µ–ª:"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Ç–¥–µ–ª–∞–º–∏
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    keyboard_buttons = []
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—Ç–¥–µ–ª—ã –ø–æ 2 –≤ —Ä—è–¥
    for i in range(0, len(departments), 2):
        row = []
        for dept in departments[i:i+2]:
            row.append(InlineKeyboardButton(
                text=dept, 
                callback_data=f"onboarding_dept_{dept}"
            ))
        keyboard_buttons.append(row)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    await message.answer(text, reply_markup=keyboard)


@router.callback_query(F.data.startswith("onboarding_dept_"))
async def process_department_selection(callback: CallbackQuery, state: FSMContext, user_service: UserService, onboarding_service):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ—Ç–¥–µ–ª–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–∞ –∏–∑ callback_data
        department = callback.data.replace("onboarding_dept_", "")
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –∏—Å–ø–æ–ª—å–∑—É—è —Å–µ—Ä–≤–∏—Å
        await complete_onboarding_ui(callback, state, user_service, onboarding_service, department)
        
    except Exception as e:
        logger.error(f"Error in department selection: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –æ—Ç–¥–µ–ª–∞", show_alert=True)





async def complete_onboarding_ui(message_or_callback, state: FSMContext, user_service: UserService, onboarding_service, department: str):
    """UI –æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        user_data = await state.get_data()
        user_data['department'] = department
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º telegram_id –∏ username
        if hasattr(message_or_callback, 'from_user'):
            # –≠—Ç–æ Message
            telegram_id = message_or_callback.from_user.id
            username = message_or_callback.from_user.username or ""
        else:
            # –≠—Ç–æ CallbackQuery
            telegram_id = message_or_callback.from_user.id
            username = message_or_callback.from_user.username or ""
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        result = await onboarding_service.complete_onboarding(telegram_id, username, user_data)
        
        if not result['success']:
            error_text = result['message']
            if hasattr(message_or_callback, 'message'):
                # –≠—Ç–æ CallbackQuery
                await message_or_callback.message.edit_text(error_text)
                await message_or_callback.answer()
            else:
                # –≠—Ç–æ Message
                await message_or_callback.reply(error_text)
            await state.clear()
            return
        
        user = result['user']
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º HR –æ –Ω–æ–≤–æ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ
        bot = message_or_callback.bot if hasattr(message_or_callback, 'bot') else message_or_callback.message.bot
        await user_service.notify_hr_about_new_employee(bot, user)
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
        await state.clear()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∏–∑ –§–ò–û –∏—Å–ø–æ–ª—å–∑—É—è —Å–µ—Ä–≤–∏—Å
        first_name = onboarding_service._extract_first_name(user_data['fullname'])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        completion_text = await onboarding_service.format_completion_message(user_data, first_name, user.tpoints)
        
        # –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        keyboard = await MainKeyboard.get_main_keyboard(
            user_id=telegram_id,
            role=user.role
        )
        
        if hasattr(message_or_callback, 'message'):
            # –≠—Ç–æ CallbackQuery
            await message_or_callback.message.edit_text(text=completion_text, reply_markup=keyboard)
            await message_or_callback.answer()
        else:
            # –≠—Ç–æ Message
            await message_or_callback.reply(text=completion_text, reply_markup=keyboard)
        
        logger.info(f"Onboarding completed for user {user.telegram_id}")
        
    except Exception as e:
        logger.error(f"Error completing onboarding UI: {e}", exc_info=True)
        error_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
        
        if hasattr(message_or_callback, 'message'):
            # –≠—Ç–æ CallbackQuery
            await message_or_callback.message.edit_text(error_text)
            await message_or_callback.answer()
        else:
            # –≠—Ç–æ Message
            await message_or_callback.reply(error_text)
        await state.clear()


@router.callback_query(F.data == "menu:main")
async def show_main_menu(callback: CallbackQuery, user_service: UserService, success_message: str = None):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º"""
    try:
        logger.info(f"Main menu callback for user {callback.from_user.id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await user_service.get_user(callback.from_user.id)
        
        if not user:
            await callback.message.edit_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await safe_callback_answer(callback)
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard = await MainKeyboard.get_main_keyboard(
            user_id=callback.from_user.id,
            role=user.role
        )
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ —Å–≤–µ—Ä—Ö—É
        if success_message:
            main_text = (
                f"{success_message}\n\n"
                f"üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
                f"üíé –í–∞—à –±–∞–ª–∞–Ω—Å: {user.tpoints:,} T-Points\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            )
        else:
            main_text = (
                f"üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
                f"üíé –í–∞—à –±–∞–ª–∞–Ω—Å: {user.tpoints:,} T-Points\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            )
        
        await callback.message.edit_text(
            text=main_text,
            reply_markup=keyboard
        )
        await safe_callback_answer(callback)
        
    except Exception as e:
        logger.error(f"Error showing main menu: {e}", exc_info=True)
        await safe_callback_answer(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data == "menu:balance")
async def show_balance_details(callback: CallbackQuery, user_service: UserService):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–ª–∞–Ω—Å–µ"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await user_service.get_user(callback.from_user.id)
        
        if not user:
            await callback.message.edit_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await safe_callback_answer(callback)
            return
        
        formatted_balance = f"{user.tpoints:,}".replace(",", " ")
        
        balance_info = (
            f"üíé <b>–í–∞—à –±–∞–ª–∞–Ω—Å T-Points</b>\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.fullname}\n"
            f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{formatted_balance} T-Points</b>\n"
            f"üìä –†–æ–ª—å: {user.role}\n\n"
            f"‚ÑπÔ∏è T-Points –º–æ–∂–Ω–æ —Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–º –º–∞–≥–∞–∑–∏–Ω–µ.\n"
            f"–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ T-Points –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è!"
        )
        
        await update_message(
            callback,
            text=balance_info,
            reply_markup=MainKeyboard.get_back_to_main_menu()
        )
        await safe_callback_answer(callback)
        
    except Exception as e:
        logger.error(f"Error showing balance: {e}", exc_info=True)
        await safe_callback_answer(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


# ===== –ù–ê–í–ò–ì–ê–¶–ò–û–ù–ù–´–ï –•–ï–ù–î–õ–ï–†–´ - –¢–û–õ–¨–ö–û –ü–ï–†–ï–ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï =====

# –£–î–ê–õ–ï–ù–´ –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∏–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
# @router.callback_query(F.data == "menu:catalog") - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ catalog_router
# @router.callback_query(F.data == "menu:cart") - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ catalog/cart


# –£–î–ê–õ–ï–ù: @router.callback_query(F.data == "menu:my_orders")
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ menu:my_orders –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ app/orders/user_orders.py


@router.callback_query(F.data == "menu:users")
async def redirect_to_users_management(callback: CallbackQuery):
    """–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ user_management"""
    await safe_callback_answer(callback)
    logger.info(f"User {callback.from_user.id} redirected to users management")


@router.callback_query(F.data == "menu:tpoints")
async def redirect_to_tpoints_management(callback: CallbackQuery):
    """–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é T-Points - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ user_management"""
    await safe_callback_answer(callback)
    logger.info(f"User {callback.from_user.id} redirected to tpoints management")


@router.callback_query(F.data == "menu:how_to_get_tpoints")
async def redirect_to_tpoints_activity(callback: CallbackQuery):
    """–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫ —Å–ø–∏—Å–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π T-Points - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ tpoints_activity"""
    await safe_callback_answer(callback)
    logger.info(f"User {callback.from_user.id} redirected to tpoints activity")

@router.callback_query(F.data == "menu:settings")
async def redirect_to_admin_settings(callback: CallbackQuery, user_service: UserService):
    """–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        if not user or user.role != "admin" or not user.is_active:
            await safe_callback_answer(callback, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", show_alert=True)
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é
        text = (
            "üîß <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
        )
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞–¥–º–∏–Ω–∫–∏
        from ..keyboards.admin_kb import AdminKeyboard
        keyboard = AdminKeyboard.get_admin_settings_menu()
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        await safe_callback_answer(callback)
        
        logger.info(f"Admin panel opened by user {callback.from_user.id}")
        
    except Exception as e:
        logger.error(f"Error redirecting to admin settings: {e}")
        await safe_callback_answer(callback, "‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", show_alert=True)


