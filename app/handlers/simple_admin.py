import logging
from aiogram import Router, F, types
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message
from datetime import datetime, time

from ..services.auto_events_service import AutoEventsService
from ..services.user import UserService
from ..keyboards.admin_kb import AdminKeyboard
from ..middlewares.access_control import HROrAdminAccess

router = Router(name="simple_admin")
logger = logging.getLogger(__name__)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ HR/Admin
router.message.middleware(HROrAdminAccess())
router.callback_query.middleware(HROrAdminAccess())

class AdminStates(StatesGroup):
    waiting_for_days = State()
    waiting_for_time = State()
    waiting_for_points = State()
    waiting_for_threshold = State()

@router.message(Command("admin"))
async def admin_main_menu(message: types.Message, auto_events_service: AutoEventsService):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏"""
    text = (
        "üéõÔ∏è <b>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏</b>\n\n"
        "üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:\n"
        "‚Ä¢ üéÇ –î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è\n"
        "‚Ä¢ üèÜ –Æ–±–∏–ª–µ–∏ —Ä–∞–±–æ—Ç—ã\n"
        "‚Ä¢ üì¶ –û—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤\n"
        "‚Ä¢ üë§ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
        "üí° –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"
    )
    
    await message.answer(text, reply_markup=AdminKeyboard.get_admin_settings_menu())

# =============================================================================
# –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ù–ê–°–¢–†–û–ï–ö
# =============================================================================

@router.callback_query(F.data.startswith("admin:"))
async def handle_admin_callback(callback: CallbackQuery, auto_events_service: AutoEventsService, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö admin callback'–æ–≤"""
    data = callback.data.split(":")
    
    if len(data) < 2:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")
        return
    
    action = data[1]
    
    # –í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏
    if action == "menu":
        await admin_main_menu_callback(callback, auto_events_service, state)
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫
    elif action in ["birthday", "anniversary", "stock_low"]:
        await show_event_settings(callback, auto_events_service, action)
    elif action == "personal":
        await show_personal_settings(callback, auto_events_service)
    
    # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
    elif action == "toggle" and len(data) >= 3:
        event_type = data[2]
        await toggle_event_setting(callback, auto_events_service, event_type)
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    elif action == "edit" and len(data) >= 4:
        event_type = data[2]
        setting_type = data[3]
        await start_edit_setting(callback, auto_events_service, event_type, setting_type, state)
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    elif action == "test" and len(data) >= 3:
        event_type = data[2]
        await test_notification(callback, auto_events_service, event_type)
    
    # –û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    elif action == "cancel":
        await cancel_edit(callback, state)
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤ FSM)
    elif action == "save":
        await callback.answer("üíæ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
    
    else:
        await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")

async def admin_main_menu_callback(callback: CallbackQuery, auto_events_service: AutoEventsService, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏ —á–µ—Ä–µ–∑ callback"""
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    text = (
        "üéõÔ∏è <b>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏</b>\n\n"
        "üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:\n"
        "‚Ä¢ üéÇ –î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è\n"
        "‚Ä¢ üèÜ –Æ–±–∏–ª–µ–∏ —Ä–∞–±–æ—Ç—ã\n"
        "‚Ä¢ üì¶ –û—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤\n"
        "‚Ä¢ üë§ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
        "üí° –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"
    )
    
    await callback.message.edit_text(text, reply_markup=AdminKeyboard.get_admin_settings_menu())
    await callback.answer()

async def show_event_settings(callback: CallbackQuery, auto_events_service: AutoEventsService, event_type: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è"""
    try:
        settings = await auto_events_service.get_event_settings(event_type)
        
        if not settings:
            text = f"‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è {event_type} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            await callback.message.edit_text(text)
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if event_type == "birthday":
            emoji = "üéÇ"
            title = "–î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è"
            specific_settings = f"üéÅ T-Points –∑–∞ –î–†: {settings.tpoints_amount}"
        elif event_type == "anniversary": 
            emoji = "üèÜ"
            title = "–Æ–±–∏–ª–µ–∏ —Ä–∞–±–æ—Ç—ã"
            specific_settings = f"üéÅ T-Points: {settings.tpoints_amount} + {settings.tpoints_multiplier} –∑–∞ –∫–∞–∂–¥—ã–π –≥–æ–¥"
        elif event_type == "stock_low":
            emoji = "üì¶"
            title = "–ù–∏–∑–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏"
            specific_settings = f"üìä –ü–æ—Ä–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {settings.stock_threshold} —à—Ç."
        else:
            emoji = "‚öôÔ∏è"
            title = event_type
            specific_settings = ""
        
        status = "‚úÖ –í–∫–ª—é—á–µ–Ω–æ" if settings.is_enabled else "‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ"
        
        text = (
            f"{emoji} <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏: {title}</b>\n\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"
            f"üìÖ –î–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {settings.notification_days}\n"
            f"‚è∞ –í—Ä–µ–º—è: {settings.notification_time}\n"
        )
        
        if specific_settings:
            text += f"{specific_settings}\n"
        
        text += "\nüí° –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        keyboard = AdminKeyboard.get_event_settings_menu(event_type, settings.is_enabled)
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error showing {event_type} settings: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)

async def show_personal_settings(callback: CallbackQuery, auto_events_service: AutoEventsService):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∞"""
    try:
        user_id = callback.from_user.id
        preferences = await auto_events_service.get_admin_preferences(user_id)
        
        birthday_status = "‚úÖ" if preferences.birthday_enabled else "‚ùå"
        anniversary_status = "‚úÖ" if preferences.anniversary_enabled else "‚ùå"
        stock_status = "‚úÖ" if preferences.stock_low_enabled else "‚ùå"
        
        text = (
            f"üë§ <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
            f"–í–∞—à–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n"
            f"üéÇ –î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è: {birthday_status}\n"
            f"üèÜ –Æ–±–∏–ª–µ–∏: {anniversary_status}\n"
            f"üì¶ –ù–∏–∑–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏: {stock_status}\n\n"
            f"üí° –£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏:"
        )
        
        keyboard = AdminKeyboard.get_personal_settings_menu(preferences)
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error showing personal settings: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)

async def toggle_event_setting(callback: CallbackQuery, auto_events_service: AutoEventsService, event_type: str):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –≤–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è"""
    try:
        settings = await auto_events_service.get_event_settings(event_type)
        if not settings:
            await callback.answer("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
            return
        
        new_state = not settings.is_enabled
        success = await auto_events_service.update_event_settings(event_type, is_enabled=new_state)
        
        if success:
            status_text = "–≤–∫–ª—é—á–µ–Ω—ã" if new_state else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
            await callback.answer(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status_text}")
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            await show_event_settings(callback, auto_events_service, event_type)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏", show_alert=True)
            
    except Exception as e:
        logger.error(f"Error toggling {event_type}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)

async def start_edit_setting(callback: CallbackQuery, auto_events_service: AutoEventsService, event_type: str, setting_type: str, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await state.update_data({
            'editing_event_type': event_type,
            'editing_setting_type': setting_type
        })
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if setting_type == "days":
            text = "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 3,1,0)"
            await state.set_state(AdminStates.waiting_for_days)
        elif setting_type == "time":
            text = "‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 09:00)"
            await state.set_state(AdminStates.waiting_for_time)
        elif setting_type == "points":
            text = "üíé –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ T-Points (—á–∏—Å–ª–æ)"
            await state.set_state(AdminStates.waiting_for_points)
        elif setting_type == "threshold":
            text = "üìä –í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä–æ–≥ –æ—Å—Ç–∞—Ç–∫–æ–≤ (—á–∏—Å–ª–æ)"
            await state.set_state(AdminStates.waiting_for_threshold)
        else:
            await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", show_alert=True)
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∏ –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
        keyboard = AdminKeyboard.get_edit_cancel_keyboard()
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error starting edit {event_type}.{setting_type}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", show_alert=True)

async def test_notification(callback: CallbackQuery, auto_events_service: AutoEventsService, event_type: str):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
    try:
        user_id = callback.from_user.id
        
        if event_type == "birthday":
            success = await auto_events_service.test_birthday_notification(user_id)
        elif event_type == "anniversary":
            success = await auto_events_service.test_anniversary_notification(user_id)
        elif event_type == "stock_low":
            success = await auto_events_service.test_stock_notification()
        else:
            await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", show_alert=True)
            return
        
        if success:
            await callback.answer("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ", show_alert=True)
        
    except Exception as e:
        logger.error(f"Error testing {event_type} notification: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏", show_alert=True)

async def cancel_edit(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    try:
        if state:
            await state.clear()
        
        text = (
            "üéõÔ∏è <b>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏</b>\n\n"
            "üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:\n"
            "‚Ä¢ üéÇ –î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è\n"
            "‚Ä¢ üèÜ –Æ–±–∏–ª–µ–∏ —Ä–∞–±–æ—Ç—ã\n"
            "‚Ä¢ üì¶ –û—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤\n"
            "‚Ä¢ üë§ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
            "üí° –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"
        )
        
        keyboard = AdminKeyboard.get_admin_settings_menu()
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            
    except Exception as e:
        logger.error(f"Error cancelling edit: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ", show_alert=True)

# =============================================================================
# FSM –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –í–í–û–î–ê
# =============================================================================

@router.message(AdminStates.waiting_for_days)
async def process_days_input(message: types.Message, state: FSMContext, auto_events_service: AutoEventsService):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–Ω–∏"""
    try:
        data = await state.get_data()
        event_type = data.get('editing_event_type')
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –≤–≤–æ–¥
        days_text = message.text.strip()
        try:
            days = [int(d.strip()) for d in days_text.split(',')]
            if any(d < 0 for d in days):
                raise ValueError("–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –¥–Ω–∏ –Ω–µ –¥–æ–ø—É—Å–∫–∞—é—Ç—Å—è")
        except ValueError as e:
            await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {e}\n–í–≤–µ–¥–∏—Ç–µ –¥–Ω–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä: 3,1,0")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        success = await auto_events_service.update_event_settings(event_type, notification_days=days_text)
        
        if success:
            await message.answer(f"‚úÖ –î–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {days_text}")
            await state.clear()
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —Å–æ–±—ã—Ç–∏—è
            text = (
                "üéõÔ∏è <b>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏</b>\n\n"
                "üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:\n"
                "‚Ä¢ üéÇ –î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è\n"
                "‚Ä¢ üèÜ –Æ–±–∏–ª–µ–∏ —Ä–∞–±–æ—Ç—ã\n"
                "‚Ä¢ üì¶ –û—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤\n"
                "‚Ä¢ üë§ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
                "üí° –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"
            )
            
            keyboard = AdminKeyboard.get_admin_settings_menu()
            await message.answer(text, reply_markup=keyboard)
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        
    except Exception as e:
        logger.error(f"Error processing days input: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–≤–æ–¥–∞")

@router.message(AdminStates.waiting_for_time)
async def process_time_input(message: types.Message, state: FSMContext, auto_events_service: AutoEventsService):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
    try:
        data = await state.get_data()
        event_type = data.get('editing_event_type')
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—Ä–µ–º—è
        time_text = message.text.strip()
        try:
            time.fromisoformat(time_text)
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä: 09:00")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        success = await auto_events_service.update_event_settings(event_type, notification_time=time_text)
        
        if success:
            await message.answer(f"‚úÖ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {time_text}")
            await state.clear()
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
            text = (
                "üéõÔ∏è <b>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏</b>\n\n"
                "üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:\n"
                "‚Ä¢ üéÇ –î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è\n"
                "‚Ä¢ üèÜ –Æ–±–∏–ª–µ–∏ —Ä–∞–±–æ—Ç—ã\n"
                "‚Ä¢ üì¶ –û—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤\n"
                "‚Ä¢ üë§ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
                "üí° –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"
            )
            
            keyboard = AdminKeyboard.get_admin_settings_menu()
            await message.answer(text, reply_markup=keyboard)
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        
    except Exception as e:
        logger.error(f"Error processing time input: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–≤–æ–¥–∞")

@router.message(AdminStates.waiting_for_points)
async def process_points_input(message: types.Message, state: FSMContext, auto_events_service: AutoEventsService):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ T-Points"""
    try:
        data = await state.get_data()
        event_type = data.get('editing_event_type')
        setting_type = data.get('editing_setting_type')
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —á–∏—Å–ª–æ
        try:
            points = int(message.text.strip())
            if points < 0:
                raise ValueError("–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –¥–æ–ø—É—Å–∫–∞—é—Ç—Å—è")
        except ValueError as e:
            await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ: {e}")
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–µ –ø–æ–ª–µ –æ–±–Ω–æ–≤–ª—è—Ç—å
        if setting_type == "points":
            field_name = "tpoints_amount"
        elif setting_type == "multiplier":
            field_name = "tpoints_multiplier"
        else:
            await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        success = await auto_events_service.update_event_settings(event_type, **{field_name: points})
        
        if success:
            await message.answer(f"‚úÖ T-Points –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {points}")
            await state.clear()
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
            text = (
                "üéõÔ∏è <b>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏</b>\n\n"
                "üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:\n"
                "‚Ä¢ üéÇ –î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è\n"
                "‚Ä¢ üèÜ –Æ–±–∏–ª–µ–∏ —Ä–∞–±–æ—Ç—ã\n"
                "‚Ä¢ üì¶ –û—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤\n"
                "‚Ä¢ üë§ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
                "üí° –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"
            )
            
            keyboard = AdminKeyboard.get_admin_settings_menu()
            await message.answer(text, reply_markup=keyboard)
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        
    except Exception as e:
        logger.error(f"Error processing points input: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–≤–æ–¥–∞")

@router.message(AdminStates.waiting_for_threshold)
async def process_threshold_input(message: types.Message, state: FSMContext, auto_events_service: AutoEventsService):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ—Ä–æ–≥ –æ—Å—Ç–∞—Ç–∫–æ–≤"""
    try:
        data = await state.get_data()
        event_type = data.get('editing_event_type')
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —á–∏—Å–ª–æ
        try:
            threshold = int(message.text.strip())
            if threshold < 0:
                raise ValueError("–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –¥–æ–ø—É—Å–∫–∞—é—Ç—Å—è")
        except ValueError as e:
            await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ: {e}")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        success = await auto_events_service.update_event_settings(event_type, stock_threshold=threshold)
        
        if success:
            await message.answer(f"‚úÖ –ü–æ—Ä–æ–≥ –æ—Å—Ç–∞—Ç–∫–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω: {threshold}")
            await state.clear()
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
            text = (
                "üéõÔ∏è <b>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏</b>\n\n"
                "üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:\n"
                "‚Ä¢ üéÇ –î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è\n"
                "‚Ä¢ üèÜ –Æ–±–∏–ª–µ–∏ —Ä–∞–±–æ—Ç—ã\n"
                "‚Ä¢ üì¶ –û—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤\n"
                "‚Ä¢ üë§ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
                "üí° –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"
            )
            
            keyboard = AdminKeyboard.get_admin_settings_menu()
            await message.answer(text, reply_markup=keyboard)
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        
    except Exception as e:
        logger.error(f"Error processing threshold input: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–≤–æ–¥–∞")

# =============================================================================
# –ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò –ê–î–ú–ò–ù–û–í
# =============================================================================

@router.callback_query(F.data.startswith("personal:"))
async def handle_personal_settings(callback: CallbackQuery, auto_events_service: AutoEventsService):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–¥–º–∏–Ω–∞"""
    try:
        data = callback.data.split(":")
        if len(data) < 3:
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")
            return
        
        action = data[1]  # toggle
        setting_type = data[2]  # birthday, anniversary, stock_low
        
        user_id = callback.from_user.id
        
        if action == "toggle":
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            preferences = await auto_events_service.get_admin_preferences(user_id)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            if setting_type == "birthday":
                new_value = not preferences.birthday_enabled
                field_name = "birthday_enabled"
            elif setting_type == "anniversary":
                new_value = not preferences.anniversary_enabled
                field_name = "anniversary_enabled"
            elif setting_type == "stock_low":
                new_value = not preferences.stock_low_enabled
                field_name = "stock_low_enabled"
            else:
                await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            success = await auto_events_service.update_admin_preferences(user_id, **{field_name: new_value})
            
            if success:
                status_text = "–≤–∫–ª—é—á–µ–Ω–æ" if new_value else "–≤—ã–∫–ª—é—á–µ–Ω–æ"
                await callback.answer(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {status_text}")
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                await show_personal_settings(callback, auto_events_service)
            else:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏", show_alert=True)
        else:
            await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
            
    except Exception as e:
        logger.error(f"Error handling personal settings: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True) 