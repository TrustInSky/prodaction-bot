import asyncio
import logging
import os
import sys
from typing import NoReturn
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage
from sqlalchemy.ext.asyncio import async_sessionmaker, create_async_engine, AsyncSession
from contextlib import asynccontextmanager
from aiogram3_di import setup_di

from app.config import Config
from app.middlewares.database import DatabaseMiddleware, set_database_middleware
from app.middlewares.group_membership import GroupMembershipMiddleware
from app.scheduler import setup_scheduler, shutdown_scheduler
from app.catalog.catalog_router import router as catalog_router
from app.handlers.main_menu import router as main_menu_router
from app.handlers.simple_admin import router as admin_router
from app.handlers.questions import router as questions_router
from app.handlers.hr_questions import hr_questions_router
from app.handlers.user_management import user_management_router
# –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –∏–º–ø–æ—Ä—Ç notification_handlers - —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ orders/notifications.py
from app.handlers.tpoints_activity import tpoints_activity_router
from app.handlers.auto_events_handlers import router as auto_events_router
from app.handlers.events_management import router as events_management_router
from app.orders.main_router import orders_router
from app.models.models import Base
from app.filters.chat_type import PrivateChatOnly

logger = logging.getLogger(__name__)

def setup_logging() -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    os.makedirs('logs', exist_ok=True)
    
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler('logs/bot.log'),
            logging.StreamHandler()
        ]
    )

async def setup_database(config: Config) -> tuple[async_sessionmaker[AsyncSession], create_async_engine]:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        engine = create_async_engine(
            config.DATABASE_URL,
            echo=False,
            pool_pre_ping=True  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
        )
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        async with engine.begin() as conn:
            await conn.run_sync(Base.metadata.create_all)
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–±—Ä–∏–∫—É —Å–µ—Å—Å–∏–π
        async_session = async_sessionmaker(engine, expire_on_commit=False)
        
        return async_session, engine
    except Exception as e:
        logger.error(f"Failed to setup database: {e}")
        raise

def setup_routers(dp: Dispatcher) -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ—É—Ç–µ—Ä–æ–≤"""
    routers = [
        user_management_router,
        catalog_router,  # –í–∫–ª—é—á–∞–µ—Ç –≤—Å–µ —Ä–æ—É—Ç–µ—Ä—ã –∫–∞—Ç–∞–ª–æ–≥–∞
        orders_router,
        # notification_router —É–¥–∞–ª–µ–Ω - —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ orders_router
        admin_router,  # –ù–æ–≤–∞—è —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∞–¥–º–∏–Ω–∫–∞
        questions_router,
        hr_questions_router,  # HR —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞–º–∏
        tpoints_activity_router,  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ T-Points –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
        auto_events_router,  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∞–≤—Ç–æ—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        events_management_router,  # –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è HR
        main_menu_router,  # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ü–û–°–õ–ï–î–ù–ò–ú - —á—Ç–æ–±—ã –∑–∞–≥–ª—É—à–∫–∏ –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è
    ]
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö
    private_chat_filter = PrivateChatOnly()
    
    for router in routers:
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∫–æ –≤—Å–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º —Ä–æ—É—Ç–µ—Ä–∞
        router.message.filter(private_chat_filter)
        router.callback_query.filter(private_chat_filter)
        
        dp.include_router(router)
        logger.info(f"‚úÖ Router registered with private chat filter: {router.name}")

def setup_middlewares(dp: Dispatcher, async_session: async_sessionmaker, config: Config, bot: Bot) -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware"""
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä DatabaseMiddleware
    database_middleware = DatabaseMiddleware(async_session, bot)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ middleware –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
    set_database_middleware(database_middleware)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
    dp.message.middleware(database_middleware)
    dp.message.middleware(GroupMembershipMiddleware(config.GROUP_ID))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware –¥–ª—è callback_query
    dp.callback_query.middleware(database_middleware)
    dp.callback_query.middleware(GroupMembershipMiddleware(config.GROUP_ID))

async def cleanup(bot: Bot, engine: create_async_engine) -> None:
    """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
    try:
        logger.info("Stopping scheduler...")
        await shutdown_scheduler()
        
        logger.info("Closing bot session...")
        await bot.session.close()
        
        logger.info("Closing database connections...")
        await engine.dispose()
        
    except Exception as e:
        logger.error(f"Error during cleanup: {e}")

async def main() -> NoReturn:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        setup_logging()
        logger.info("Starting bot...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = Config()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        if not config.BOT_TOKEN:
            logger.error("BOT_TOKEN is not set!")
            sys.exit(1)
        
        if not config.GROUP_ID:
            logger.error("GROUP_ID is not set!")
            sys.exit(1)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        async_session, engine = await setup_database(config)
        
        # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
        bot = Bot(
            token=config.BOT_TOKEN,
            default=DefaultBotProperties(parse_mode=ParseMode.HTML)
        )
        storage = MemoryStorage()
        dp = Dispatcher(storage=storage)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º aiogram3-di –ü–ï–†–ï–î middleware
        setup_di(dp)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º middleware
        setup_middlewares(dp, async_session, config, bot)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        setup_routers(dp)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        await setup_scheduler(async_session, bot)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info(f"üöÄ Bot started! Will only respond in PRIVATE chats, not in groups")
        logger.info(f"üìä All routers registered with private chat filter")
        logger.info(f"üë• Group monitoring enabled for GROUP_ID: {config.GROUP_ID}")
        
        try:
            await dp.start_polling(bot)
        except Exception as e:
            logger.error(f"Error during bot polling: {e}")
            raise
        finally:
            await cleanup(bot, engine)
            
    except Exception as e:
        logger.critical(f"Critical error occurred: {e}")
        sys.exit(1)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("Bot stopped!")
    except Exception as e:
        logger.critical(f"Unexpected error occurred: {e}")
        sys.exit(1)