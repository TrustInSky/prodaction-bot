"""
–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã notification_types –∏ status_transitions –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app.models.models import Base, NotificationType, StatusTransition, OrderStatus
from app.database import get_async_engine
from sqlalchemy import text
import logging

logger = logging.getLogger(__name__)

async def create_notification_system():
    """–°–æ–∑–¥–∞—Ç—å —Å–∏—Å—Ç–µ–º—É —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        engine = get_async_engine()
        
        async with engine.begin() as conn:
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
            await conn.run_sync(NotificationType.__table__.create, checkfirst=True)
            await conn.run_sync(StatusTransition.__table__.create, checkfirst=True)
            
            print("‚úÖ –¢–∞–±–ª–∏—Ü—ã notification_types –∏ status_transitions —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            notifications_data = [
                ('order_created', '–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω', '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞'),
                ('order_taken', '–ó–∞–∫–∞–∑ –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É', '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–∑—è—Ç–∏–∏ –∑–∞–∫–∞–∑–∞ –≤ —Ä–∞–±–æ—Ç—É'),
                ('order_ready', '–ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ', '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞ –∫ –≤—ã–¥–∞—á–µ'),
                ('order_completed', '–ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω', '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞'),
                ('order_cancelled', '–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω', '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞'),
                ('order_cancelled_by_user', '–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º', '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º')
            ]
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            for code, name, description in notifications_data:
                await conn.execute(
                    text("""
                        INSERT INTO notification_types (code, name, description, is_active, created_at)
                        VALUES (:code, :name, :description, :is_active, CURRENT_TIMESTAMP)
                        ON CONFLICT (code) DO NOTHING
                    """),
                    {
                        'code': code,
                        'name': name, 
                        'description': description,
                        'is_active': True
                    }
                )
            
            print("‚úÖ –¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            
            # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É —Å—Ç–∞—Ç—É—Å–∞–º–∏
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º ID —Å—Ç–∞—Ç—É—Å–æ–≤ –∏ —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            result = await conn.execute(text("SELECT id, code FROM order_statuses"))
            statuses = {row[1]: row[0] for row in result}
            
            result = await conn.execute(text("SELECT id, code FROM notification_types"))
            notifications = {row[1]: row[0] for row in result}
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥—ã
            transitions = [
                # from_status, to_status, notification_type
                (None, 'new', 'order_created'),  # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
                ('new', 'processing', 'order_taken'),  # –í–∑—è—Ç–∏–µ –≤ —Ä–∞–±–æ—Ç—É
                ('processing', 'ready_for_pickup', 'order_ready'),  # –ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ
                ('ready_for_pickup', 'delivered', 'order_completed'),  # –í—ã–ø–æ–ª–Ω–µ–Ω
                ('new', 'cancelled', 'order_cancelled'),  # –û—Ç–º–µ–Ω–µ–Ω –∏–∑ –Ω–æ–≤–æ–≥–æ
                ('processing', 'cancelled', 'order_cancelled'),  # –û—Ç–º–µ–Ω–µ–Ω –∏–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                ('new', 'cancelled', 'order_cancelled_by_user'),  # –û—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            ]
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥—ã
            for from_status, to_status, notification_type in transitions:
                from_status_id = statuses.get(from_status) if from_status else None
                to_status_id = statuses.get(to_status)
                notification_type_id = notifications.get(notification_type)
                
                if to_status_id and notification_type_id:
                    await conn.execute(
                        text("""
                            INSERT INTO status_transitions (from_status_id, to_status_id, notification_type_id, is_active, created_at)
                            VALUES (:from_status_id, :to_status_id, :notification_type_id, :is_active, CURRENT_TIMESTAMP)
                            ON CONFLICT DO NOTHING
                        """),
                        {
                            'from_status_id': from_status_id,
                            'to_status_id': to_status_id,
                            'notification_type_id': notification_type_id,
                            'is_active': True
                        }
                    )
            
            print("‚úÖ –ü–µ—Ä–µ—Ö–æ–¥—ã —Å—Ç–∞—Ç—É—Å–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            print("üéâ –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        logger.error(f"Migration error: {e}")
        raise

if __name__ == "__main__":
    asyncio.run(create_notification_system()) 